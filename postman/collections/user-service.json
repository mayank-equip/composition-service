{
	"info": {
		"_postman_id": "89795b16-3a9b-4aa8-8aa6-f13173c3f859",
		"name": "user-service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "19609580-89795b16-3a9b-4aa8-8aa6-f13173c3f859"
	},
	"item": [
		{
			"name": "Analytics",
			"item": [
				{
					"name": "Get reports",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6e01e80e-4814-4989-9bb1-609740a1afce",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"// pm.test(\"Verify id is generated\", function () {",
									"//     pm.expect(jsonData.id).length.greaterThan(0);",
									"// });",
									"",
									"pm.environment.set(\"reportId\", jsonData[0].reportId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0ed692b9-a983-4af1-8b51-29ef42251bde",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/reports",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"reports"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate report url",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "028a19ba-70d9-42bd-88ea-fd01a172957d",
								"exec": [
									"let jsonData = pm.response.text();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify url is generated\", function () {",
									"    pm.expect(jsonData).includes(\"https://app.mode.com/equip/reports/\" + pm.environment.get(\"reportId\") + \"/embed?access_key=021d60eae80c3569d06b68e0&max_age=0\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f59d5b75-f2a3-4bc4-b034-32ff31a6b765",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/reports/{{reportId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"reports",
								"{{reportId}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "319d8cf9-696b-43dd-9a7a-958d5d9240dc"
		},
		{
			"name": "Provider",
			"item": [
				{
					"name": "Add Provider",
					"item": [
						{
							"name": "Add Provider",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a3f30193-310b-4d34-9be7-bead536b6491",
										"exec": [
											"let ld = require('lodash');",
											"let timezones = [\"Hawaii Standard Time\", \"Hawaii-Aleutian Time\", \"Alaska Time\", \"Pacific Time\", \"Arizona\", \"Mountain Time\", \"Central Time\", \"Eastern Time\", \"London/UK Time\"];",
											"let regions = [\"Northeast\", \"Southwest\", \"Southeast\", \"West\", \"Midwest\"];",
											"let providerTypes = [",
											"        \"Admissions Specialist\",",
											"        \"Analyst\",",
											"        \"Billing Specialist\",",
											"        \"Care Coordinator\",",
											"        \"Client Success\",",
											"        \"Clinical Ops\",",
											"        \"Clinical Supervisor\",",
											"        \"Dietitian\",",
											"        \"Family Experience Navigator\",",
											"        \"Family Mentor\",",
											"        \"Insurance Specialist\",",
											"        \"Nurse Practitioner\",",
											"        \"Patient Service Representative\",",
											"        \"Peer Mentor\",",
											"        \"Physician\",",
											"        \"Physician Assistant\",",
											"        \"Practice Coordinator\",",
											"        \"Product Support\",",
											"        \"Provider Partnerships\",",
											"        \"Psychiatrist\",",
											"        \"Therapist\"",
											"    ];",
											"let capacities = [\"full-time\", \"part-time\"];",
											"",
											"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
											"let lastName = pm.variables.replaceIn('{{$randomLastName}}')",
											"let email = \"qa\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
											"let phoneNumber = pm.variables.replaceIn('{{$randomPhoneNumber}}');",
											"",
											"let supervisorId = \"\";",
											"",
											"let capacity = ld.sample(capacities);",
											"",
											"let hoursPerWeek;",
											"if (capacity == \"full-time\") {",
											"    hoursPerWeek = 40;",
											"} else {",
											"    hoursPerWeek = Math.floor(Math.random() * 90);",
											"}",
											"",
											"let accountStatus = \"active\";",
											"",
											"let permissions = [\"admin\", \"maud\", \"both\"];",
											"let permission = ld.sample(permissions);",
											"",
											"let roles = [\"admin:role:manage-users\",",
											"    \"maud:role:general-access\",",
											"    \"maud:role:advanced-access\"];",
											"",
											"if (permission === \"admin\") {",
											"    roles = [\"\\\"admin:role:manage-users\\\"\"];",
											"} else if (permission === \"maud\") {",
											"    roles = [\"\\\"maud:role:general-access\\\"\", \"\\\"maud:role:advanced-access\\\"\"];",
											"} else if (permission === \"both\") {",
											"    roles = [\"\\\"admin:role:manage-users\\\"\", \"\\\"maud:role:general-access\\\"\", \"\\\"maud:role:advanced-access\\\"\"];",
											"}",
											"",
											"pm.environment.set(\"providerFirstName\", firstName);",
											"pm.environment.set(\"providerLastName\", lastName);",
											"pm.environment.set(\"providerEmail\", email);",
											"pm.environment.set(\"providerPhoneNumber\", phoneNumber);",
											"pm.environment.set(\"providerTimezone\", ld.sample(timezones));",
											"pm.environment.set(\"providerRegion\", ld.sample(regions));",
											"pm.environment.set(\"providerType\", ld.sample(providerTypes));",
											"pm.environment.set(\"providerCapacity\", capacity);",
											"pm.environment.set(\"providerHoursPerWeek\", hoursPerWeek);",
											"pm.environment.set(\"providerAccountStatus\", accountStatus);",
											"pm.environment.set(\"providerRoles\", roles);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4f90cf42-0c10-4d71-be25-a0f4a93d5e32",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"",
											"pm.test(\"Response has a JSON body\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"pm.test(\"Verify id is generated\", function () {",
											"    pm.expect(jsonData.id).length.greaterThan(0);",
											"});",
											"",
											"pm.environment.set(\"providerId\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4214c4e8-1072-4327-acbb-c41140f2abfe",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"{{providerFirstName}}\",\n    \"lastName\": \"{{providerLastName}}\",\n    \"email\": \"{{providerEmail}}\",\n    \"phoneNumber\": \"{{providerPhoneNumber}}\",\n    \"timezone\": \"{{providerTimezone}}\",\n    \"region\": \"{{providerRegion}}\",\n    \"providerType\": \"{{providerType}}\",\n    \"capacity\": \"{{providerCapacity}}\",\n    \"hoursPerWeek\": \"{{providerHoursPerWeek}}\",\n    \"accountStatus\": \"{{providerAccountStatus}}\",\n    \"roles\": [\n        {{providerRoles}}\n    ],\n    \"supervisorId\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/providers",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"providers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Provider by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify user details\", function () {",
											"    pm.expect(jsonData.userId).to.eql(pm.environment.get(\"providerId\"));",
											"    pm.expect(jsonData.firstName).to.eql(pm.environment.get(\"providerFirstName\"));",
											"    pm.expect(jsonData.lastName).to.eql(pm.environment.get(\"providerLastName\"));",
											"    pm.expect(jsonData.email).to.eql(pm.environment.get(\"providerEmail\"));",
											"    pm.expect(jsonData.phoneNumber).to.eql(pm.environment.get(\"providerPhoneNumber\"));",
											"    pm.expect(jsonData.providerTypeName).to.eql(pm.environment.get(\"providerType\"));",
											"    pm.expect(jsonData.region).to.eql(pm.environment.get(\"providerRegion\"));",
											"    pm.expect(jsonData.timezone).to.eql(pm.environment.get(\"providerTimezone\"));",
											"    pm.expect(jsonData.userStatus).to.eql(pm.environment.get(\"providerAccountStatus\"));",
											"    // pm.expect(jsonData.supervisor).to.eql(pm.environment.get(\"supervisor\"));",
											"    //pm.expect(jsonData.roles).to.equals(pm.environment.get(\"roles\"));",
											"});"
										],
										"type": "text/javascript",
										"id": "46f8daaf-3700-480e-a6ed-0889d3d89df1"
									}
								}
							],
							"id": "3dd136dc-2ad9-4c2e-b3a9-9a5ebc791fc2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/providers/{{providerId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"providers",
										"{{providerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Provider",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "379b8649-3e6c-4456-8fc1-aa26c4ee578a",
										"exec": [
											"let ld = require('lodash');",
											"let timezones=[\"Hawaii Standard Time\",\"Hawaii-Aleutian Time\",\"Alaska Time\",\"Pacific Time\",\"Arizona\",\"Mountain Time\",\"Central Time\",\"Eastern Time\",\"London/UK Time\"];",
											"let regions=[\"Northeast\",\"Southwest\",\"Southeast\",\"West\",\"Midwest\"];",
											"let providerTypes=[\"Therapist\",\"Dietitian\",\"Medical Assistant\",\"Clinical Ops\",\"Family Mentor\",\"Peer Mentor\",\"Physician\",\"Psychiatrist\",\"Billing Specialist\",\"Analyst\",\"Admissions Specialist\",\"Clinical Supervisor\",\"Family Experience Navigator\",\"Insurance Specialist\",\"Patient Service Representative\",\"Product Support\"];",
											"let capacities=[\"full-time\",\"part-time\"];",
											"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
											"let lastName = pm.variables.replaceIn('{{$randomLastName}}')",
											"let email = \"qa\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
											"let phoneNumber = pm.variables.replaceIn('{{$randomPhoneNumber}}');",
											"let supervisorId=\"\";",
											"let capacity = ld.sample(capacities);",
											"let hoursPerWeek;",
											"if(capacity==\"full-time\"){",
											"    hoursPerWeek = 40;",
											"}else{",
											"    hoursPerWeek=Math.floor(Math.random() * 90);",
											"}",
											"let accountStatus = \"active\";",
											"let permissions=[\"admin\",\"maud\",\"both\"];",
											"let permission = ld.sample(permissions);",
											"let roles = [\"admin:role:manage-users\",",
											"        \"maud:role:general-access\",",
											"        \"maud:role:advanced-access\"];",
											"if(permission===\"admin\"){",
											"    roles=[\"\\\"admin:role:manage-users\\\"\"];",
											"}else if(permission===\"maud\"){",
											"    roles=[\"\\\"maud:role:general-access\\\"\",\"\\\"maud:role:advanced-access\\\"\"];",
											"}else if(permission===\"both\"){",
											"    roles=[\"\\\"admin:role:manage-users\\\"\",\"\\\"maud:role:general-access\\\"\",\"\\\"maud:role:advanced-access\\\"\"];",
											"}",
											"pm.environment.set(\"firstName\", firstName);",
											"pm.environment.set(\"lastName\", lastName);",
											"pm.environment.set(\"email\", email);",
											"pm.environment.set(\"phoneNumber\", phoneNumber);",
											"pm.environment.set(\"timezone\", ld.sample(timezones));",
											"pm.environment.set(\"region\", ld.sample(regions));",
											"pm.environment.set(\"providerType\", ld.sample(providerTypes));",
											"pm.environment.set(\"capacity\",capacity);",
											"pm.environment.set(\"hoursPerWeek\",hoursPerWeek);",
											"pm.environment.set(\"accountStatus\", accountStatus);",
											"pm.environment.set(\"roles\", roles);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2cae6beb-f307-42e8-b06d-e3eb9a2c9741",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"{{providerFirstName}}\",\n    \"lastName\": \"{{providerLastName}}\",\n    \"email\": \"{{providerEmail}}\",\n    \"phoneNumber\": \"{{providerPhoneNumber}}\",\n    \"timezone\": \"{{providerTimezone}}\",\n    \"region\": \"{{providerRegion}}\",\n    \"providerType\": \"{{providerType}}\",\n    \"capacity\": \"{{providerCapacity}}\",\n    \"hoursPerWeek\": \"{{providerHoursPerWeek}}\",\n    \"accountStatus\": \"{{providerAccountStatus}}\",\n    \"roles\": [\n        {{providerRoles}}\n    ],\n    \"supervisorId\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/providers/{{providerId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"providers",
										"{{providerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Provider by ID after update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify user details\", function () {",
											"    pm.expect(jsonData.userId).to.eql(pm.environment.get(\"providerId\"));",
											"    pm.expect(jsonData.firstName).to.eql(pm.environment.get(\"providerFirstName\"));",
											"    pm.expect(jsonData.lastName).to.eql(pm.environment.get(\"providerLastName\"));",
											"    pm.expect(jsonData.email).to.eql(pm.environment.get(\"providerEmail\"));",
											"    pm.expect(jsonData.phoneNumber).to.eql(pm.environment.get(\"providerPhoneNumber\"));",
											"    pm.expect(jsonData.providerTypeName).to.eql(pm.environment.get(\"providerType\"));",
											"    pm.expect(jsonData.region).to.eql(pm.environment.get(\"providerRegion\"));",
											"    pm.expect(jsonData.timezone).to.eql(pm.environment.get(\"providerTimezone\"));",
											"    pm.expect(jsonData.userStatus).to.eql(pm.environment.get(\"providerAccountStatus\"));",
											"    // pm.expect(jsonData.supervisor).to.eql(pm.environment.get(\"supervisor\"));",
											"    //pm.expect(jsonData.roles).to.equals(pm.environment.get(\"roles\"));",
											"});"
										],
										"type": "text/javascript",
										"id": "6dd6330a-ff98-4c83-be79-7a964cad4d03"
									}
								}
							],
							"id": "c6abe4c3-4ef0-4990-898d-a82386e2a514",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/providers/{{providerId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"providers",
										"{{providerId}}"
									]
								}
							},
							"response": []
						}
					],
					"id": "eed27352-4403-4f60-9be4-8ef59e945d6a"
				},
				{
					"name": "EQ-7019 BE: Add Auth0 “advanced access” availability permissions",
					"item": [
						{
							"name": "Add Provider Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fc55bb59-9032-4d80-9023-1d4ad8e27929",
										"exec": [
											"let ld = require('lodash');",
											"let timezones = [\"Hawaii Standard Time\", \"Hawaii-Aleutian Time\", \"Alaska Time\", \"Pacific Time\", \"Arizona\", \"Mountain Time\", \"Central Time\", \"Eastern Time\", \"London/UK Time\"];",
											"let regions = [\"Northeast\", \"Southwest\", \"Southeast\", \"West\", \"Midwest\"];",
											"let providerTypes = [",
											"        \"Admissions Specialist\",",
											"        \"Analyst\",",
											"        \"Billing Specialist\",",
											"        \"Care Coordinator\",",
											"        \"Client Success\",",
											"        \"Clinical Ops\",",
											"        \"Clinical Supervisor\",",
											"        \"Dietitian\",",
											"        \"Family Experience Navigator\",",
											"        \"Family Mentor\",",
											"        \"Insurance Specialist\",",
											"        \"Nurse Practitioner\",",
											"        \"Patient Service Representative\",",
											"        \"Peer Mentor\",",
											"        \"Physician\",",
											"        \"Physician Assistant\",",
											"        \"Practice Coordinator\",",
											"        \"Product Support\",",
											"        \"Provider Partnerships\",",
											"        \"Psychiatrist\",",
											"        \"Therapist\"",
											"    ];",
											"let capacities = [\"full-time\", \"part-time\"];",
											"",
											"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
											"let lastName = pm.variables.replaceIn('{{$randomLastName}}');",
											"let email = \"qa\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
											"let phoneNumber = pm.variables.replaceIn('{{$randomPhoneNumber}}');",
											"",
											"let supervisorId = \"\";",
											"",
											"let capacity = ld.sample(capacities);",
											"",
											"let hoursPerWeek;",
											"if (capacity == \"full-time\") {",
											"    hoursPerWeek = 40;",
											"} else {",
											"    hoursPerWeek = Math.floor(Math.random() * 90);",
											"}",
											"",
											"let accountStatus = \"active\";",
											"",
											"let permissions = [\"admin\", \"maud\", \"both\"];",
											"let permission = ld.sample(permissions);",
											"",
											"let roles = [\"admin:role:manage-users\",",
											"    \"maud:role:general-access\",",
											"    \"maud:role:advanced-access\"];",
											"",
											"if (permission === \"admin\") {",
											"    roles = [\"\\\"admin:role:manage-users\\\"\"];",
											"} else if (permission === \"maud\") {",
											"    roles = [\"\\\"maud:role:general-access\\\"\", \"\\\"maud:role:advanced-access\\\"\"];",
											"} else if (permission === \"both\") {",
											"    roles = [\"\\\"admin:role:manage-users\\\"\", \"\\\"maud:role:general-access\\\"\", \"\\\"maud:role:advanced-access\\\"\"];",
											"}",
											"",
											"pm.environment.set(\"providerFirstName\", firstName);",
											"pm.environment.set(\"providerLastName\", lastName);",
											"pm.environment.set(\"providerEmail\", email);",
											"pm.environment.set(\"providerPhoneNumber\", phoneNumber);",
											"pm.environment.set(\"providerTimezone\", ld.sample(timezones));",
											"pm.environment.set(\"providerRegion\", ld.sample(regions));",
											"pm.environment.set(\"providerType\", ld.sample(providerTypes));",
											"pm.environment.set(\"providerCapacity\", capacity);",
											"pm.environment.set(\"providerHoursPerWeek\", hoursPerWeek);",
											"pm.environment.set(\"providerAccountStatus\", accountStatus);",
											"pm.environment.set(\"providerRoles\", roles);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ea102af0-a49c-4058-a9bb-c57b6403e38f",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"",
											"pm.test(\"Response has a JSON body\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"pm.environment.set(\"providerId\", jsonData.id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f44bcd54-96a9-4b0a-8c3c-43757542a4ac",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"{{providerFirstName}}\",\n    \"lastName\": \"{{providerLastName}}\",\n    \"email\": \"{{providerEmail}}\",\n    \"phoneNumber\": \"{{providerPhoneNumber}}\",\n    \"timezone\": \"{{providerTimezone}}\",\n    \"region\": \"{{providerRegion}}\",\n    \"providerType\": \"{{providerType}}\",\n    \"capacity\": \"{{providerCapacity}}\",\n    \"hoursPerWeek\": \"{{providerHoursPerWeek}}\",\n    \"accountStatus\": \"{{providerAccountStatus}}\",\n    \"roles\": [\n        {{providerRoles}}\n    ],\n    \"supervisorId\": \"\",\n    \"appAccess\": [\n        \"Admin\",\n        \"Maud\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/providers",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"providers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Provider by ID Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9c44e850-bb8c-4aa8-a7c4-ed2e8bc613f7",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"",
											"pm.test(\"Response has a JSON body\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"let permissionValadation;",
											"",
											"//This varible fetches the provider's permissions",
											"let permissions = jsonData.permissions;",
											"//console.log(permissions)",
											"",
											"// This loop, loops through the permissions array and if found \"maud:permission:availability\" and or \"maud:permission:availability-proxy\", it change the value of permissionValadation to true.  ",
											"for (let key in permissions) {",
											"    if ((permissions[key] == \"maud:permission:availability\") || (permissions[key] == \"maud:permission:availability-proxy\")) {",
											"        //console.log (permissions[key]);",
											"        permissionValadation = true;",
											"        break;",
											"    }",
											"}",
											"",
											"pm.test(\"Verify provider permission availability/avalability-proxy\", function () {",
											"    pm.expect(permissionValadation).to.be.true;",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "16c04ccf-1749-481b-9232-2f2c94fbc66f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/providers/{{providerId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"providers",
										"{{providerId}}"
									]
								}
							},
							"response": []
						}
					],
					"id": "d83b7015-c091-483e-a90d-0b1370542b62"
				},
				{
					"name": "Sort",
					"item": [
						{
							"name": "Sort by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"const pageSizes = pm.environment.get(\"pageSizes\");",
											"",
											"if (pageSizes && pageSizes.length > 0) {",
											"    postman.setNextRequest(request.name);",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"})",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"let ld = require('lodash');",
											"",
											"pm.test('Providers are sorted by last name', () => {",
											"    let sorted = [];",
											"    for (var i = 0; i < jsonData.providers.length; i++) {",
											"        sorted.push(jsonData.providers[i].lastName.toLowerCase());",
											"    }",
											"    console.log(sorted);",
											"",
											"    let expectedSortedOrder = ld.orderBy(sorted, [], ['asc']);",
											"    console.log(expectedSortedOrder);",
											"",
											"    for (let i = 0; i < jsonData['providers'].length; i++) {",
											"        tests[\"Provider# \" + (i + 1) + \" has last name as \" + jsonData['providers'][i].lastName]",
											"            = pm.expect(jsonData['providers'][i].lastName.toLowerCase()).to.include((expectedSortedOrder[i]).toLowerCase());",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"id": "ad69a021-f453-4a94-841e-153702d12834"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "70aa8f44-52c5-44f3-9aa5-77b84cee77fd"
									}
								}
							],
							"id": "77a9c347-530b-40c2-9d38-ee47a4ac5cbb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/providers?page-size={{pageSize}}&sort-by=name",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"providers"
									],
									"query": [
										{
											"key": "page-size",
											"value": "{{pageSize}}"
										},
										{
											"key": "sort-by",
											"value": "name",
											"description": "Sorting by name"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Sort by email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"const pageSizes = pm.environment.get(\"pageSizes\");",
											"",
											"if (pageSizes && pageSizes.length > 0) {",
											"    postman.setNextRequest(request.name);",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"})",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"let ld = require('lodash');",
											"",
											"pm.test('Providers are sorted by email', () => {",
											"    let sorted = [];",
											"    for (var i = 0; i < jsonData.providers.length; i++) {",
											"        sorted.push(jsonData.providers[i].email.toLowerCase());",
											"    }",
											"    console.log(sorted);",
											"",
											"    let expectedSortedOrder = ld.orderBy(sorted, [], ['asc']);",
											"    console.log(expectedSortedOrder);",
											"",
											"    for (let i = 0; i < jsonData['providers'].length; i++) {",
											"        tests[\"Provider# \" + (i + 1) + \" has email as \" + jsonData['providers'][i].email]",
											"            = pm.expect(jsonData['providers'][i].email.toLowerCase()).to.include((expectedSortedOrder[i]).toLowerCase());",
											"    }",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "4184562d-a9cd-4fd4-9ff2-baf3d4c08813"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "c521014a-4920-4cb2-9641-47385fe4c621"
									}
								}
							],
							"id": "fe5dffdf-66ab-4d1b-a9bd-186f304c0192",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/providers?page-size={{pageSize}}&sort-by=email",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"providers"
									],
									"query": [
										{
											"key": "page-size",
											"value": "{{pageSize}}"
										},
										{
											"key": "sort-by",
											"value": "email",
											"description": "Sorting by email"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Sort by time zone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"const pageSizes = pm.environment.get(\"pageSizes\");",
											"",
											"if (pageSizes && pageSizes.length > 0) {",
											"    postman.setNextRequest(request.name);",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"})",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"",
											"let ld = require('lodash');",
											"",
											"pm.test('Providers are sorted by time zone', () => {",
											"    let sorted = [];",
											"    for (var i = 0; i < jsonData.providers.length; i++) {",
											"        if (jsonData.providers[i].timezone === null) {",
											"            continue;",
											"        }",
											"        sorted.push(jsonData.providers[i].timezone);",
											"    }",
											"    console.log(sorted);",
											"",
											"    let expectedSortedOrder = ld.orderBy(sorted, [], ['asc']);",
											"    console.log(expectedSortedOrder);",
											"",
											"    for (let i = 0; i < sorted.length; i++) {",
											"        tests[\"Provider# \" + (i + 1) + \" has time zone as \" + jsonData['providers'][i].timezone]",
											"            = pm.expect(jsonData['providers'][i].timezone).to.include((expectedSortedOrder[i]));",
											"    }",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "ea094785-78db-438e-9efb-61b97690e05d"
									}
								}
							],
							"id": "d28f2f85-8c21-41e6-af59-4e15e690b830",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/providers?page-size={{pageSize}}&sort-by=timezone",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"providers"
									],
									"query": [
										{
											"key": "page-size",
											"value": "{{pageSize}}"
										},
										{
											"key": "sort-by",
											"value": "timezone",
											"description": "Sorting by timezone"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Sort by phone number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"const pageSizes = pm.environment.get(\"pageSizes\");",
											"",
											"if (pageSizes && pageSizes.length > 0) {",
											"    postman.setNextRequest(request.name);",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"})",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"",
											"let ld = require('lodash');",
											"",
											"pm.test('Providers are sorted by phone number', () => {",
											"    let sorted = [];",
											"    for (var i = 0; i < jsonData.providers.length; i++) {",
											"        if (jsonData.providers[i].phoneNumber === null) {",
											"            continue;",
											"        }",
											"        sorted.push(jsonData.providers[i].phoneNumber);",
											"    }",
											"    console.log(sorted);",
											"",
											"    let expectedSortedOrder = ld.orderBy(sorted, [], ['asc']);",
											"    console.log(expectedSortedOrder);",
											"",
											"    for (let i = 0; i < sorted.length; i++) {",
											"        tests[\"Provider# \" + (i + 1) + \" has phone number as \" + jsonData['providers'][i].phoneNumber]",
											"            = pm.expect(jsonData['providers'][i].phoneNumber).to.include((expectedSortedOrder[i]));",
											"    }",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "0cbcced6-0b9c-479b-803e-b986f873da6b"
									}
								}
							],
							"id": "2fd05b95-c1a0-49c8-a74a-c8efb044487f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/providers?page-size={{pageSize}}&sort-by=phone-number",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"providers"
									],
									"query": [
										{
											"key": "page-size",
											"value": "{{pageSize}}"
										},
										{
											"key": "sort-by",
											"value": "phone-number",
											"description": "Sorting by phoneNumber"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Sort by region",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"const pageSizes = pm.environment.get(\"pageSizes\");",
											"",
											"if (pageSizes && pageSizes.length > 0) {",
											"    postman.setNextRequest(request.name);",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"})",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"",
											"let ld = require('lodash');",
											"",
											"pm.test('Providers are sorted by region', () => {",
											"    let sorted = [];",
											"    for (var i = 0; i < jsonData.providers.length; i++) {",
											"        if (jsonData.providers[i].region === null) {",
											"            continue;",
											"        }",
											"        sorted.push(jsonData.providers[i].region);",
											"    }",
											"    console.log(sorted);",
											"",
											"    let expectedSortedOrder = ld.orderBy(sorted, [], ['asc']);",
											"    console.log(expectedSortedOrder);",
											"",
											"    for (let i = 0; i < sorted.length; i++) {",
											"        tests[\"Provider# \" + (i + 1) + \" has region as \" + jsonData['providers'][i].region]",
											"            = pm.expect(jsonData['providers'][i].region).to.include((expectedSortedOrder[i]));",
											"    }",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "feea7c55-807d-4458-9bed-8ee6aae30ea0"
									}
								}
							],
							"id": "0bf5db13-6173-49fb-b419-63545436c101",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/providers?page-size={{pageSize}}&sort-by=region",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"providers"
									],
									"query": [
										{
											"key": "page-size",
											"value": "{{pageSize}}"
										},
										{
											"key": "sort-by",
											"value": "region",
											"description": "Sorting by region"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "b220a153-cefc-41ad-b9f1-2524fa424fd6",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let pageSizes = pm.environment.get(\"pageSizes\");",
									"",
									"if (!pageSizes || pageSizes.length == 0) {",
									"    pageSizes = [10, 25, 50, 100];",
									"}",
									"",
									"let currentPageSize = pageSizes.shift();",
									"console.log(currentPageSize)",
									"pm.environment.set(\"pageSize\", currentPageSize);",
									"pm.environment.set(\"pageSizes\", pageSizes);"
								],
								"id": "64b82626-c706-476f-b7f1-0e2394feaa9f"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "235a89b3-a5a5-4df7-bd40-da1be2b34d09"
							}
						}
					]
				},
				{
					"name": "Filters",
					"item": [
						{
							"name": "Filter by timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7258a237-dda9-4c99-afe2-6bd83b21536f",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"const filProviderTimezones = pm.environment.get(\"filProviderTimezones\");",
											"",
											"if (filProviderTimezones && filProviderTimezones.length > 0) {",
											"    postman.setNextRequest(request.name);",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"",
											"pm.test(\"Response has a JSON body\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"if (jsonData.count > 0) {",
											"    pm.test(\"Verify provider filter by timezone\", () => {",
											"        for (let i = 0; i < jsonData['providers'].length; i++) {",
											"            tests[\"Provider# \" + (i + 1) + \" has timezone as \" + jsonData['providers'][i].timezone] = pm.expect(jsonData['providers'][i].timezone.toLowerCase()).to.include(pm.environment.get(\"filProviderTimezone\").toLowerCase());",
											"        }",
											"    });",
											"} else {",
											"    pm.test(\"Verify provider filter by timezone\", () => {",
											"        tests[\"Total number of patient(s): \" + jsonData.count] = pm.expect(jsonData.count).to.be.eql(jsonData['providers'].length);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f42ec22c-28b6-4b56-9353-93d165937457",
										"exec": [
											"let filProviderTimezones = pm.environment.get(\"filProviderTimezones\");",
											"",
											"if (!filProviderTimezones || filProviderTimezones.length == 0) {",
											"    filProviderTimezones = [\"Hawaii Standard Time\", \"Hawaii-Aleutian Time\", \"Alaska Time\", \"Pacific Time\", \"Arizona\", \"Mountain Time\", \"Central Time\", \"Eastern Time\", \"London/UK Time\"];",
											"}",
											"",
											"let currentFilProviderTimezone = filProviderTimezones.shift();",
											"console.log(currentFilProviderTimezone)",
											"pm.environment.set(\"filProviderTimezone\", currentFilProviderTimezone);",
											"pm.environment.set(\"filProviderTimezones\", filProviderTimezones);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4957a1e7-65ca-4e9e-9b74-c3ba4d23fb15",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/providers?page-size=500&filter-by=timezone::{{filProviderTimezone}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"providers"
									],
									"query": [
										{
											"key": "page-size",
											"value": "500"
										},
										{
											"key": "filter-by",
											"value": "timezone::{{filProviderTimezone}}",
											"description": "Filter by timezone"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filter by region",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f2a4def4-4b68-4800-bb7c-8d61120fa5b1",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"const filProviderRegions = pm.environment.get(\"filProviderRegions\");",
											"",
											"if (filProviderRegions && filProviderRegions.length > 0) {",
											"    postman.setNextRequest(request.name);",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"",
											"pm.test(\"Response has a JSON body\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"if (jsonData.count > 0) {",
											"    pm.test(\"Verify provider filter by region\", () => {",
											"        for (let i = 0; i < jsonData['providers'].length; i++) {",
											"            tests[\"Provider# \" + (i + 1) + \" has timezone as \" + jsonData['providers'][i].region] = pm.expect(jsonData['providers'][i].region.toLowerCase()).to.include(pm.environment.get(\"filProviderRegion\").toLowerCase());",
											"        }",
											"    });",
											"} else {",
											"    pm.test(\"Verify provider filter by region\", () => {",
											"        tests[\"Total number of patient(s): \" + jsonData.count] = pm.expect(jsonData.count).to.be.eql(jsonData['providers'].length);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2baf140b-b585-402b-835b-5959adfe0cdf",
										"exec": [
											"let filProviderRegions = pm.environment.get(\"filProviderRegions\");",
											"",
											"if (!filProviderRegions || filProviderRegions.length == 0) {",
											"    filProviderRegions = [\"Northeast\", \"Southwest\", \"Southeast\", \"West\", \"Midwest\"];",
											"}",
											"",
											"let currentfilProviderRegion = filProviderRegions.shift();",
											"console.log(currentfilProviderRegion)",
											"pm.environment.set(\"filProviderRegion\", currentfilProviderRegion);",
											"pm.environment.set(\"filProviderRegions\", filProviderRegions);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "63684ef5-3703-4298-a0e0-bf0fb46d2a70",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/providers?page-size=500&filter-by=region::{{filProviderRegion}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"providers"
									],
									"query": [
										{
											"key": "page-size",
											"value": "500"
										},
										{
											"key": "filter-by",
											"value": "region::{{filProviderRegion}}",
											"description": "Filter by region"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filter by role",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e7cd3f2-0a4f-43a0-a5dc-06bf844e041a",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"const filProviderRoles = pm.environment.get(\"filProviderRoles\");",
											"",
											"if (filProviderRoles && filProviderRoles.length > 0) {",
											"    postman.setNextRequest(request.name);",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"",
											"pm.test(\"Response has a JSON body\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"if (jsonData.count > 0) {",
											"    pm.test(\"Verify provider filter by role\", () => {",
											"        for (let i = 0; i < jsonData['providers'].length; i++) {",
											"            tests[\"Provider# \" + (i + 1) + \" has role as \" + jsonData['providers'][i].providerTypeName] = pm.expect(jsonData['providers'][i].providerTypeName.toLowerCase()).to.include(pm.environment.get(\"filProviderRole\").toLowerCase());",
											"        }",
											"    });",
											"} else {",
											"    pm.test(\"Verify provider filter by role\", () => {",
											"        tests[\"Total number of patient(s): \" + jsonData.count] = pm.expect(jsonData.count).to.be.eql(jsonData['providers'].length);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1c4d81c3-a705-4d5c-b937-e93a4cefe090",
										"exec": [
											"let filProviderRoles = pm.environment.get(\"filProviderRoles\");",
											"",
											"if (!filProviderRoles || filProviderRoles.length == 0) {",
											"    filProviderRoles = [\"Therapist\", \"Dietitian\", \"Medical Assistant\", \"Clinical Ops\", \"Family Mentor\", \"Peer Mentor\", \"Physician\", \"Psychiatrist\", \"Billing Specialist\", \"Analyst\", \"Admissions Specialist\", \"Clinical Supervisor\", \"Family Experience Navigator\", \"Insurance Specialist\", \"Patient Service Representative\", \"Product Support\", \"Provider partnerships\", \"Client success\"];",
											"}",
											"",
											"let currentfilProviderRole = filProviderRoles.shift();",
											"console.log(currentfilProviderRole)",
											"pm.environment.set(\"filProviderRole\", currentfilProviderRole);",
											"pm.environment.set(\"filProviderRoles\", filProviderRoles);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a9600fe5-7147-4b86-a1b0-72ba5c25bb1b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/providers?page-size=500&filter-by=role::{{filProviderRole}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"providers"
									],
									"query": [
										{
											"key": "page-size",
											"value": "500"
										},
										{
											"key": "filter-by",
											"value": "role::{{filProviderRole}}",
											"description": "Filter by role"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filter by user status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "72e34cb0-178d-4271-9642-14d86928b031",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"const filProviderUserStatuses = pm.environment.get(\"filProviderUserStatuses\");",
											"",
											"if (filProviderUserStatuses && filProviderUserStatuses.length > 0) {",
											"    postman.setNextRequest(request.name);",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"",
											"pm.test(\"Response has a JSON body\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"if (jsonData.count > 0) {",
											"    pm.test(\"Verify provider filter by user status\", () => {",
											"        for (let i = 0; i < jsonData['providers'].length; i++) {",
											"            tests[\"Provider# \" + (i + 1) + \" has user status as \" + jsonData['providers'][i].userStatus] = pm.expect(jsonData['providers'][i].userStatus.toLowerCase()).to.include(pm.environment.get(\"filProviderUserStatus\").toLowerCase());",
											"        } ",
											"    });",
											"} else {",
											"    pm.test(\"Verify provider filter by user status\", () => {",
											"        tests[\"Total number of patient(s): \" + jsonData.count] = pm.expect(jsonData.count).to.be.eql(jsonData['providers'].length);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "376766a6-8704-449e-a5ef-a39db36b61b8",
										"exec": [
											"let filProviderUserStatuses = pm.environment.get(\"filProviderUserStatuses\");",
											"",
											"if (!filProviderUserStatuses || filProviderUserStatuses.length == 0) {",
											"    filProviderUserStatuses = [\"active\", \"inactive\"];",
											"}",
											"",
											"let currentfilProviderUserStatus = filProviderUserStatuses.shift();",
											"console.log(currentfilProviderUserStatus)",
											"pm.environment.set(\"filProviderUserStatus\", currentfilProviderUserStatus);",
											"pm.environment.set(\"filProviderUserStatuses\", filProviderUserStatuses);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "8b1fdde4-5368-4a68-991e-4ba43343ce6e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/providers?page-size=1000&filter-by=status::{{filProviderUserStatus}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"providers"
									],
									"query": [
										{
											"key": "page-size",
											"value": "1000"
										},
										{
											"key": "filter-by",
											"value": "status::{{filProviderUserStatus}}",
											"description": "Filter active users"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filter by app access",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ea09e7d6-a9e6-41e0-b48c-7b857ea223f4",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"const filProviderAppAccesses = pm.environment.get(\"filProviderAppAccesses\");",
											"",
											"if (filProviderAppAccesses && filProviderAppAccesses.length > 0) {",
											"    postman.setNextRequest(request.name);",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"",
											"pm.test(\"Response has a JSON body\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"if (jsonData.count > 0) {",
											"    pm.test(\"Verify provider filter by app access\", () => {",
											"        for (let i = 0; i < jsonData['providers'].length; i++) {",
											"            tests[\"Provider# \" + (i + 1) + \" has app access as \" + jsonData['providers'][i].appAccess] = pm.expect(jsonData['providers'][i].appAccess).to.include(pm.environment.get(\"filProviderAppAccess\"));",
											"        }",
											"    });",
											"} else {",
											"    pm.test(\"Verify provider filter by app access\", () => {",
											"        tests[\"Total number of patient(s): \" + jsonData.count] = pm.expect(jsonData.count).to.be.eql(jsonData['providers'].length);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9162206d-5625-4751-af6f-e5e8de298ab3",
										"exec": [
											"let filProviderAppAccesses = pm.environment.get(\"filProviderAppAccesses\");",
											"",
											"if (!filProviderAppAccesses || filProviderAppAccesses.length == 0) {",
											"    filProviderAppAccesses = [\"Admin\", \"Maud\"];",
											"}",
											"",
											"let currentFilProviderAppAccess = filProviderAppAccesses.shift();",
											"console.log(currentFilProviderAppAccess)",
											"pm.environment.set(\"filProviderAppAccess\", currentFilProviderAppAccess);",
											"pm.environment.set(\"filProviderAppAccesses\", filProviderAppAccesses);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "25dd8271-2360-4326-9457-954e01f3284b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/providers?page-size=10&filter-by=app-access::{{filProviderAppAccess}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"providers"
									],
									"query": [
										{
											"key": "page-size",
											"value": "10"
										},
										{
											"key": "filter-by",
											"value": "app-access::{{filProviderAppAccess}}",
											"description": "Filter active users"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filter by auth id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"",
											"pm.test(\"Response has a JSON body\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"if (jsonData.count > 0) {",
											"    pm.test(\"Verify provider filter by auth id\", () => {",
											"        tests[\"Total number of patient(s): \" + jsonData.count] = pm.expect(jsonData.count).to.be.eql(jsonData['providers'].length);",
											"    });",
											"} else {",
											"    pm.test(\"Verify provider filter by auth id\", () => {",
											"        tests[\"Total number of patient(s): \" + jsonData.count] = pm.expect(jsonData.count).to.be.eql(jsonData['providers'].length);",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"id": "783fcec5-022a-476f-a40d-2cc3fbc852f9"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "e23120b3-5bec-42fe-8036-cad26f77888e"
									}
								}
							],
							"id": "d57a33f7-d78f-457b-8bd6-cb18322ff855",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/providers?page-size=1000&filter-by=auth-id::auth0|6237fd134ae7090069a15dcb",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"providers"
									],
									"query": [
										{
											"key": "page-size",
											"value": "1000"
										},
										{
											"key": "filter-by",
											"value": "auth-id::auth0|6237fd134ae7090069a15dcb"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filter by email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "80ffc22b-8a10-4bae-a1ca-6daa9e389851",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"",
											"pm.test(\"Response has a JSON body\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"if (jsonData.count > 0) {",
											"    pm.test(\"Verify provider filter by email\", () => {",
											"        for (let i = 0; i < jsonData['providers'].length; i++) {",
											"            tests[\"Provider# \" + (i + 1) + \" has email as \" + jsonData['providers'][i].email] = pm.expect(jsonData['providers'][i].email).to.include(\"mayank@equip.health\");",
											"        }",
											"    });",
											"} else {",
											"    pm.test(\"Verify provider filter by email\", () => {",
											"        tests[\"Total number of patient(s): \" + jsonData.count] = pm.expect(jsonData.count).to.be.eql(jsonData['providers'].length);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4157358a-c60a-4755-89d8-2c2aae05f765",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "58ee56b7-4506-4aa6-be54-4e773b2ae7fa",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/providers?page-size=1000&filter-by=email::mayank@equip.health",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"providers"
									],
									"query": [
										{
											"key": "page-size",
											"value": "1000"
										},
										{
											"key": "filter-by",
											"value": "email::mayank@equip.health"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filter by external id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "69957d6f-2b0a-4dc6-8f2e-4a7740f75f12",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"",
											"pm.test(\"Response has a JSON body\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"if (jsonData.count > 0) {",
											"    pm.test(\"Verify provider filter by external id\", () => {",
											"        for (let i = 0; i < jsonData['providers'].length; i++) {",
											"            tests[\"Provider# \" + (i + 1) + \" has external id as \" + jsonData['providers'][i].userId] = pm.expect(jsonData['providers'][i].userId).to.include(pm.environment.get(\"providerId\"));",
											"        }",
											"    });",
											"} else {",
											"    pm.test(\"Verify provider filter by external id\", () => {",
											"        tests[\"Total number of patient(s): \" + jsonData.count] = pm.expect(jsonData.count).to.be.eql(jsonData['providers'].length);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "123a3689-7e06-42cb-bca9-f7f47a1c9b58",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "99744326-8945-488d-b438-61119b095879",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/providers?page-size=1000&filter-by=external-id::{{providerId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"providers"
									],
									"query": [
										{
											"key": "page-size",
											"value": "1000"
										},
										{
											"key": "filter-by",
											"value": "external-id::{{providerId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filter by phone number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "45057d7d-0993-402a-9ff6-8d52918adfd4",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"",
											"pm.test(\"Response has a JSON body\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"if (jsonData.count > 0) {",
											"    pm.test(\"Verify provider filter by phone number\", () => {",
											"        for (let i = 0; i < jsonData['providers'].length; i++) {",
											"            tests[\"Provider# \" + (i + 1) + \" has phone number as \" + jsonData['providers'][i].phoneNumber] = pm.expect(jsonData['providers'][i].phoneNumber).to.include(pm.environment.get(\"providerPhoneNumber\"));",
											"        }",
											"    });",
											"} else {",
											"    pm.test(\"Verify provider filter by phone number\", () => {",
											"        tests[\"Total number of patient(s): \" + jsonData.count] = pm.expect(jsonData.count).to.be.eql(jsonData['providers'].length);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0bb573d4-cb20-46e5-afe8-aed061b0b159",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f2665d74-7283-4656-aebd-417e589c5ed3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/providers?page-size=1000&filter-by=phone-number::{{providerPhoneNumber}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"providers"
									],
									"query": [
										{
											"key": "page-size",
											"value": "1000"
										},
										{
											"key": "filter-by",
											"value": "phone-number::{{providerPhoneNumber}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filter by multiple fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df39cad8-4645-4c56-8122-26f77929e0a5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"Test timezone\",()=>{",
											"    const responseJson = pm.response.json();",
											"    for(let i=0;i<responseJson.providers.length;i++){",
											"        pm.expect(responseJson.providers[i].timezone).to.eql('Arizona');",
											"        pm.expect(responseJson.providers[i].region).to.eql('Northeast');",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a51b6362-03a5-4be4-8d7a-844b432f2229",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/providers?filter-by=region::Northeast%26timezone::Arizona&page-size=500",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"providers"
									],
									"query": [
										{
											"key": "filter-by",
											"value": "region::Northeast%26timezone::Arizona",
											"description": "fiter by multiple fields. Separate field value pairs by '&'"
										},
										{
											"key": "page-size",
											"value": "500"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filter by multiple values",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c21a23a-ef04-4a51-9512-697dab25df50",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"Test timezone\",()=>{",
											"    const responseJson = pm.response.json();",
											"    for(let i=0;i<responseJson.providers.length;i++){",
											"        pm.expect(responseJson.providers[i].region).to.be.oneOf([\"West\",\"Southeast\"]);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "8c1b776e-8a0c-4759-8447-4057eb02d50b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/providers?filter-by=region::West%26region::Southeast&page-size=500",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"providers"
									],
									"query": [
										{
											"key": "filter-by",
											"value": "region::West%26region::Southeast",
											"description": "Filter by multiple values of a field. separate the values by ','"
										},
										{
											"key": "page-size",
											"value": "500"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "28a067ba-287e-48a1-b04f-18f96f723def"
				},
				{
					"name": "Get providers by page-number, size",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseJson = pm.response.json();",
									"",
									"const pageSizes = pm.environment.get(\"pageSizes\");",
									"if (pageSizes && pageSizes.length > 0) {",
									"    postman.setNextRequest(request.name);",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify providers by page size and page number\", () => {",
									"    var pageSize = pm.request.url.query.get(\"page-size\");",
									"    pm.expect(responseJson.providers.length.toString()).to.eql(pageSize);",
									"});"
								],
								"type": "text/javascript",
								"id": "96708755-4c13-4bee-b424-c2b4622e4ddf"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let pageSizes = pm.environment.get(\"pageSizes\");",
									"",
									"if (!pageSizes || pageSizes.length == 0) {",
									"    pageSizes = [10, 25];",
									"}",
									"",
									"let currentPageSize = pageSizes.shift();",
									"console.log(currentPageSize)",
									"pm.environment.set(\"pageSize\", currentPageSize);",
									"pm.environment.set(\"pageSizes\", pageSizes);"
								],
								"type": "text/javascript",
								"id": "2dff143c-4650-459a-8c3b-e294b2994115"
							}
						}
					],
					"id": "34df87b2-2ce0-4542-87d7-699ee4786867",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/providers?page-size={{pageSize}}&page-number=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"providers"
							],
							"query": [
								{
									"key": "page-size",
									"value": "{{pageSize}}"
								},
								{
									"key": "page-number",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get provider types",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "011d211b-b738-4e0c-8201-7c3b5bfadf1f",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"let providerTypeList = [\"Admissions Specialist\", \"Analyst\", \"Billing Specialist\", \"Care Coordinator\", \"Client Success\", \"Clinical Ops\", \"Clinical Supervisor\", \"Dietitian\", \"Family Experience Navigator\", \"Family Mentor\", \"Insurance Specialist\", \"Medical Assistant\", \"Nurse Practitioner\", \"Patient Service Representative\", \"Peer Mentor\", \"Physician\", \"Physician Assistant\", \"Practice Coordinator\", \"Product Support\", \"Provider Partnerships\", \"Psychiatric Nurse Practitioner\", \"Psychiatrist\", \"Registered Nurse\", \"Therapist\"];",
									"",
									"pm.test(\"Verify data type\", function () {",
									"    for (i = 0; i < jsonData.length; i++) {",
									"        pm.expect(jsonData[i].label).to.be.a('string');",
									"        pm.expect(jsonData[i].id).to.be.a('string');",
									"    }",
									"});",
									"",
									"pm.test(\"Verify provider type values\", function () {",
									"    providerTypeList.sort();",
									"    let ld = require('lodash');",
									"    let sortedJsonData = ld.orderBy(jsonData, ['label'], ['asc']);",
									"",
									"    for (i = 0; i < providerTypeList.length; i++) {",
									"        tests[\"Provider type: \" + providerTypeList[i] + \" exists\"] = pm.expect(sortedJsonData[i].label).eql(providerTypeList[i]);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ff1e1509-d859-4b50-965c-1992afe0faac",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/enums/provider-types",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"enums",
								"provider-types"
							]
						}
					},
					"response": []
				}
			],
			"id": "29bb4ba2-d015-474a-b600-d48f49134620",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "1801d15b-75af-4157-bf2d-e87cf05f7d01"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "fed824ca-fb3f-4252-8c1a-62cc08c30bf8"
					}
				}
			]
		},
		{
			"name": "Patient",
			"item": [
				{
					"name": "Add Patient",
					"item": [
						{
							"name": "Add Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e51f3e3-d3c7-4d2f-bdeb-c042f17a47a4",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"",
											"pm.test(\"Response has a JSON body\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"pm.test(\"Verify id is generated\", function () {",
											"    pm.expect(jsonData.id).length.greaterThan(0);",
											"});",
											"",
											"pm.environment.set(\"patientId\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8daad9db-2d36-4f74-a3da-a48ced8dc35b",
										"exec": [
											"let ld = require('lodash');",
											"",
											"let gendersList = [",
											"    \"Cis-gender male\",",
											"    \"Cis-gender female\",",
											"    \"Non-binary\",",
											"    \"Other\",",
											"    \"Unknown\",",
											"    \"Transgender male\",",
											"    \"Transgender female\"",
											"];",
											"",
											"let pronounsList = [",
											"    \"(F)ae/(F)aer/(F)aers\",",
											"    \"Ey/Em/Eirs\",",
											"    \"He/Him/His\",",
											"    \"None\",",
											"    \"Other\",",
											"    \"She/Her/Hers\",",
											"    \"They/Them/Theirs\",",
											"    \"Xe/Xem/Xir\"",
											"];",
											"",
											"let ethnicitiesList = [",
											"    \"Asian\",",
											"    \"Black/African American\",",
											"    \"White/Caucasian\",",
											"    \"Hispanic/Latinx\",",
											"    \"Native American, Indian American, or Alaska Native\",",
											"    \"Native Hawaiian or other Pacific Islander\",",
											"    \"Middle Eastern or North African\",",
											"    \"Prefer not to answer\",",
											"    \"Other\"",
											"];",
											"",
											"let languagesList = [",
											"    \"Afrikaans\",",
											"    \"American Sign Language (ASL)\",",
											"    \"Armenian\",",
											"    \"Bamanankan\",",
											"    \"Bavarian\",",
											"    \"Bengali\",",
											"    \"Bhojpuri\",",
											"    \"Burmese\",",
											"    \"Cameroonian Pidgin\",",
											"    \"Cebuano\",",
											"    \"Chinese (Mandarin)\",",
											"    \"Chinese (Wu/Shanghainese)\",",
											"    \"Chinese (Yue/Cantonese)\",",
											"    \"Chittagonian\",",
											"    \"Czech\",",
											"    \"Deccan\",",
											"    \"Dutch\",",
											"    \"Eastern Punjabi\",",
											"    \"Egyptian Spoken Arabic\",",
											"    \"English\",",
											"    \"Filipino\",",
											"    \"French\",",
											"    \"Gan Chinese\",",
											"    \"Greek\",",
											"    \"Gujarati\",",
											"    \"Hakka Chinese\",",
											"    \"Hausa\",",
											"    \"Hindi\",",
											"    \"Hungarian\",",
											"    \"Igbo\",",
											"    \"Indonesian\",",
											"    \"Iranian Persian\",",
											"    \"Italian\",",
											"    \"Japanese\",",
											"    \"Javanese\",",
											"    \"Jinyu Chinese\",",
											"    \"Kannada\",",
											"    \"Kazakh\",",
											"    \"Khmer\",",
											"    \"Korean\",",
											"    \"Magahi\",",
											"    \"Maithili\",",
											"    \"Malay\",",
											"    \"Malayalam\",",
											"    \"Marathi\",",
											"    \"Nepali\",",
											"    \"Nigerian Fulfulde\",",
											"    \"Nigerian Pidgin\",",
											"    \"Northeastern Thai\",",
											"    \"Northern Kurdish\",",
											"    \"Northern Pashto\",",
											"    \"Northern Uzbek\",",
											"    \"Odia\",",
											"    \"Persian\",",
											"    \"Polish\",",
											"    \"Portuguese\",",
											"    \"Romanian\",",
											"    \"Russian\",",
											"    \"Sadri\",",
											"    \"Saraiki\",",
											"    \"Serbo-Croatian\",",
											"    \"Sindhi\",",
											"    \"Somali\",",
											"    \"South Azerbaijani\",",
											"    \"Southern Min Chinese\",",
											"    \"Spanish\",",
											"    \"Standard Arabic\",",
											"    \"Standard German\",",
											"    \"Sunda\",",
											"    \"Swahili\",",
											"    \"Swedish\",",
											"    \"Sylheti\",",
											"    \"Tagalog\",",
											"    \"Tamil\",",
											"    \"Telugu\",",
											"    \"Thai\",",
											"    \"Turkish\",",
											"    \"Ukrainian\",",
											"    \"Urdu\",",
											"    \"Vietnamese\",",
											"    \"Western Punjabi\",",
											"    \"Xhosa\",",
											"    \"Xiang Chinese\",",
											"    \"Yiddish\",",
											"    \"Yoruba\",",
											"    \"Zulu\"",
											"];",
											"",
											"let sexList = [",
											"    \"Male\",",
											"    \"Female\",",
											"    \"Unknown\"",
											"];",
											"",
											"let timezonesList = [",
											"    \"Alaska Time\",",
											"    \"Arizona\",",
											"    \"Central Time\",",
											"    \"Eastern Time\",",
											"    \"Hawaii Standard Time\",",
											"    \"Hawaii-Aleutian Time\",",
											"    \"London/UK Time\",",
											"    \"Mountain Time\",",
											"    \"Pacific Time\"",
											"];",
											"",
											"let contactPreferences = [",
											"    \"Email\",",
											"    \"No preference\",",
											"    \"Phone\",",
											"    \"SMS\",",
											"    \"Unknown\"",
											"];",
											"",
											"let statesList = [\"AK\", \"AL\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"DC\", \"FL\", \"GA\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"OH\", \"OK\", \"OR\", \"PA\", \"PR\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\", \"Outside US\", \"Unknown\"];",
											"",
											"let addressLine2List = [\"Apt 1\", \"Apt 2\", \"Apt 3\", \"Unit #1\", \"Unit #2\", \"Unit #3\", \"Apt 2L\", \"Apt 2R\"];",
											"",
											"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
											"let lastName = pm.variables.replaceIn('{{$randomLastName}}');",
											"let chosenName = pm.variables.replaceIn('{{$randomFirstName}}');",
											"let email = \"qa\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
											"let zip = Math.floor(10000 + Math.random() * 90000);",
											"",
											"//Generate random Date of Birth in YYYY-MM-DD Format",
											"function randomDate(start, end) {",
											"    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));",
											"}",
											"let date = randomDate(new Date(1990, 00, 01), new Date());",
											"let dateOfBirth = date.getFullYear() + '-' + (\"0\" + (date.getMonth() + 1)).slice(-2) + '-' + (\"0\" + date.getDate()).slice(-2);",
											"",
											"//Save the variables to be used in next request for validation",
											"pm.environment.set(\"patientFirstName\", firstName);",
											"pm.environment.set(\"patientLastName\", lastName);",
											"pm.environment.set(\"patientEmail\", email);",
											"pm.environment.set(\"patientPhoneNumber\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));",
											"pm.environment.set(\"patientChosenName\", chosenName);",
											"pm.environment.set(\"patientDateOfBirth\", dateOfBirth);",
											"pm.environment.set(\"patientAddressLine1\", pm.variables.replaceIn('{{$randomStreetAddress}}'));",
											"pm.environment.set(\"patientAddressLine2\", ld.sample(addressLine2List));",
											"pm.environment.set(\"patientCity\", pm.variables.replaceIn('{{$randomCity}}'));",
											"pm.environment.set(\"patientState\", ld.sample(statesList));",
											"pm.environment.set(\"patientCountry\", \"US\");",
											"pm.environment.set(\"patientZip\", zip.toString());",
											"pm.environment.set(\"patientLatitude\", pm.variables.replaceIn('{{$randomLatitude}}'));",
											"pm.environment.set(\"patientLongitude\", pm.variables.replaceIn('{{$randomLongitude}}'));",
											"pm.environment.set(\"patientEthnicities\", JSON.stringify(ld.sampleSize(ethnicitiesList, 2).sort()));",
											"pm.environment.set(\"patientLanguages\", JSON.stringify(ld.sampleSize(languagesList, 2).sort()));",
											"pm.environment.set(\"patientGenderOnRecord\", ld.sample(gendersList));",
											"pm.environment.set(\"patientGenderOffRecord\", ld.sample(gendersList));",
											"pm.environment.set(\"patientPronounsOnRecord\", JSON.stringify(ld.sampleSize(pronounsList, 3).sort()));",
											"pm.environment.set(\"patientPronounsOffRecord\", JSON.stringify(ld.sampleSize(pronounsList, 3).sort()));",
											"pm.environment.set(\"patientSex\", ld.sample(sexList));",
											"pm.environment.set(\"patientTimezone\", ld.sample(timezonesList));",
											"pm.environment.set(\"patientContactPreferences\", JSON.stringify(ld.sampleSize(contactPreferences, 2).sort()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "bfa7fcfb-d197-4cb3-a513-6adc15a4c62c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"{{patientFirstName}}\",\n    \"lastName\": \"{{patientLastName}}\",\n    \"dateOfBirth\": \"{{patientDateOfBirth}}\",\n    \"email\": \"{{patientEmail}}\",\n    \"contactPreferences\": {{patientContactPreferences}},\n    \"ethnicities\": {{patientEthnicities}},\n    \"phoneNumber\": \"{{patientPhoneNumber}}\",\n    \"chosenName\": \"{{patientChosenName}}\",\n    \"languages\": {{patientLanguages}},\n    \"genderOnRecord\": \"{{patientGenderOnRecord}}\",\n    \"genderOffRecord\": \"{{patientGenderOffRecord}}\",\n    \"pronounsOnRecord\": {{patientPronounsOnRecord}},\n    \"pronounsOffRecord\": {{patientPronounsOffRecord}},\n    \"sex\": \"{{patientSex}}\",\n    \"timezone\": \"{{patientTimezone}}\",\n    \"latitude\": \"{{patientLatitude}}\",\n    \"longitude\": \"{{patientLongitude}}\",\n    \"addressLine1\": \"{{patientAddressLine1}}\",\n    \"addressLine2\": \"{{patientAddressLine2}}\",\n    \"city\": \"{{patientCity}}\",\n    \"country\": \"{{patientCountry}}\",\n    \"state\": \"{{patientState}}\",\n    \"zip\": \"{{patientZip}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/patients",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"patients"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Patient by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e778924-6a6e-4c8f-a6d1-3d66d033054f",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"pm.test(\"Response has a JSON body\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Verify patient details\", function () {",
											"    pm.expect(jsonData.userId).to.eql(pm.environment.get(\"patientId\"));",
											"    pm.expect(jsonData.firstName).to.eql(pm.environment.get(\"patientFirstName\"));",
											"    pm.expect(jsonData.lastName).to.eql(pm.environment.get(\"patientLastName\"));",
											"    pm.expect(jsonData.email).to.eql(pm.environment.get(\"patientEmail\"));",
											"    pm.expect(jsonData.phoneNumber).to.eql(pm.environment.get(\"patientPhoneNumber\"));",
											"    pm.expect(jsonData.chosenName).to.eql(pm.environment.get(\"patientChosenName\"));",
											"    pm.expect(jsonData.dateOfBirth).to.eql(pm.environment.get(\"patientDateOfBirth\"));",
											"    pm.expect(jsonData.addressLine1).to.eql(pm.environment.get(\"patientAddressLine1\"));",
											"    pm.expect(jsonData.addressLine2).to.eql(pm.environment.get(\"patientAddressLine2\"));",
											"    pm.expect(jsonData.city).to.eql(pm.environment.get(\"patientCity\"));",
											"    pm.expect(jsonData.state).to.eql(pm.environment.get(\"patientState\"));",
											"    pm.expect(jsonData.country).to.eql(pm.environment.get(\"patientCountry\"));",
											"    pm.expect(jsonData.zip).to.eql(pm.environment.get(\"patientZip\"));",
											"    pm.expect(jsonData.latitude.toFixed(4)).to.eql(pm.environment.get(\"patientLatitude\"));",
											"    pm.expect(jsonData.longitude.toFixed(4)).to.include(pm.environment.get(\"patientLongitude\"));",
											"    pm.expect(JSON.stringify(jsonData.ethnicities.sort())).to.eql(pm.environment.get(\"patientEthnicities\").replaceAll(\"\\/\\\"\", \"'\"));",
											"    pm.expect(JSON.stringify(jsonData.languages.sort())).to.eql(pm.environment.get(\"patientLanguages\").replaceAll(\"\\/\\\"\", \"'\"));",
											"    pm.expect(jsonData.genderOnRecord).to.eql(pm.environment.get(\"patientGenderOnRecord\"));",
											"    pm.expect(jsonData.genderOffRecord).to.eql(pm.environment.get(\"patientGenderOffRecord\"));",
											"    pm.expect(JSON.stringify(jsonData.pronounsOnRecord.sort())).to.eql(pm.environment.get(\"patientPronounsOnRecord\")",
											"        .replaceAll(\"\\/\\\"\", \"'\"));",
											"    pm.expect(JSON.stringify(jsonData.pronounsOffRecord.sort())).to.eql(pm.environment.get(\"patientPronounsOffRecord\").replaceAll(\"\\/\\\"\", \"'\"));",
											"    pm.expect(jsonData.sex).to.eql(pm.environment.get(\"patientSex\"));",
											"    pm.expect(jsonData.timezone).to.eql(pm.environment.get(\"patientTimezone\"));",
											"    pm.expect(JSON.stringify(jsonData.contactPreferences.sort())).to.eql(pm.environment.get(\"patientContactPreferences\").replaceAll(\"\\/\\\"\", \"'\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5dc660dd-37c9-4787-bb1b-51cb53c91262",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/patients/{{patientId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"patients",
										"{{patientId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Patient",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f218a349-40dd-43b6-b8fa-0fb3d835bb25",
										"exec": [
											"let ld = require('lodash');",
											"",
											"let gendersList = [",
											"    \"Cis-gender male\",",
											"    \"Cis-gender female\",",
											"    \"Non-binary\",",
											"    \"Other\",",
											"    \"Unknown\",",
											"    \"Transgender male\",",
											"    \"Transgender female\"",
											"];",
											"",
											"let pronounsList = [",
											"    \"(F)ae/(F)aer/(F)aers\",",
											"    \"Ey/Em/Eirs\",",
											"    \"He/Him/His\",",
											"    \"None\",",
											"    \"Other\",",
											"    \"She/Her/Hers\",",
											"    \"They/Them/Theirs\",",
											"    \"Xe/Xem/Xir\"",
											"];",
											"",
											"let ethnicitiesList = [",
											"    \"Asian\",",
											"    \"Black/African American\",",
											"    \"White/Caucasian\",",
											"    \"Hispanic/Latinx\",",
											"    \"Native American, Indian American, or Alaska Native\",",
											"    \"Native Hawaiian or other Pacific Islander\",",
											"    \"Middle Eastern or North African\",",
											"    \"Prefer not to answer\",",
											"    \"Other\"",
											"];",
											"",
											"let languagesList = [",
											"    \"English\",",
											"    \"Spanish\",",
											"    \"Chinese\",",
											"    \"French\",",
											"    \"Tagalog\",",
											"    \"Vietnamese\",",
											"    \"Korean\",",
											"    \"German\",",
											"    \"Russian\",",
											"    \"Italian\",",
											"    \"Portuguese\",",
											"    \"Polish\",",
											"    \"Japanese\",",
											"    \"Persian\",",
											"    \"Greek\",",
											"    \"Serbo-Croatian\",",
											"    \"Armenian\",",
											"    \"Yiddish\",",
											"    \"American Sign Language (ASL)\"",
											"];",
											"",
											"let sexList = [",
											"    \"Male\",",
											"    \"Female\"",
											"];",
											"",
											"let timezonesList = [",
											"    \"Hawaii Standard Time\",",
											"    \"Hawaii-Aleutian Time\",",
											"    \"Alaska Time\",",
											"    \"Pacific Time\",",
											"    \"Arizona\",",
											"    \"Mountain Time\",",
											"    \"Central Time\",",
											"    \"Eastern Time\"",
											"];",
											"",
											"let contactPreferences = [\"Email\", \"No preference\", \"Phone\", \"Unknown\"];",
											"",
											"let statesList = [\"AK\", \"AL\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"DC\", \"FL\", \"GA\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"OH\", \"OK\", \"OR\", \"PA\", \"PR\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\", \"Outside US\", \"Unknown\"];",
											"",
											"let addressLine2List = [\"Apt 1\", \"Apt 2\", \"Apt 3\", \"Unit #1\", \"Unit #2\", \"Unit #3\", \"Apt 2L\", \"Apt 2R\"];",
											"",
											"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
											"let lastName = pm.variables.replaceIn('{{$randomLastName}}');",
											"let chosenName = pm.variables.replaceIn('{{$randomFirstName}}');",
											"let email = \"qa\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
											"let zip = Math.floor(10000 + Math.random() * 90000);",
											"",
											"//Generate random Date of Birth in YYYY-MM-DD Format",
											"function randomDate(start, end) {",
											"    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));",
											"}",
											"let date = randomDate(new Date(1990, 00, 01), new Date());",
											"let dateOfBirth = date.getFullYear() + '-' + (\"0\" + (date.getMonth() + 1)).slice(-2) + '-' + (\"0\" + date.getDate()).slice(-2);",
											"",
											"//Save the variables to be used in next request for validation",
											"// pm.environment.set(\"patientFirstName\", firstName);",
											"// pm.environment.set(\"patientLastName\", lastName);",
											"// pm.environment.set(\"patientEmail\", email);",
											"pm.environment.set(\"patientPhoneNumber\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));",
											"pm.environment.set(\"patientChosenName\", chosenName);",
											"pm.environment.set(\"patientDateOfBirth\", dateOfBirth);",
											"pm.environment.set(\"patientAddressLine1\", pm.variables.replaceIn('{{$randomStreetAddress}}'));",
											"pm.environment.set(\"patientAddressLine2\", ld.sample(addressLine2List));",
											"pm.environment.set(\"patientCity\", pm.variables.replaceIn('{{$randomCity}}'));",
											"pm.environment.set(\"patientState\", ld.sample(statesList));",
											"pm.environment.set(\"patientCountry\", \"US\");",
											"pm.environment.set(\"patientZip\", zip.toString());",
											"pm.environment.set(\"patientLatitude\", pm.variables.replaceIn('{{$randomLatitude}}'));",
											"pm.environment.set(\"patientLongitude\", pm.variables.replaceIn('{{$randomLongitude}}'));",
											"pm.environment.set(\"patientEthnicities\", JSON.stringify(ld.sampleSize(ethnicitiesList, 2).sort()));",
											"pm.environment.set(\"patientLanguages\", JSON.stringify(ld.sampleSize(languagesList, 2).sort()));",
											"pm.environment.set(\"patientGenderOnRecord\", ld.sample(gendersList));",
											"pm.environment.set(\"patientGenderOffRecord\", ld.sample(gendersList));",
											"pm.environment.set(\"patientPronounsOnRecord\", JSON.stringify(ld.sampleSize(pronounsList, 3).sort()));",
											"pm.environment.set(\"patientPronounsOffRecord\", JSON.stringify(ld.sampleSize(pronounsList, 3).sort()));",
											"pm.environment.set(\"patientSex\", ld.sample(sexList));",
											"pm.environment.set(\"patientTimezone\", ld.sample(timezonesList));",
											"pm.environment.set(\"patientContactPreferences\", JSON.stringify(ld.sampleSize(contactPreferences, 2).sort()));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0fa88418-8226-40cb-81ea-9762d8edd8a6",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"",
											"pm.test(\"Response has a JSON body\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"pm.test(\"Verify id is generated\", function () {",
											"    pm.expect(jsonData.id).length.greaterThan(0);",
											"});",
											"",
											"//pm.environment.set(\"patientId\", jsonData.id);",
											"// pm.sendRequest(\"Get Patient by ID\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "fa694431-1b93-4cd0-959f-fcff52d6f914",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"{{patientFirstName}}\",\n    \"lastName\": \"{{patientLastName}}\",\n    \"dateOfBirth\": \"{{patientDateOfBirth}}\",\n    \"email\": \"{{patientEmail}}\",\n    \"contactPreferences\": {{patientContactPreferences}},\n    \"ethnicities\": {{patientEthnicities}},\n    \"phoneNumber\": \"{{patientPhoneNumber}}\",\n    \"chosenName\": \"{{patientChosenName}}\",\n    \"languages\": {{patientLanguages}},\n    \"genderOnRecord\": \"{{patientGenderOnRecord}}\",\n    \"genderOffRecord\": \"{{patientGenderOffRecord}}\",\n    \"pronounsOnRecord\": {{patientPronounsOnRecord}},\n    \"pronounsOffRecord\": {{patientPronounsOffRecord}},\n    \"sex\": \"{{patientSex}}\",\n    \"timezone\": \"{{patientTimezone}}\",\n    \"latitude\": \"{{patientLatitude}}\",\n    \"longitude\": \"{{patientLongitude}}\",\n    \"addressLine1\": \"{{patientAddressLine1}}\",\n    \"addressLine2\": \"{{patientAddressLine2}}\",\n    \"city\": \"{{patientCity}}\",\n    \"country\": \"{{patientCountry}}\",\n    \"state\": \"{{patientState}}\",\n    \"zip\": \"{{patientZip}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/patients/{{patientId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"patients",
										"{{patientId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Patient by ID after update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c253c3e9-f32f-401c-bcd2-9432e8b48fb9",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"pm.test(\"Response has a JSON body\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"pm.test(\"Verify patient details\", function () {",
											"    pm.expect(jsonData.userId).to.eql(pm.environment.get(\"patientId\"));",
											"    pm.expect(jsonData.firstName).to.eql(pm.environment.get(\"patientFirstName\"));",
											"    pm.expect(jsonData.lastName).to.eql(pm.environment.get(\"patientLastName\"));",
											"    pm.expect(jsonData.email).to.eql(pm.environment.get(\"patientEmail\"));",
											"    pm.expect(jsonData.phoneNumber).to.eql(pm.environment.get(\"patientPhoneNumber\"));",
											"    pm.expect(jsonData.chosenName).to.eql(pm.environment.get(\"patientChosenName\"));",
											"    pm.expect(jsonData.dateOfBirth).to.eql(pm.environment.get(\"patientDateOfBirth\"));",
											"    pm.expect(jsonData.addressLine1).to.eql(pm.environment.get(\"patientAddressLine1\"));",
											"    pm.expect(jsonData.addressLine2).to.eql(pm.environment.get(\"patientAddressLine2\"));",
											"    pm.expect(jsonData.city).to.eql(pm.environment.get(\"patientCity\"));",
											"    pm.expect(jsonData.state).to.eql(pm.environment.get(\"patientState\"));",
											"    pm.expect(jsonData.country).to.eql(pm.environment.get(\"patientCountry\"));",
											"    pm.expect(jsonData.zip).to.eql(pm.environment.get(\"patientZip\"));",
											"    pm.expect(jsonData.latitude.toFixed(4)).to.eql(pm.environment.get(\"patientLatitude\"));",
											"    pm.expect(jsonData.longitude.toFixed(4)).to.include(pm.environment.get(\"patientLongitude\"));",
											"    pm.expect(JSON.stringify(jsonData.ethnicities.sort())).to.eql(pm.environment.get(\"patientEthnicities\").replaceAll(\"\\/\\\"\", \"'\"));",
											"    pm.expect(JSON.stringify(jsonData.languages.sort())).to.eql(pm.environment.get(\"patientLanguages\").replaceAll(\"\\/\\\"\", \"'\"));",
											"    pm.expect(jsonData.genderOnRecord).to.eql(pm.environment.get(\"patientGenderOnRecord\"));",
											"    pm.expect(jsonData.genderOffRecord).to.eql(pm.environment.get(\"patientGenderOffRecord\"));",
											"    pm.expect(JSON.stringify(jsonData.pronounsOnRecord.sort())).to.eql(pm.environment.get(\"patientPronounsOnRecord\")",
											"        .replaceAll(\"\\/\\\"\", \"'\"));",
											"    pm.expect(JSON.stringify(jsonData.pronounsOffRecord.sort())).to.eql(pm.environment.get(\"patientPronounsOffRecord\").replaceAll(\"\\/\\\"\", \"'\"));",
											"    pm.expect(jsonData.sex).to.eql(pm.environment.get(\"patientSex\"));",
											"    pm.expect(jsonData.timezone).to.eql(pm.environment.get(\"patientTimezone\"));",
											"    pm.expect(JSON.stringify(jsonData.contactPreferences.sort())).to.eql(pm.environment.get(\"patientContactPreferences\").replaceAll(\"\\/\\\"\", \"'\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "fca97edd-6907-42ec-ab24-6fb13c2c5e48",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/patients/{{patientId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"patients",
										"{{patientId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Patient - Only State Value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e92309ca-7720-4c02-81d6-112108ffb829",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"",
											"pm.test(\"Response has a JSON body\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"pm.test(\"Verify id is generated\", function () {",
											"    pm.expect(jsonData.id).length.greaterThan(0);",
											"});",
											"",
											"pm.environment.set(\"patientId\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "615c4bb1-b3da-42a5-9d5c-2298322e7ad5",
										"exec": [
											"let ld = require('lodash');",
											"",
											"",
											"",
											"let statesList = [\"AK\", \"AL\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"DC\", \"FL\", \"GA\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"OH\", \"OK\", \"OR\", \"PA\", \"PR\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\", \"Outside US\", \"Unknown\"];",
											"",
											"",
											"",
											"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
											"let lastName = pm.variables.replaceIn('{{$randomLastName}}');",
											"let chosenName = pm.variables.replaceIn('{{$randomFirstName}}');",
											"",
											"//Generate random Date of Birth in YYYY-MM-DD Format",
											"function randomDate(start, end) {",
											"    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));",
											"}",
											"let date = randomDate(new Date(1990, 00, 01), new Date());",
											"let dateOfBirth = date.getFullYear() + '-' + (\"0\" + (date.getMonth() + 1)).slice(-2) + '-' + (\"0\" + date.getDate()).slice(-2);",
											"",
											"//Save the variables to be used in next request for validation",
											"pm.environment.set(\"patientFirstName\", firstName);",
											"pm.environment.set(\"patientLastName\", lastName);",
											"pm.environment.set(\"patientChosenName\", chosenName);",
											"pm.environment.set(\"patientDateOfBirth\", dateOfBirth);",
											"pm.environment.set(\"patientState\", ld.sample(statesList));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "bd22badc-c8be-4b3a-9c5a-9139a08e7fe0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"{{patientFirstName}}\",\n    \"lastName\": \"{{patientLastName}}\",\n    \"dateOfBirth\": \"{{patientDateOfBirth}}\",\n    \"state\": \"{{patientState}}\"\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/patients",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"patients"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Patient Tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86bd95cf-bdfa-4455-8ef6-db95cb657292",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"pm.expect(jsonData.id).to.be.eql(\"Tags for the user updated.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4db7f1c9-8329-4944-81dc-99843e87ac2b",
										"exec": [
											"pm.environment.set(\"TagName\", \"EQ_APP_TREAT\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a05c8093-682c-4fa6-a853-b1317da24114",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tags\": [\"{{TagName}}\"]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/{{patientId}}/tags",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"{{patientId}}",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Patient by ID - Patient added with only State Value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b454da7d-0159-4aca-ac8f-d2f3157772aa",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"pm.test(\"Response has a JSON body\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"pm.test(\"Verify patient details\", function () {",
											"    pm.expect(jsonData.userId).to.eql(pm.environment.get(\"patientId\"));",
											"    pm.expect(jsonData.firstName).to.eql(pm.environment.get(\"patientFirstName\"));",
											"    pm.expect(jsonData.lastName).to.eql(pm.environment.get(\"patientLastName\"));",
											"    pm.expect(jsonData.dateOfBirth).to.eql(pm.environment.get(\"patientDateOfBirth\"));",
											"    pm.expect(jsonData.state).to.eql(pm.environment.get(\"patientState\"));",
											"",
											"});",
											"",
											"pm.expect(jsonData.patientTags[0]).to.be.eql(\"Equip Web App for Treatment\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "74688996-555c-4027-a4e4-9036a901069f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/patients/{{patientId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"patients",
										"{{patientId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Patient - without State Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "edc676e1-c695-43e1-a66c-bc800359aad3",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"",
											"pm.test(\"Verify response\", function () {",
											"    pm.expect(jsonData._embedded.errors[0].message).to.equal(\"request.state: Address state cannot be blank\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "75b9d73e-d00f-4076-96f2-c6b2a484a332",
										"exec": [
											"let ld = require('lodash');",
											"",
											"let gendersList = [",
											"    \"Cis-gender male\",",
											"    \"Cis-gender female\",",
											"    \"Non-binary\",",
											"    \"Other\",",
											"    \"Unknown\",",
											"    \"Transgender male\",",
											"    \"Transgender female\"",
											"];",
											"",
											"let pronounsList = [",
											"    \"He/Him/His\",",
											"    \"She/Her/Hers\",",
											"    \"They/Them/Theirs\",",
											"    \"Other\"",
											"];",
											"",
											"let ethnicitiesList = [",
											"    \"Asian\",",
											"    \"Black/African American\",",
											"    \"White/Caucasian\",",
											"    \"Hispanic/Latinx\",",
											"    \"Native American, Indian American, or Alaska Native\",",
											"    \"Native Hawaiian or other Pacific Islander\",",
											"    \"Middle Eastern or North African\",",
											"    \"Prefer not to answer\",",
											"    \"Other\"",
											"];",
											"",
											"let languagesList = [",
											"    \"English\",",
											"    \"Spanish\",",
											"    \"Chinese\",",
											"    \"French\",",
											"    \"Tagalog\",",
											"    \"Vietnamese\",",
											"    \"Korean\",",
											"    \"German\",",
											"    \"Russian\",",
											"    \"Italian\",",
											"    \"Portuguese\",",
											"    \"Polish\",",
											"    \"Japanese\",",
											"    \"Persian\",",
											"    \"Greek\",",
											"    \"Serbo-Croatian\",",
											"    \"Armenian\",",
											"    \"Yiddish\",",
											"    \"American Sign Language (ASL)\"",
											"];",
											"",
											"let sexList = [",
											"    \"Male\",",
											"    \"Female\"",
											"];",
											"",
											"let timezonesList = [",
											"    \"Hawaii Standard Time\",",
											"    \"Hawaii-Aleutian Time\",",
											"    \"Alaska Time\",",
											"    \"Pacific Time\",",
											"    \"Arizona\",",
											"    \"Mountain Time\",",
											"    \"Central Time\",",
											"    \"Eastern Time\"",
											"];",
											"",
											"let contactPreferences = [\"Email\", \"No preference\", \"Phone\", \"Unknown\"];",
											"",
											"let statesList = [\"AK\", \"AL\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"DC\", \"FL\", \"GA\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"OH\", \"OK\", \"OR\", \"PA\", \"PR\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\", \"Outside US\", \"Unknown\"];",
											"",
											"let addressLine2List = [\"Apt 1\", \"Apt 2\", \"Apt 3\", \"Unit #1\", \"Unit #2\", \"Unit #3\", \"Apt 2L\", \"Apt 2R\"];",
											"",
											"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
											"let lastName = pm.variables.replaceIn('{{$randomLastName}}');",
											"let chosenName = pm.variables.replaceIn('{{$randomFirstName}}');",
											"let email = \"qa\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
											"let zip = Math.floor(10000 + Math.random() * 90000);",
											"",
											"//Generate random Date of Birth in YYYY-MM-DD Format",
											"function randomDate(start, end) {",
											"    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));",
											"}",
											"let date = randomDate(new Date(1990, 00, 01), new Date());",
											"let dateOfBirth = date.getFullYear() + '-' + (\"0\" + (date.getMonth() + 1)).slice(-2) + '-' + (\"0\" + date.getDate()).slice(-2);",
											"",
											"//Save the variables to be used in next request for validation",
											"pm.environment.set(\"patientFirstName\", firstName);",
											"pm.environment.set(\"patientLastName\", lastName);",
											"pm.environment.set(\"patientEmail\", email);",
											"pm.environment.set(\"patientPhoneNumber\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));",
											"pm.environment.set(\"patientChosenName\", chosenName);",
											"pm.environment.set(\"patientDateOfBirth\", dateOfBirth);",
											"pm.environment.set(\"patientAddressLine1\", pm.variables.replaceIn('{{$randomStreetAddress}}'));",
											"pm.environment.set(\"patientAddressLine2\", ld.sample(addressLine2List));",
											"pm.environment.set(\"patientCity\", pm.variables.replaceIn('{{$randomCity}}'));",
											"pm.environment.set(\"patientState\", ld.sample(statesList));",
											"pm.environment.set(\"patientCountry\", \"US\");",
											"pm.environment.set(\"patientZip\", zip.toString());",
											"pm.environment.set(\"patientLatitude\", pm.variables.replaceIn('{{$randomLatitude}}'));",
											"pm.environment.set(\"patientLongitude\", pm.variables.replaceIn('{{$randomLongitude}}'));",
											"pm.environment.set(\"patientEthnicities\", JSON.stringify(ld.sampleSize(ethnicitiesList, 2).sort()));",
											"pm.environment.set(\"patientLanguages\", JSON.stringify(ld.sampleSize(languagesList, 2).sort()));",
											"pm.environment.set(\"patientGenderOnRecord\", ld.sample(gendersList));",
											"pm.environment.set(\"patientGenderOffRecord\", ld.sample(gendersList));",
											"pm.environment.set(\"patientPronounsOnRecord\", ld.sample(pronounsList));",
											"pm.environment.set(\"patientPronounsOffRecord\", ld.sample(pronounsList));",
											"pm.environment.set(\"patientSex\", ld.sample(sexList));",
											"pm.environment.set(\"patientTimezone\", ld.sample(timezonesList));",
											"pm.environment.set(\"patientContactPreferences\", JSON.stringify(ld.sampleSize(contactPreferences, 2).sort()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ae4b1fae-9008-4901-8ab3-f327361fd849",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"{{patientFirstName}}\",\n    \"lastName\": \"{{patientLastName}}\",\n    \"dateOfBirth\": \"{{patientDateOfBirth}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/patients",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"patients"
									]
								}
							},
							"response": []
						}
					],
					"id": "afab2edd-dcf2-4757-8e82-69dd3d7c550c",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "2bb23ab2-bd3d-4d78-8dd5-969c66878391"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "90d25965-0851-4431-936b-478ae4a01371"
							}
						}
					]
				},
				{
					"name": "Filters",
					"item": [
						{
							"name": "Filter by first name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"",
											"pm.test(\"Response has a JSON body\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"if (jsonData.length < 1) {",
											"    pm.test('No patients found with first name as ' + pm.environment.get(\"patientFirstName\"));",
											"} else {",
											"    pm.test(\"Verify patients filter by first name\", () => {",
											"        for (let i = 0; i < jsonData.length; i++) {",
											"            tests[\"Patient# \" + (i + 1) + \" has first name as \" + jsonData[i].firstName] = pm.expect(jsonData[i].firstName.toLowerCase()).to.include(pm.environment.get(\"patientFirstName\").toLowerCase());",
											"        }",
											"    });",
											"};"
										],
										"type": "text/javascript",
										"id": "1e9918aa-9bd4-45a3-a5d1-5e1cefe229b3"
									}
								}
							],
							"id": "932ef7e8-9b50-46fc-bb18-defa870d166d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/patients?filter-by=firstname::{{patientFirstName}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"patients"
									],
									"query": [
										{
											"key": "filter-by",
											"value": "firstname::{{patientFirstName}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filter by last name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"",
											"pm.test(\"Response has a JSON body\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"if (jsonData.length < 1) {",
											"    pm.test('No patients found with last name as ' + pm.environment.get(\"patientLastName\"));",
											"} else {",
											"    pm.test(\"Verify patients filter by last name\", () => {",
											"        for (let i = 0; i < jsonData.length; i++) {",
											"            tests[\"Patient# \" + (i + 1) + \" has last name as \" + jsonData[i].lastName] = pm.expect(jsonData[i].lastName.toLowerCase()).to.include(pm.environment.get(\"patientLastName\").toLowerCase());",
											"        }",
											"    })",
											"}"
										],
										"type": "text/javascript",
										"id": "f2055d23-cf84-48fa-a809-6cff8002d286"
									}
								}
							],
							"id": "83957f85-a7ed-4120-808c-2895641af3dd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/patients?filter-by=lastname::{{patientLastName}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"patients"
									],
									"query": [
										{
											"key": "filter-by",
											"value": "lastname::{{patientLastName}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filter by chosen name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"",
											"pm.test(\"Response has a JSON body\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"if (jsonData.length < 1) {",
											"    pm.test('No patients found with chosen name as ' + pm.environment.get(\"patientLastName\"));",
											"} else {",
											"    pm.test(\"Verify patients filter by chosen name\", () => {",
											"        for (let i = 0; i < jsonData.length; i++) {",
											"            tests[\"Patient# \" + (i + 1) + \" has chosen name as \" + jsonData[i].chosenName] = pm.expect(jsonData[i].chosenName).to.include(pm.environment.get(\"patientChosenName\"));",
											"        }",
											"    })",
											"}"
										],
										"type": "text/javascript",
										"id": "c647c3d7-3c2e-4ebb-a041-3f837d3f24c9"
									}
								}
							],
							"id": "f4b3c65b-8829-41e6-bbed-7a061cd4e444",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/patients?page-size=500&filter-by=chosen-name::{{patientChosenName}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"patients"
									],
									"query": [
										{
											"key": "page-size",
											"value": "500"
										},
										{
											"key": "filter-by",
											"value": "chosen-name::{{patientChosenName}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filter by date of birth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"",
											"pm.test(\"Response has a JSON body\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"if (jsonData.length < 1) {",
											"    pm.test('No patients found with date of birth as ' + pm.environment.get(\"patientDateOfBirth\"));",
											"} else {",
											"    pm.test(\"Verify patients filter by date of birth\", () => {",
											"        for (let i = 0; i < jsonData.length; i++) {",
											"            tests[\"Patient# \" + (i + 1) + \" has first name as \" + jsonData[i].dateOfBirth] = pm.expect(jsonData[i].dateOfBirth).to.eql(pm.environment.get(\"patientDateOfBirth\"));",
											"        }",
											"    })",
											"}"
										],
										"type": "text/javascript",
										"id": "c90126be-1e14-422d-8d4c-e724ff08df34"
									}
								}
							],
							"id": "97c294fb-2c44-4a51-aba4-cb90b58aaa99",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/patients?filter-by=dob::{{patientDateOfBirth}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"patients"
									],
									"query": [
										{
											"key": "filter-by",
											"value": "dob::{{patientDateOfBirth}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filter by email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"",
											"pm.test(\"Response has a JSON body\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"if (jsonData.length < 1) {",
											"    pm.test('No patients found with email as ' + pm.environment.get(\"patientLastName\"));",
											"} else {",
											"    pm.test(\"Verify patients filter by email\", () => {",
											"        for (let i = 0; i < jsonData.length; i++) {",
											"            tests[\"Patient# \" + (i + 1) + \" has email as \" + jsonData[i].email] = pm.expect(jsonData[i].email.toLowerCase()).to.eql(pm.environment.get(\"patientEmail\").toLowerCase());",
											"        }",
											"    })",
											"}"
										],
										"type": "text/javascript",
										"id": "cd96bc99-6f65-42d0-8b0f-c2a83cba0f3b"
									}
								}
							],
							"id": "c1467caf-e900-4d03-830e-1532e4c47db1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/patients?page-size=500&filter-by=email::{{patientEmail}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"patients"
									],
									"query": [
										{
											"key": "page-size",
											"value": "500"
										},
										{
											"key": "filter-by",
											"value": "email::{{patientEmail}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filter by external id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"",
											"pm.test(\"Response has a JSON body\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"if (jsonData.length < 1) {",
											"    pm.test('No patients found with external id as ' + pm.environment.get(\"patientLastName\"));",
											"} else {",
											"    pm.test(\"Verify patients filter by external id\", () => {",
											"        for (let i = 0; i < jsonData.length; i++) {",
											"            tests[\"Patient# \" + (i + 1) + \" has external id as \" + jsonData[i].userId] = pm.expect(jsonData[i].userId).to.eql(pm.environment.get(\"patientId\"));",
											"        }",
											"    })",
											"}"
										],
										"type": "text/javascript",
										"id": "b05650f0-77e4-4f05-a528-d1ead96f395f"
									}
								}
							],
							"id": "1cbe9d52-2cd8-40d6-8fc5-484d8e8420b6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/patients?page-size=500&filter-by=external-id::{{patientId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"patients"
									],
									"query": [
										{
											"key": "page-size",
											"value": "500"
										},
										{
											"key": "filter-by",
											"value": "external-id::{{patientId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filter by first & last name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"",
											"pm.test(\"Response has a JSON body\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"if (jsonData.length < 1) {",
											"    pm.test('No patients found with first name as ' + pm.environment.get(\"patientFirstName\"));",
											"} else {",
											"    pm.test(\"Verify patients filter by first name\", () => {",
											"        for (let i = 0; i < jsonData.length; i++) {",
											"            tests[\"Patient# \" + (i + 1) + \" has first name as \" + jsonData[i].firstName] = pm.expect(jsonData[i].firstName.toLowerCase()).to.eql(pm.environment.get(\"patientFirstName\").toLowerCase());",
											"        }",
											"    });",
											"};"
										],
										"type": "text/javascript",
										"id": "8b7fcf43-1dcb-43bd-9ac6-3c78e30d1c4a"
									}
								}
							],
							"id": "1f5c8c63-9c1a-44dc-8d05-85a1deabc070",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/patients?filter-by=firstname::{{patientFirstName}}%26lastname::{{patientLastName}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"patients"
									],
									"query": [
										{
											"key": "filter-by",
											"value": "firstname::{{patientFirstName}}%26lastname::{{patientLastName}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filter by first, last name & dob",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"",
											"pm.test(\"Response has a JSON body\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"if (jsonData.length < 1) {",
											"    pm.test('No patients found with first name as ' + pm.environment.get(\"patientFirstName\"));",
											"} else {",
											"    pm.test(\"Verify patients filter by first name\", () => {",
											"        for (let i = 0; i < jsonData.length; i++) {",
											"            tests[\"Patient# \" + (i + 1) + \" has first name as \" + jsonData[i].firstName] = pm.expect(jsonData[i].firstName.toLowerCase()).to.eql(pm.environment.get(\"patientFirstName\").toLowerCase());",
											"        }",
											"    });",
											"};"
										],
										"type": "text/javascript",
										"id": "1dec3534-5847-44e3-8b85-714a6a1192c3"
									}
								}
							],
							"id": "ad1a8d4a-9b68-4a3d-bbd2-a6e4c7d9422f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/users/patients?filter-by=firstname::{{patientFirstName}}%26lastname::{{patientLastName}}%26dob::{{patientDateOfBirth}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"patients"
									],
									"query": [
										{
											"key": "filter-by",
											"value": "firstname::{{patientFirstName}}%26lastname::{{patientLastName}}&dob::{{patientDateOfBirth}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "ca3cb42f-0f9c-4251-aee4-60d8b4abff6f",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "bdb993f1-d694-4369-8d31-a5ffe84c3ed4"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "c3e382a3-2d12-40fc-89d1-860e7511aa2e"
							}
						}
					]
				},
				{
					"name": "get Patients by page-number, size",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"const pageSizes = pm.environment.get(\"pageSizes\");",
									"if (pageSizes && pageSizes.length > 0) {",
									"    postman.setNextRequest(request.name);",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify patients by page size and page number\", () => {",
									"    let pageSize = pm.request.url.query.get(\"page-size\");",
									"    pm.expect(jsonData['data'].length.toString()).to.eql(pageSize);",
									"});"
								],
								"type": "text/javascript",
								"id": "0ca17848-d414-41bf-8c0b-39087714add8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let pageSizes = pm.environment.get(\"pageSizes\");",
									"",
									"if (!pageSizes || pageSizes.length == 0) {",
									"    pageSizes = [10, 25, 50, 100];",
									"}",
									"",
									"let currentPageSize = pageSizes.shift();",
									"console.log(currentPageSize)",
									"pm.environment.set(\"pageSize\", currentPageSize);",
									"pm.environment.set(\"pageSizes\", pageSizes);"
								],
								"type": "text/javascript",
								"id": "dd26e78d-6a28-4789-8603-129eb1b7a015"
							}
						}
					],
					"id": "4cfd4206-8e6e-4594-a6af-dc215d04e90b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{host}}/users/patients?page-size={{pageSize}}&page-number=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients"
							],
							"query": [
								{
									"key": "page-size",
									"value": "{{pageSize}}",
									"description": "(Required) "
								},
								{
									"key": "page-number",
									"value": "1",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get Contact Preferences",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0147be8b-18dc-4451-86c3-f00062fe70da",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"let contactPreferences = [\"Unknown\", \"Email\", \"Phone\", \"No preference\", \"SMS\"];",
									"",
									"pm.test(\"Verify data type\", function () {",
									"    for (i = 0; i < jsonData.length; i++) {",
									"        pm.expect(jsonData[i].label).to.be.a('string');",
									"        pm.expect(jsonData[i].id).to.be.a('string');",
									"    }",
									"});",
									"",
									"pm.test(\"Verify Contact Preferences values\", function () {",
									"    contactPreferences.sort();",
									"    let ld = require('lodash');",
									"    let sortedJsonData = ld.orderBy(jsonData, ['label'], ['asc']);",
									"",
									"    for (i = 0; i < contactPreferences.length; i++) {",
									"        tests[\"Contact Preferences: \" + contactPreferences[i] + \" exists\"] = pm.expect(sortedJsonData[i].label).to.eql(contactPreferences[i]);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e6bccf3d-d3c9-4fd4-b310-82a72d15abf0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{host}}/users/enums/contact-preferences",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"enums",
								"contact-preferences"
							]
						}
					},
					"response": []
				},
				{
					"name": "get Ethnicities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"let ethnicities = [\"Asian\",",
									"    \"Black/African American\",",
									"    \"White/Caucasian\",",
									"    \"Hispanic/Latinx\",",
									"    \"Native American, Indian American, or Alaska Native\",",
									"    \"Native Hawaiian or other Pacific Islander\",",
									"    \"Middle Eastern or North African\",",
									"    \"Prefer not to answer\",",
									"    \"Other\"",
									"];",
									"",
									"pm.test(\"Verify data type\", function () {",
									"    for (i = 0; i < jsonData.length; i++) {",
									"        pm.expect(jsonData[i].label).to.be.a('string');",
									"        pm.expect(jsonData[i].id).to.be.a('string');",
									"    }",
									"});",
									"",
									"pm.test(\"Verify Ethnicities values\", function () {",
									"    ethnicities.sort();",
									"    let ld = require('lodash');",
									"    let sortedJsonData = ld.orderBy(jsonData, ['label'], ['asc']);",
									"",
									"    for (i = 0; i < jsonData.length; i++) {",
									"        tests[\"Ethnicity: \" + ethnicities[i].label + \" exists\"] = pm.expect(sortedJsonData[i].label).eql(ethnicities[i]);",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"id": "80ee9276-2ce2-432d-99cb-0d4f88a8da88"
							}
						}
					],
					"id": "60f22ddd-1e07-4f4a-930a-fafc0f6fe433",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{host}}/users/enums/ethnicities",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"enums",
								"ethnicities"
							]
						}
					},
					"response": []
				},
				{
					"name": "get Genders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"let genders = [\"Cis-gender male\",",
									"    \"Cis-gender female\",",
									"    \"Non-binary\",",
									"    \"Other\",",
									"    \"Unknown\",",
									"    \"Transgender male\",",
									"    \"Transgender female\",",
									"];",
									"",
									"pm.test(\"Verify data type\", function () {",
									"    for (i = 0; i < jsonData.length; i++) {",
									"        pm.expect(jsonData[i].label).to.be.a('string');",
									"        pm.expect(jsonData[i].id).to.be.a('string');",
									"    }",
									"});",
									"",
									"pm.test(\"Verify gender values\", function () {",
									"    genders.sort();",
									"    let ld = require('lodash');",
									"    let sortedJsonData = ld.orderBy(jsonData, ['label'], ['asc']);",
									"",
									"    for (i = 0; i < genders.length; i++) {",
									"        tests[\"Genders: \" + genders[i] + \" exists\"] = pm.expect(sortedJsonData[i].label).eql(genders[i]);",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"id": "015097dd-ff79-4452-9f78-dc7028bdfab2"
							}
						}
					],
					"id": "583c0c30-b1d8-47b0-b41d-ed1044aaed67",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{host}}/users/enums/genders",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"enums",
								"genders"
							]
						}
					},
					"response": []
				},
				{
					"name": "get Languages",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "77655bcb-add7-45c5-a47e-ecd0bc4fcb05",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"let languages = [",
									"  \"Afrikaans\",",
									"  \"American Sign Language (ASL)\",",
									"  \"Armenian\",",
									"  \"Bamanankan\",",
									"  \"Bavarian\",",
									"  \"Bengali\",",
									"  \"Bhojpuri\",",
									"  \"Burmese\",",
									"  \"Cameroonian Pidgin\",",
									"  \"Cebuano\",",
									"  \"Chinese (Mandarin)\",",
									"  \"Chinese (Wu/Shanghainese)\",",
									"  \"Chinese (Yue/Cantonese)\",",
									"  \"Chittagonian\",",
									"  \"Czech\",",
									"  \"Deccan\",",
									"  \"Dutch\",",
									"  \"Eastern Punjabi\",",
									"  \"Egyptian Spoken Arabic\",",
									"  \"English\",",
									"  \"Filipino\",",
									"  \"French\",",
									"  \"Gan Chinese\",",
									"  \"Greek\",",
									"  \"Gujarati\",",
									"  \"Hakka Chinese\",",
									"  \"Hausa\",",
									"  \"Hindi\",",
									"  \"Hungarian\",",
									"  \"Igbo\",",
									"  \"Indonesian\",",
									"  \"Iranian Persian\",",
									"  \"Italian\",",
									"  \"Japanese\",",
									"  \"Javanese\",",
									"  \"Jinyu Chinese\",",
									"  \"Kannada\",",
									"  \"Kazakh\",",
									"  \"Khmer\",",
									"  \"Korean\",",
									"  \"Magahi\",",
									"  \"Maithili\",",
									"  \"Malay\",",
									"  \"Malayalam\",",
									"  \"Marathi\",",
									"  \"Nepali\",",
									"  \"Nigerian Fulfulde\",",
									"  \"Nigerian Pidgin\",",
									"  \"Northeastern Thai\",",
									"  \"Northern Kurdish\",",
									"  \"Northern Pashto\",",
									"  \"Northern Uzbek\",",
									"  \"Odia\",",
									"  \"Persian\",",
									"  \"Polish\",",
									"  \"Portuguese\",",
									"  \"Romanian\",",
									"  \"Russian\",",
									"  \"Sadri\",",
									"  \"Saraiki\",",
									"  \"Serbo-Croatian\",",
									"  \"Sindhi\",",
									"  \"Somali\",",
									"  \"South Azerbaijani\",",
									"  \"Southern Min Chinese\",",
									"  \"Spanish\",",
									"  \"Standard Arabic\",",
									"  \"Standard German\",",
									"  \"Sunda\",",
									"  \"Swahili\",",
									"  \"Swedish\",",
									"  \"Sylheti\",",
									"  \"Tagalog\",",
									"  \"Tamil\",",
									"  \"Telugu\",",
									"  \"Thai\",",
									"  \"Turkish\",",
									"  \"Ukrainian\",",
									"  \"Urdu\",",
									"  \"Vietnamese\",",
									"  \"Western Punjabi\",",
									"  \"Xhosa\",",
									"  \"Xiang Chinese\",",
									"  \"Yiddish\",",
									"  \"Yoruba\",",
									"  \"Zulu\"",
									"];",
									"",
									"pm.test(\"Verify data type\", function () {",
									"    for (i = 0; i < jsonData.length; i++) {",
									"        pm.expect(jsonData[i].label).to.be.a('string');",
									"        pm.expect(jsonData[i].id).to.be.a('string');",
									"    }",
									"});",
									"",
									"pm.test(\"Verify language values\", function () {",
									"    languages.sort();",
									"    let ld = require('lodash');",
									"    let sortedJsonData = ld.orderBy(jsonData, ['label'], ['asc']);",
									"",
									"    for (i = 0; i < languages.length; i++) {",
									"        tests[\"Languages: \" + languages[i] + \" exists\"] = pm.expect(sortedJsonData[i].label).eql(languages[i]);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7cf50b46-e990-43c4-b41a-d71198b73fa8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{host}}/users/enums/languages",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"enums",
								"languages"
							]
						}
					},
					"response": []
				},
				{
					"name": "get Pronouns",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1dcfa7e3-1bef-4c5d-8612-57332ef452ac",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"let pronouns = [",
									"  \"He/Him/His\",",
									"  \"She/Her/Hers\",",
									"  \"They/Them/Theirs\",",
									"  \"Other\",",
									"  \"Ey/Em/Eirs\",",
									"  \"Xe/Xem/Xir\",",
									"  \"(F)ae/(F)aer/(F)aers\",",
									"  \"None\"",
									"];",
									"",
									"pm.test(\"Verify data type\", function () {",
									"    for (i = 0; i < jsonData.length; i++) {",
									"        pm.expect(jsonData[i].label).to.be.a('string');",
									"        pm.expect(jsonData[i].id).to.be.a('string');",
									"    }",
									"});",
									"",
									"pm.test(\"Verify pronoun values\", function () {",
									"    pronouns.sort();",
									"    let ld = require('lodash');",
									"    let sortedJsonData = ld.orderBy(jsonData, ['label'], ['asc']);",
									"",
									"    for (i = 0; i < pronouns.length; i++) {",
									"        tests[\"Pronouns: \" + pronouns[i] + \" exists\"] = pm.expect(sortedJsonData[i].label).eql(pronouns[i]);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2f551516-8352-4034-bb0b-2b391952ea87",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{host}}/users/enums/pronouns",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"enums",
								"pronouns"
							]
						}
					},
					"response": []
				},
				{
					"name": "get Sex Values",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"let sex = [\"Male\", \"Female\"];",
									"",
									"pm.test(\"Verify data type\", function () {",
									"    for (i = 0; i < jsonData.length; i++) {",
									"        pm.expect(jsonData[i].label).to.be.a('string');",
									"        pm.expect(jsonData[i].id).to.be.a('string');",
									"    }",
									"});",
									"",
									"pm.test(\"Verify sex values\", function () {",
									"    sex.sort();",
									"    let ld = require('lodash');",
									"    let sortedJsonData = ld.orderBy(jsonData, ['label'], ['asc']);",
									"",
									"    for (i = 0; i < sex.length; i++) {",
									"        tests[\"Sexes: \" + sex[i] + \" exists\"] = pm.expect(sortedJsonData[i].label).eql(sex[i]);",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"id": "13deaa9a-9b9d-40cd-bccc-6a36b3865912"
							}
						}
					],
					"id": "b56b5835-e5ad-4c3c-9b47-2850acf1e50e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{host}}/users/enums/sexes",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"enums",
								"sexes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get relations to patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a6db024-22e1-46b3-b43d-5e42588043ba",
								"exec": [
									"let jsonData = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"let relationToPatient = [\"Adopted sibling\",",
									"    \"Adoptive father\",",
									"    \"Adoptive mother\",",
									"    \"Adoptive parent\",",
									"    \"Biological father\",",
									"    \"Biological mother\",",
									"    \"Biological parent\",",
									"    \"Biological sibling\",",
									"    \"Case Manager/Discharge Planner\",",
									"    \"Community org/non-profit\",",
									"    \"Community professional\",",
									"    \"Dietitian\",",
									"    \"Eating disorder coach/advocate\",",
									"    \"Executive\",",
									"    \"Family member\",",
									"    \"Father\",",
									"    \"Foster father\",",
									"    \"Foster mother\",",
									"    \"Foster parent\",",
									"    \"Friend\",",
									"    \"Grandparent\",",
									"    \"Guardian\",",
									"    \"Half sibling\",",
									"    \"Hospital\",",
									"    \"Insurance company\",",
									"    \"Maternal grandfather\",",
									"    \"Maternal grandmother\",",
									"    \"Mother\",",
									"    \"Nurse\",",
									"    \"Nurse practitioner\",",
									"    \"Other\",",
									"    \"Outreach professional\",",
									"    \"Paternal grandfather\",",
									"    \"Paternal grandmother\",",
									"    \"Payor case manager\",",
									"    \"Physician Assistant\",",
									"    \"Physician: Adolescent Medicine/Eating Disorder Specialist\",",
									"    \"Physician: Endocrinologist\",",
									"    \"Physician: Family Medicine\",",
									"    \"Physician: Gastroenterologist\",",
									"    \"Physician: Other specialist\",",
									"    \"Physician: PCP (non-peds)\",",
									"    \"Physician: Pediatrician\",",
									"    \"Practice Manager\",",
									"    \"Psychiatrist\",",
									"    \"Psychologist\",",
									"    \"Referral Coordinator\",",
									"    \"School nurse\",",
									"    \"School therapist/counselor\",",
									"    \"Step sibling\",",
									"    \"Stepfather\",",
									"    \"Stepmother\",",
									"    \"Stepparent\",",
									"    \"Strategic Partner\",",
									"    \"Therapist\",",
									"    \"Treatment Center (eating disorder)\",",
									"    \"Treatment Center (non-ED)\",",
									"    \"University: Counseling Center\",",
									"    \"University: Student Health\"",
									"];",
									"",
									"pm.test(\"Verify data type\", function () {",
									"    for (i = 0; i < jsonData.length; i++) {",
									"        pm.expect(jsonData[i].label).to.be.a('string');",
									"        pm.expect(jsonData[i].id).to.be.a('string');",
									"    }",
									"});",
									"let ld = require('lodash');",
									"",
									"pm.test(\"Verify relation to patient values\", function () {",
									"    relationToPatient.sort();",
									"    let ld = require('lodash');",
									"    let sortedJsonData = ld.orderBy(jsonData, ['label'], ['asc']);",
									"",
									"    for (i = 0; i < relationToPatient.length; i++) {",
									"        tests[\"Relation To Patient: \" + relationToPatient[i] + \" exists\"] = pm.expect(sortedJsonData[i].label).eql(relationToPatient[i]);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ad69e73b-ffa4-4d2b-a709-ac3f1a626b92",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/enums/relations-to-patient",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"enums",
								"relations-to-patient"
							]
						}
					},
					"response": []
				}
			],
			"id": "945c3f00-7086-4016-85a7-b9520086a580",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "2cc5bea3-3b99-4cb4-87c9-5c2fa91723d0"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "17b21db8-68fa-49cb-93cc-ccfd07c93fc0"
					}
				}
			]
		},
		{
			"name": "Patient contacts",
			"item": [
				{
					"name": "Add Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8352d3e3-30b5-470b-8f3c-4e183117d371",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify id is generated\", function () {",
									"    pm.expect(jsonData.id).length.greaterThan(0);",
									"});",
									"",
									"pm.environment.set(\"patientId\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d105a680-1bd8-403f-85d9-9f6bbb9b0a18",
								"exec": [
									"let ld = require('lodash');",
									"",
									"let gendersList = [",
									"    \"Cis-gender male\",",
									"    \"Cis-gender female\",",
									"    \"Non-binary\",",
									"    \"Other\",",
									"    \"Unknown\",",
									"    \"Transgender male\",",
									"    \"Transgender female\"",
									"];",
									"",
									"let pronounsList = [",
									"    \"He/Him/His\",",
									"    \"She/Her/Hers\",",
									"    \"They/Them/Theirs\",",
									"    \"Other\",",
									"    \"Ey/Em/Eirs\",",
									"    \"Xe/Xem/Xir\",",
									"    \"(F)ae/(F)aer/(F)aers\",",
									"    \"None\"",
									"];",
									"",
									"let ethnicitiesList = [",
									"    \"Asian\",",
									"    \"Black/African American\",",
									"    \"White/Caucasian\",",
									"    \"Hispanic/Latinx\",",
									"    \"Native American, Indian American, or Alaska Native\",",
									"    \"Native Hawaiian or other Pacific Islander\",",
									"    \"Middle Eastern or North African\",",
									"    \"Prefer not to answer\",",
									"    \"Other\"",
									"];",
									"",
									"let languagesList = [",
									"    \"English\",",
									"    \"Spanish\",",
									"    \"Chinese\",",
									"    \"French\",",
									"    \"Tagalog\",",
									"    \"Vietnamese\",",
									"    \"Korean\",",
									"    \"German\",",
									"    \"Russian\",",
									"    \"Italian\",",
									"    \"Portuguese\",",
									"    \"Polish\",",
									"    \"Japanese\",",
									"    \"Persian\",",
									"    \"Greek\",",
									"    \"Serbo-Croatian\",",
									"    \"Armenian\",",
									"    \"Yiddish\",",
									"    \"American Sign Language (ASL)\"",
									"];",
									"",
									"let sexList = [",
									"    \"Male\",",
									"    \"Female\"",
									"];",
									"",
									"let timezonesList = [",
									"    \"Hawaii Standard Time\",",
									"    \"Hawaii-Aleutian Time\",",
									"    \"Alaska Time\",",
									"    \"Pacific Time\",",
									"    \"Arizona\",",
									"    \"Mountain Time\",",
									"    \"Central Time\",",
									"    \"Eastern Time\"",
									"];",
									"",
									"let contactPreferences = [\"Email\", \"No preference\", \"Phone\", \"Unknown\"];",
									"",
									"let statesList = [\"AK\", \"AL\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"DC\", \"FL\", \"GA\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"OH\", \"OK\", \"OR\", \"PA\", \"PR\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\", \"Outside US\", \"Unknown\"];",
									"",
									"let addressLine2List = [\"Apt 1\", \"Apt 2\", \"Apt 3\", \"Unit #1\", \"Unit #2\", \"Unit #3\", \"Apt 2L\", \"Apt 2R\"];",
									"",
									"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let lastName = pm.variables.replaceIn('{{$randomLastName}}');",
									"let chosenName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let email = \"qa\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
									"let zip = Math.floor(10000 + Math.random() * 90000);",
									"",
									"//Generate random Date of Birth in YYYY-MM-DD Format",
									"function randomDate(start, end) {",
									"    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));",
									"}",
									"let date = randomDate(new Date(1990, 00, 01), new Date());",
									"let dateOfBirth = date.getFullYear() + '-' + (\"0\" + (date.getMonth() + 1)).slice(-2) + '-' + (\"0\" + date.getDate()).slice(-2);",
									"",
									"//Save the variables to be used in next request for validation",
									"pm.environment.set(\"patientFirstName\", firstName);",
									"pm.environment.set(\"patientLastName\", lastName);",
									"pm.environment.set(\"patientEmail\", email);",
									"pm.environment.set(\"patientPhoneNumber\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));",
									"pm.environment.set(\"patientChosenName\", chosenName);",
									"pm.environment.set(\"patientDateOfBirth\", dateOfBirth);",
									"pm.environment.set(\"patientAddressLine1\", pm.variables.replaceIn('{{$randomStreetAddress}}'));",
									"pm.environment.set(\"patientAddressLine2\", ld.sample(addressLine2List));",
									"pm.environment.set(\"patientCity\", pm.variables.replaceIn('{{$randomCity}}'));",
									"pm.environment.set(\"patientState\", ld.sample(statesList));",
									"pm.environment.set(\"patientCountry\", \"US\");",
									"pm.environment.set(\"patientZip\", zip.toString());",
									"pm.environment.set(\"patientLatitude\", pm.variables.replaceIn('{{$randomLatitude}}'));",
									"pm.environment.set(\"patientLongitude\", pm.variables.replaceIn('{{$randomLongitude}}'));",
									"pm.environment.set(\"patientEthnicities\", JSON.stringify(ld.sampleSize(ethnicitiesList, 3).sort()));",
									"pm.environment.set(\"patientLanguages\", JSON.stringify(ld.sampleSize(languagesList, 3).sort()));",
									"pm.environment.set(\"patientGenderOnRecord\", ld.sample(gendersList));",
									"pm.environment.set(\"patientGenderOffRecord\", ld.sample(gendersList));",
									"pm.environment.set(\"patientPronounsOnRecord\", ld.sample(pronounsList));",
									"pm.environment.set(\"patientPronounsOffRecord\", ld.sample(pronounsList));",
									"pm.environment.set(\"patientSex\", ld.sample(sexList));",
									"pm.environment.set(\"patientTimezone\", ld.sample(timezonesList));",
									"pm.environment.set(\"patientContactPreferences\", JSON.stringify(ld.sampleSize(contactPreferences, 2).sort()));"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e9333acb-34ab-48ce-a8c4-84c6fc8e79fc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{patientFirstName}}\",\n    \"lastName\": \"{{patientLastName}}\",\n    \"dateOfBirth\": \"{{patientDateOfBirth}}\",\n    \"email\": \"{{patientEmail}}\",\n    \"contactPreferences\": {{patientContactPreferences}},\n    \"ethnicities\": {{patientEthnicities}},\n    \"phoneNumber\": \"{{patientPhoneNumber}}\",\n    \"chosenName\": \"{{patientChosenName}}\",\n    \"languages\": {{patientLanguages}},\n    \"genderOnRecord\": \"{{patientGenderOnRecord}}\",\n    \"genderOffRecord\": \"{{patientGenderOffRecord}}\",\n    \"pronounsOnRecord\": \"{{patientPronounsOnRecord}}\",\n    \"pronounsOffRecord\": \"{{patientPronounsOffRecord}}\",\n    \"sex\": \"{{patientSex}}\",\n    \"timezone\": \"{{patientTimezone}}\",\n    \"latitude\": \"{{patientLatitude}}\",\n    \"longitude\": \"{{patientLongitude}}\",\n    \"addressLine1\": \"{{patientAddressLine1}}\",\n    \"addressLine2\": \"{{patientAddressLine2}}\",\n    \"city\": \"{{patientCity}}\",\n    \"country\": \"{{patientCountry}}\",\n    \"state\": \"{{patientState}}\",\n    \"zip\": \"{{patientZip}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/patients",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Provider",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a7f4dde9-6070-40e7-b1e4-5208fce68d7f",
								"exec": [
									"let ld = require('lodash');",
									"let timezones = [\"Hawaii Standard Time\", \"Hawaii-Aleutian Time\", \"Alaska Time\", \"Pacific Time\", \"Arizona\", \"Mountain Time\", \"Central Time\", \"Eastern Time\", \"London/UK Time\"];",
									"let regions = [\"Northeast\", \"Southwest\", \"Southeast\", \"West\", \"Midwest\"];",
									"let providerTypes = [",
									"    \"Admissions Specialist\",",
									"    \"Analyst\",",
									"    \"Billing Specialist\",",
									"    \"Care Coordinator\",",
									"    \"Client Success\",",
									"    \"Clinical Ops\",",
									"    \"Clinical Supervisor\",",
									"    \"Dietitian\",",
									"    \"Family Experience Navigator\",",
									"    \"Family Mentor\",",
									"    \"Insurance Specialist\",",
									"    \"Nurse Practitioner\",",
									"    \"Patient Service Representative\",",
									"    \"Peer Mentor\",",
									"    \"Physician\",",
									"    \"Physician Assistant\",",
									"    \"Practice Coordinator\",",
									"    \"Product Support\",",
									"    \"Provider Partnerships\",",
									"    \"Psychiatrist\",",
									"    \"Therapist\"",
									"];",
									"",
									"let capacities = [\"full-time\", \"part-time\"];",
									"",
									"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let lastName = pm.variables.replaceIn('{{$randomLastName}}')",
									"let email = \"qa\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
									"let phoneNumber = pm.variables.replaceIn('{{$randomPhoneNumber}}');",
									"",
									"let supervisorId = \"\";",
									"",
									"let capacity = ld.sample(capacities);",
									"",
									"let hoursPerWeek;",
									"if (capacity == \"full-time\") {",
									"    hoursPerWeek = 40;",
									"} else {",
									"    hoursPerWeek = Math.floor(Math.random() * 90);",
									"}",
									"",
									"let accountStatus = \"active\";",
									"",
									"let permissions = [\"admin\", \"maud\", \"both\"];",
									"let permission = ld.sample(permissions);",
									"",
									"let roles = [\"admin:role:manage-users\",",
									"    \"maud:role:general-access\",",
									"    \"maud:role:advanced-access\"];",
									"",
									"if (permission === \"admin\") {",
									"    roles = [\"\\\"admin:role:manage-users\\\"\"];",
									"} else if (permission === \"maud\") {",
									"    roles = [\"\\\"maud:role:general-access\\\"\", \"\\\"maud:role:advanced-access\\\"\"];",
									"} else if (permission === \"both\") {",
									"    roles = [\"\\\"admin:role:manage-users\\\"\", \"\\\"maud:role:general-access\\\"\", \"\\\"maud:role:advanced-access\\\"\"];",
									"}",
									"",
									"pm.environment.set(\"providerFirstName\", firstName);",
									"pm.environment.set(\"providerLastName\", lastName);",
									"pm.environment.set(\"providerEmail\", email);",
									"pm.environment.set(\"providerPhoneNumber\", phoneNumber);",
									"pm.environment.set(\"providerTimezone\", ld.sample(timezones));",
									"pm.environment.set(\"providerRegion\", ld.sample(regions));",
									"pm.environment.set(\"providerType\", ld.sample(providerTypes));",
									"pm.environment.set(\"providerCapacity\", capacity);",
									"pm.environment.set(\"providerHoursPerWeek\", hoursPerWeek);",
									"pm.environment.set(\"providerAccountStatus\", accountStatus);",
									"pm.environment.set(\"providerRoles\", roles);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8ee1d03d-fb7a-48a8-be50-43a3d4de8d9e",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify id is generated\", function () {",
									"    pm.expect(jsonData.id).length.greaterThan(0);",
									"});",
									"",
									"pm.environment.set(\"providerId\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9913daca-a2c9-4b50-9c54-f4daeec77315",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{providerFirstName}}\",\n    \"lastName\": \"{{providerLastName}}\",\n    \"email\": \"{{providerEmail}}\",\n    \"phoneNumber\": \"{{providerPhoneNumber}}\",\n    \"timezone\": \"{{providerTimezone}}\",\n    \"region\": \"{{providerRegion}}\",\n    \"providerType\": \"{{providerType}}\",\n    \"capacity\": \"{{providerCapacity}}\",\n    \"hoursPerWeek\": \"{{providerHoursPerWeek}}\",\n    \"accountStatus\": \"{{providerAccountStatus}}\",\n    \"roles\": [\n        {{providerRoles}}\n    ],\n    \"supervisorId\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/providers",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"providers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add patient contact1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b481392b-86bf-45a9-a414-a957614a622d",
								"exec": [
									"let ld = require('lodash');",
									"const relation_to_patient = [",
									"    \"Case Manager/Discharge Planner\",",
									"    \"Community org/non-profit\",",
									"    \"Community professional\",",
									"    \"Dietitian\",",
									"    \"Doctor\",",
									"    \"Eating disorder coach/advocate\",",
									"    \"Executive\",",
									"    \"Family member\",",
									"    \"Father\",",
									"    \"Friend\",",
									"    \"Grandparent\",",
									"    \"Guardian\",",
									"    \"Hospital\",",
									"    \"Insurance company\",",
									"    \"Mother\",",
									"    \"Nurse\",",
									"    \"Nurse practitioner\",",
									"    \"Other\",",
									"    \"Outreach professional\",",
									"    \"Parent (non-binary)\",",
									"    \"Payor case manager\",",
									"    \"Physician Assistant\",",
									"    \"Physician: Adolescent Medicine/Eating Disorder Specialist\",",
									"    \"Physician: Endocrinologist\",",
									"    \"Physician: Family Medicine\",",
									"    \"Physician: Gastroenterologist\",",
									"    \"Physician: Other specialist\",",
									"    \"Physician: PCP (non-peds)\",",
									"    \"Physician: Pediatrician\",",
									"    \"Practice Manager\",",
									"    \"Psychiatrist\",",
									"    \"Psychologist\",",
									"    \"Referral Coordinator\",",
									"    \"School nurse\",",
									"    \"School therapist/counselor\",",
									"    \"Sibling\",",
									"    \"Stepfather\",",
									"    \"Stepmother\",",
									"    \"Stepparent\",",
									"    \"Therapist\",",
									"    \"Treatment Center (eating disorder)\"",
									"];",
									"",
									"const yesorno = [\"Yes\", \"No\"];",
									"const trueorfalse = [true, false];",
									"",
									"const contactPreferences = [",
									"    \"Unknown\",",
									"    \"Email\",",
									"    \"Phone\",",
									"    \"No preference\"",
									"]",
									"",
									"const genders = [",
									"    \"Cis-gender male\",",
									"    \"Cis-gender female\",",
									"    \"Non-binary\",",
									"    \"Other\",",
									"    \"Unknown\",",
									"    \"Transgender male\",",
									"    \"Transgender female\"",
									"];",
									"",
									"const pronoun = [",
									"  \"He/Him/His\",",
									"  \"She/Her/Hers\",",
									"  \"They/Them/Theirs\",",
									"  \"Other\",",
									"  \"Ey/Em/Eirs\",",
									"  \"Xe/Xem/Xir\",",
									"  \"(F)ae/(F)aer/(F)aers\",",
									"  \"None\"",
									"];",
									"",
									"const languages = [",
									"  \"Afrikaans\",",
									"  \"American Sign Language (ASL)\",",
									"  \"Armenian\",",
									"  \"Bamanankan\",",
									"  \"Bavarian\",",
									"  \"Bengali\",",
									"  \"Bhojpuri\",",
									"  \"Burmese\",",
									"  \"Cameroonian Pidgin\",",
									"  \"Cebuano\",",
									"  \"Chinese (Mandarin)\",",
									"  \"Chinese (Wu/Shanghainese)\",",
									"  \"Chinese (Yue/Cantonese)\",",
									"  \"Chittagonian\",",
									"  \"Czech\",",
									"  \"Deccan\",",
									"  \"Dutch\",",
									"  \"Eastern Punjabi\",",
									"  \"Egyptian Spoken Arabic\",",
									"  \"English\",",
									"  \"Filipino\",",
									"  \"French\",",
									"  \"Gan Chinese\",",
									"  \"Greek\",",
									"  \"Gujarati\",",
									"  \"Hakka Chinese\",",
									"  \"Hausa\",",
									"  \"Hindi\",",
									"  \"Hungarian\",",
									"  \"Igbo\",",
									"  \"Indonesian\",",
									"  \"Iranian Persian\",",
									"  \"Italian\",",
									"  \"Japanese\",",
									"  \"Javanese\",",
									"  \"Jinyu Chinese\",",
									"  \"Kannada\",",
									"  \"Kazakh\",",
									"  \"Khmer\",",
									"  \"Korean\",",
									"  \"Magahi\",",
									"  \"Maithili\",",
									"  \"Malay\",",
									"  \"Malayalam\",",
									"  \"Marathi\",",
									"  \"Nepali\",",
									"  \"Nigerian Fulfulde\",",
									"  \"Nigerian Pidgin\",",
									"  \"Northeastern Thai\",",
									"  \"Northern Kurdish\",",
									"  \"Northern Pashto\",",
									"  \"Northern Uzbek\",",
									"  \"Odia\",",
									"  \"Persian\",",
									"  \"Polish\",",
									"  \"Portuguese\",",
									"  \"Romanian\",",
									"  \"Russian\",",
									"  \"Sadri\",",
									"  \"Saraiki\",",
									"  \"Serbo-Croatian\",",
									"  \"Sindhi\",",
									"  \"Somali\",",
									"  \"South Azerbaijani\",",
									"  \"Southern Min Chinese\",",
									"  \"Spanish\",",
									"  \"Standard Arabic\",",
									"  \"Standard German\",",
									"  \"Sunda\",",
									"  \"Swahili\",",
									"  \"Swedish\",",
									"  \"Sylheti\",",
									"  \"Tagalog\",",
									"  \"Tamil\",",
									"  \"Telugu\",",
									"  \"Thai\",",
									"  \"Turkish\",",
									"  \"Ukrainian\",",
									"  \"Urdu\",",
									"  \"Vietnamese\",",
									"  \"Western Punjabi\",",
									"  \"Xhosa\",",
									"  \"Xiang Chinese\",",
									"  \"Yiddish\",",
									"  \"Yoruba\",",
									"  \"Zulu\"",
									"];",
									"",
									"const timezone = [",
									"    \"Hawaii Standard Time\",",
									"    \"Hawaii-Aleutian Time\",",
									"    \"Alaska Time\",",
									"    \"Pacific Time\",",
									"    \"Arizona\",",
									"    \"Mountain Time\",",
									"    \"Central Time\",",
									"    \"Eastern Time\",",
									"    \"London/UK Time\"",
									"];",
									"",
									"let statesList = [\"AK\", \"AL\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"DC\", \"FL\", \"GA\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"OH\", \"OK\", \"OR\", \"PA\", \"PR\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\", \"Outside US\", \"Unknown\"];",
									"",
									"let patientContactFirstName1 = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let patientContactLastName1 = pm.variables.replaceIn('{{$randomLastName}}');",
									"let email = \"qa\" + \"+\" + patientContactFirstName1 + \"+\" + Date.now() + \"@equip.health\";",
									"",
									"pm.environment.set(\"patientContactPronoun1\", collectionMethods.getRandomListofValuesFromList(pronoun));",
									"pm.environment.set(\"patientContact_languages1\", collectionMethods.getRandomListofValuesFromList(languages));",
									"pm.environment.set(\"patientContactFirstName1\", patientContactFirstName1);",
									"pm.environment.set(\"patientContactLastName1\", patientContactLastName1);",
									"pm.environment.set(\"relation_to_patient1\", ld.sample(relation_to_patient));",
									"//pm.environment.set(\"patientContactPronoun2\", collectionMethods.getRandomListofValuesFromList(pronoun));",
									"//pm.environment.set(\"patientContactPronoun1\", JSON.stringify(ld.sampleSize(pronoun, 3).sort()));",
									"pm.environment.set(\"isGuarantor1\", false);",
									"pm.environment.set(\"isOngoingProvider1\", false);",
									"pm.environment.set(\"patientContactOfficePhone1\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c7f6e960-51ef-4022-8dcb-47670aab3719",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.environment.set(\"patientContactId1\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "51f42cf0-9ea7-4924-b130-6cadef0becc1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{patientContactFirstName1}}\",\n    \"lastName\": \"{{patientContactLastName1}}\",\n    \"relationToPatient\": \"{{relation_to_patient1}}\",\n    \"isLivesWithPatient\": \"{{isLivesWithPatient1}}\",\n    \"affiliationName\": \"{{AffiliationName1}}\",\n    \"latitude\": \"{{patientContactLatitude1}}\",\n    \"longitude\": \"{{patientContactLongitude1}}\",\n    \"addressLine1\": \"{{patientContactAddressLine1_1}}\",\n    \"department\": \"{{patientContactDepartment1}}\",\n    \"addressLine2\": \"{{patientContactAddressLine2_1}}\",\n    \"city\": \"{{patientContactCity1}}\",\n    \"state\": \"{{patientContactState1}}\",\n    \"country\": \"{{patientContactCountry1}}\",\n    \"zip\": \"{{patientContactZip1}}\",\n    \"email\": \"{{patientContactEmailId1}}\",\n    \"cellPhone\": \"+1 {{patientContactMobile1}}\",\n    \"officePhone\": \"{{patientContactOfficePhone1}}\",\n    \"officeExtension\": \"{{patientContactOfficePhoneExt1}}\",\n    \"contactPreferences\": [\n        {{patientContact_contactPreferences1}}\n    ],\n    \"gender\": \"{{patientContactGender1}}\",\n    \"pronouns\": [{{patientContactPronoun1}}],\n    \"languages\": [\n        {{patientContact_languages1}}\n    ],\n    \"isReferringProvider\": false,\n    \"providerId\": \"{{providerid}}\",\n    \"isPrimaryContact\": false,\n    \"isGuarantor\": {{isGuarantor1}},\n    \"isOngoingProvider\": {{isOngoingProvider1}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/patients/patient-contact/{{patientId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients",
								"patient-contact",
								"{{patientId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get patient Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"console.log(jsonData[0].patientId);",
									"pm.environment.set(\"patientId_contact\", jsonData[0].patientId);"
								],
								"type": "text/javascript",
								"id": "fd9da25a-9a1b-410e-ac0e-e21812387a61"
							}
						}
					],
					"id": "f361a731-3289-4e94-96a8-f0fa72567300",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{host}}/users/patients/patient-contact/{{patientId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients",
								"patient-contact",
								"{{patientId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add patient contact2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dbb25d58-a7bb-4464-990e-193bff054653",
								"exec": [
									"let ld = require('lodash');",
									"",
									"const relation_to_patient = [",
									"    \"Case Manager/Discharge Planner\",",
									"    \"Community org/non-profit\",",
									"    \"Community professional\",",
									"    \"Dietitian\",",
									"    \"Doctor\",",
									"    \"Eating disorder coach/advocate\",",
									"    \"Executive\",",
									"    \"Family member\",",
									"    \"Father\",",
									"    \"Friend\",",
									"    \"Grandparent\",",
									"    \"Guardian\",",
									"    \"Hospital\",",
									"    \"Insurance company\",",
									"    \"Mother\",",
									"    \"Nurse\",",
									"    \"Nurse practitioner\",",
									"    \"Other\",",
									"    \"Outreach professional\",",
									"    \"Parent (non-binary)\",",
									"    \"Payor case manager\",",
									"    \"Physician Assistant\",",
									"    \"Physician: Adolescent Medicine/Eating Disorder Specialist\",",
									"    \"Physician: Endocrinologist\",",
									"    \"Physician: Family Medicine\",",
									"    \"Physician: Gastroenterologist\",",
									"    \"Physician: Other specialist\",",
									"    \"Physician: PCP (non-peds)\",",
									"    \"Physician: Pediatrician\",",
									"    \"Practice Manager\",",
									"    \"Psychiatrist\",",
									"    \"Psychologist\",",
									"    \"Referral Coordinator\",",
									"    \"School nurse\",",
									"    \"School therapist/counselor\",",
									"    \"Sibling\",",
									"    \"Stepfather\",",
									"    \"Stepmother\",",
									"    \"Stepparent\",",
									"    \"Therapist\",",
									"    \"Treatment Center (eating disorder)\"",
									"];",
									"",
									"const yesorno = [\"Yes\", \"No\"];",
									"",
									"const contactPreferences = [",
									"    \"Unknown\",",
									"    \"Email\",",
									"    \"Phone\",",
									"    \"No preference\"",
									"]",
									"",
									"const genders = [",
									"    \"Cis-gender male\",",
									"    \"Cis-gender female\",",
									"    \"Non-binary\",",
									"    \"Other\",",
									"    \"Unknown\",",
									"    \"Transgender male\",",
									"    \"Transgender female\"",
									"];",
									"",
									"const pronoun = [",
									"  \"He/Him/His\",",
									"  \"She/Her/Hers\",",
									"  \"They/Them/Theirs\",",
									"  \"Other\",",
									"  \"Ey/Em/Eirs\",",
									"  \"Xe/Xem/Xir\",",
									"  \"(F)ae/(F)aer/(F)aers\",",
									"  \"None\"",
									"];",
									"",
									"const languages = [",
									"  \"Afrikaans\",",
									"  \"American Sign Language (ASL)\",",
									"  \"Armenian\",",
									"  \"Bamanankan\",",
									"  \"Bavarian\",",
									"  \"Bengali\",",
									"  \"Bhojpuri\",",
									"  \"Burmese\",",
									"  \"Cameroonian Pidgin\",",
									"  \"Cebuano\",",
									"  \"Chinese (Mandarin)\",",
									"  \"Chinese (Wu/Shanghainese)\",",
									"  \"Chinese (Yue/Cantonese)\",",
									"  \"Chittagonian\",",
									"  \"Czech\",",
									"  \"Deccan\",",
									"  \"Dutch\",",
									"  \"Eastern Punjabi\",",
									"  \"Egyptian Spoken Arabic\",",
									"  \"English\",",
									"  \"Filipino\",",
									"  \"French\",",
									"  \"Gan Chinese\",",
									"  \"Greek\",",
									"  \"Gujarati\",",
									"  \"Hakka Chinese\",",
									"  \"Hausa\",",
									"  \"Hindi\",",
									"  \"Hungarian\",",
									"  \"Igbo\",",
									"  \"Indonesian\",",
									"  \"Iranian Persian\",",
									"  \"Italian\",",
									"  \"Japanese\",",
									"  \"Javanese\",",
									"  \"Jinyu Chinese\",",
									"  \"Kannada\",",
									"  \"Kazakh\",",
									"  \"Khmer\",",
									"  \"Korean\",",
									"  \"Magahi\",",
									"  \"Maithili\",",
									"  \"Malay\",",
									"  \"Malayalam\",",
									"  \"Marathi\",",
									"  \"Nepali\",",
									"  \"Nigerian Fulfulde\",",
									"  \"Nigerian Pidgin\",",
									"  \"Northeastern Thai\",",
									"  \"Northern Kurdish\",",
									"  \"Northern Pashto\",",
									"  \"Northern Uzbek\",",
									"  \"Odia\",",
									"  \"Persian\",",
									"  \"Polish\",",
									"  \"Portuguese\",",
									"  \"Romanian\",",
									"  \"Russian\",",
									"  \"Sadri\",",
									"  \"Saraiki\",",
									"  \"Serbo-Croatian\",",
									"  \"Sindhi\",",
									"  \"Somali\",",
									"  \"South Azerbaijani\",",
									"  \"Southern Min Chinese\",",
									"  \"Spanish\",",
									"  \"Standard Arabic\",",
									"  \"Standard German\",",
									"  \"Sunda\",",
									"  \"Swahili\",",
									"  \"Swedish\",",
									"  \"Sylheti\",",
									"  \"Tagalog\",",
									"  \"Tamil\",",
									"  \"Telugu\",",
									"  \"Thai\",",
									"  \"Turkish\",",
									"  \"Ukrainian\",",
									"  \"Urdu\",",
									"  \"Vietnamese\",",
									"  \"Western Punjabi\",",
									"  \"Xhosa\",",
									"  \"Xiang Chinese\",",
									"  \"Yiddish\",",
									"  \"Yoruba\",",
									"  \"Zulu\"",
									"];",
									"",
									"const timezone = [",
									"    \"Hawaii Standard Time\",",
									"    \"Hawaii-Aleutian Time\",",
									"    \"Alaska Time\",",
									"    \"Pacific Time\",",
									"    \"Arizona\",",
									"    \"Mountain Time\",",
									"    \"Central Time\",",
									"    \"Eastern Time\",",
									"    \"London/UK Time\"",
									"];",
									"",
									"let statesList = [\"AK\", \"AL\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"DC\", \"FL\", \"GA\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"OH\", \"OK\", \"OR\", \"PA\", \"PR\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\", \"Outside US\", \"Unknown\"];",
									"",
									"let patientContactFirstName2 = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let patientContactLastName2 = pm.variables.replaceIn('{{$randomLastName}}');",
									"let email = \"qa\" + \"+\" + patientContactFirstName2 + \"+\" + Date.now() + \"@equip.health\";",
									"",
									"pm.environment.set(\"patientContactFirstName2\", patientContactFirstName2);",
									"pm.environment.set(\"patientContactLastName2\", patientContactLastName2);",
									"pm.environment.set(\"relation_to_patient2\", ld.sample(relation_to_patient));",
									"pm.environment.set(\"isLivesWithPatient2\", \"No\");",
									"pm.environment.set(\"patientContactEmailId2\", email);",
									"pm.environment.set(\"patientContactMobile2\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));",
									"pm.environment.set(\"patientContact_contactPreferences2\", collectionMethods.getRandomListofValuesFromList(contactPreferences));",
									"pm.environment.set(\"patientContactGender2\", ld.sample(genders));",
									"pm.environment.set(\"patientContactPronoun2\", collectionMethods.getRandomListofValuesFromList(pronoun));",
									"pm.environment.set(\"patientContact_languages2\", collectionMethods.getRandomListofValuesFromList(languages));",
									"pm.environment.set(\"isInquiryReferralSubmitted2\", false);",
									"",
									"pm.environment.set(\"AffiliationName2\", \"Google inc. india pvt ltd\");",
									"pm.environment.set(\"patientContactLatitude2\", pm.variables.replaceIn('{{$randomLatitude}}'));",
									"pm.environment.set(\"patientContactLongitude2\", pm.variables.replaceIn('{{$randomLongitude}}'));",
									"pm.environment.set(\"patientContactAddressLine1_2\", pm.variables.replaceIn('{{$randomStreetAddress}}'));",
									"pm.environment.set(\"patientContactAddressLine2_2\", pm.variables.replaceIn('{{$randomStreetName}}'));",
									"pm.environment.set(\"patientContactCity2\", pm.variables.replaceIn('{{$randomCity}}'));",
									"//pm.environment.set(\"patientContactPronoun2\", JSON.stringify(ld.sampleSize(pronoun, 3).sort()));",
									"pm.environment.set(\"patientContactState2\", ld.sample(statesList));",
									"pm.environment.set(\"patientContactCountry2\", \"US\");",
									"pm.environment.set(\"patientContactZip2\", Math.floor(Math.random() * 90000) + 10000);",
									"pm.environment.set(\"patientContactChosenName2\", pm.variables.replaceIn('{{$randomFirstName}}'));",
									"pm.environment.set(\"patientContactDateOfBirth2\", \"1990-03-07\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1dd2408e-e882-4042-a42d-a6779c6656c4",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.environment.set(\"patientContactId2\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6cea0546-8c68-4709-842e-dbadb8429005",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{patientContactFirstName2}}\",\n    \"lastName\": \"{{patientContactLastName2}}\",\n    \"relationToPatient\": \"{{relation_to_patient2}}\",\n    \"isLivesWithPatient\": \"{{isLivesWithPatient2}}\",\n    \"affiliationName\": \"{{AffiliationName2}}\",\n    \"latitude\": \"{{patientContactLatitude2}}\",\n    \"longitude\": \"{{patientContactLongitude2}}\",\n    \"addressLine1\": \"{{patientContactAddressLine1_2}}\",\n    \"addressLine2\": \"{{patientContactAddressLine2_2}}\",\n    \"city\": \"{{patientContactCity2}}\",\n    \"state\": \"{{patientContactState2}}\",\n    \"country\": \"{{patientContactCountry2}}\",\n    \"zip\": \"{{patientContactZip2}}\",\n    \"email\": \"{{patientContactEmailId2}}\",\n    \"cellPhone\": \"+1 {{patientContactMobile2}}\",\n    \"contactPreferences\": [\n        {{patientContact_contactPreferences2}}\n    ],\n    \"gender\": \"{{patientContactGender2}}\",\n    \"pronouns\": [{{patientContactPronoun2}}],\n    \"languages\": [\n        {{patientContact_languages2}}\n    ],\n    \"isReferringProvider\": \"{{isInquiryReferralSubmitted2}}\",\n    \"providerId\": \"{{providerid}}\",\n    \"isPrimaryContact\": true,\n    \"chosenName\": \"{{patientContactChosenName2}}\",\n    \"dateOfBirth\": \"{{patientContactDateOfBirth2}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/patients/patient-contact/{{patientId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients",
								"patient-contact",
								"{{patientId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add patient contact3",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ab42cd78-1585-4640-823f-535e026bee55",
								"exec": [
									"let ld = require('lodash');",
									"const relation_to_patient = [",
									"    \"Case Manager/Discharge Planner\",",
									"    \"Community org/non-profit\",",
									"    \"Community professional\",",
									"    \"Dietitian\",",
									"    \"Doctor\",",
									"    \"Eating disorder coach/advocate\",",
									"    \"Executive\",",
									"    \"Family member\",",
									"    \"Father\",",
									"    \"Friend\",",
									"    \"Grandparent\",",
									"    \"Guardian\",",
									"    \"Hospital\",",
									"    \"Insurance company\",",
									"    \"Mother\",",
									"    \"Nurse\",",
									"    \"Nurse practitioner\",",
									"    \"Other\",",
									"    \"Outreach professional\",",
									"    \"Parent (non-binary)\",",
									"    \"Payor case manager\",",
									"    \"Physician Assistant\",",
									"    \"Physician: Adolescent Medicine/Eating Disorder Specialist\",",
									"    \"Physician: Endocrinologist\",",
									"    \"Physician: Family Medicine\",",
									"    \"Physician: Gastroenterologist\",",
									"    \"Physician: Other specialist\",",
									"    \"Physician: PCP (non-peds)\",",
									"    \"Physician: Pediatrician\",",
									"    \"Practice Manager\",",
									"    \"Psychiatrist\",",
									"    \"Psychologist\",",
									"    \"Referral Coordinator\",",
									"    \"School nurse\",",
									"    \"School therapist/counselor\",",
									"    \"Sibling\",",
									"    \"Stepfather\",",
									"    \"Stepmother\",",
									"    \"Stepparent\",",
									"    \"Therapist\",",
									"    \"Treatment Center (eating disorder)\"",
									"];",
									"",
									"const yesorno = [\"Yes\", \"No\"];",
									"",
									"const contactPreferences = [",
									"    \"Unknown\",",
									"    \"Email\",",
									"    \"Phone\",",
									"    \"No preference\"",
									"]",
									"",
									"const genders = [",
									"    \"Cis-gender male\",",
									"    \"Cis-gender female\",",
									"    \"Non-binary\",",
									"    \"Other\",",
									"    \"Unknown\",",
									"    \"Transgender male\",",
									"    \"Transgender female\"",
									"];",
									"",
									"const pronoun = [",
									"  \"He/Him/His\",",
									"  \"She/Her/Hers\",",
									"  \"They/Them/Theirs\",",
									"  \"Other\",",
									"  \"Ey/Em/Eirs\",",
									"  \"Xe/Xem/Xir\",",
									"  \"(F)ae/(F)aer/(F)aers\",",
									"  \"None\"",
									"];",
									"",
									"const languages = [",
									"  \"Afrikaans\",",
									"  \"American Sign Language (ASL)\",",
									"  \"Armenian\",",
									"  \"Bamanankan\",",
									"  \"Bavarian\",",
									"  \"Bengali\",",
									"  \"Bhojpuri\",",
									"  \"Burmese\",",
									"  \"Cameroonian Pidgin\",",
									"  \"Cebuano\",",
									"  \"Chinese (Mandarin)\",",
									"  \"Chinese (Wu/Shanghainese)\",",
									"  \"Chinese (Yue/Cantonese)\",",
									"  \"Chittagonian\",",
									"  \"Czech\",",
									"  \"Deccan\",",
									"  \"Dutch\",",
									"  \"Eastern Punjabi\",",
									"  \"Egyptian Spoken Arabic\",",
									"  \"English\",",
									"  \"Filipino\",",
									"  \"French\",",
									"  \"Gan Chinese\",",
									"  \"Greek\",",
									"  \"Gujarati\",",
									"  \"Hakka Chinese\",",
									"  \"Hausa\",",
									"  \"Hindi\",",
									"  \"Hungarian\",",
									"  \"Igbo\",",
									"  \"Indonesian\",",
									"  \"Iranian Persian\",",
									"  \"Italian\",",
									"  \"Japanese\",",
									"  \"Javanese\",",
									"  \"Jinyu Chinese\",",
									"  \"Kannada\",",
									"  \"Kazakh\",",
									"  \"Khmer\",",
									"  \"Korean\",",
									"  \"Magahi\",",
									"  \"Maithili\",",
									"  \"Malay\",",
									"  \"Malayalam\",",
									"  \"Marathi\",",
									"  \"Nepali\",",
									"  \"Nigerian Fulfulde\",",
									"  \"Nigerian Pidgin\",",
									"  \"Northeastern Thai\",",
									"  \"Northern Kurdish\",",
									"  \"Northern Pashto\",",
									"  \"Northern Uzbek\",",
									"  \"Odia\",",
									"  \"Persian\",",
									"  \"Polish\",",
									"  \"Portuguese\",",
									"  \"Romanian\",",
									"  \"Russian\",",
									"  \"Sadri\",",
									"  \"Saraiki\",",
									"  \"Serbo-Croatian\",",
									"  \"Sindhi\",",
									"  \"Somali\",",
									"  \"South Azerbaijani\",",
									"  \"Southern Min Chinese\",",
									"  \"Spanish\",",
									"  \"Standard Arabic\",",
									"  \"Standard German\",",
									"  \"Sunda\",",
									"  \"Swahili\",",
									"  \"Swedish\",",
									"  \"Sylheti\",",
									"  \"Tagalog\",",
									"  \"Tamil\",",
									"  \"Telugu\",",
									"  \"Thai\",",
									"  \"Turkish\",",
									"  \"Ukrainian\",",
									"  \"Urdu\",",
									"  \"Vietnamese\",",
									"  \"Western Punjabi\",",
									"  \"Xhosa\",",
									"  \"Xiang Chinese\",",
									"  \"Yiddish\",",
									"  \"Yoruba\",",
									"  \"Zulu\"",
									"];",
									"",
									"const timezone = [",
									"    \"Hawaii Standard Time\",",
									"    \"Hawaii-Aleutian Time\",",
									"    \"Alaska Time\",",
									"    \"Pacific Time\",",
									"    \"Arizona\",",
									"    \"Mountain Time\",",
									"    \"Central Time\",",
									"    \"Eastern Time\",",
									"    \"London/UK Time\"",
									"];",
									"",
									"let statesList = [\"AK\", \"AL\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"DC\", \"FL\", \"GA\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"OH\", \"OK\", \"OR\", \"PA\", \"PR\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\", \"Outside US\", \"Unknown\"];",
									"",
									"",
									"let patientContactFirstName3 = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let patientContactLastName3 = pm.variables.replaceIn('{{$randomLastName}}');",
									"let email = \"qa\" + \"+\" + patientContactFirstName3 + \"+\" + Date.now() + \"@equip.health\";",
									"",
									"pm.environment.set(\"patientContactFirstName3\", patientContactFirstName3);",
									"pm.environment.set(\"patientContactLastName3\", patientContactLastName3);",
									"pm.environment.set(\"relation_to_patient3\", ld.sample(relation_to_patient));",
									"pm.environment.set(\"isLivesWithPatient3\", \"No\");",
									"pm.environment.set(\"patientContactEmailId3\", email);",
									"pm.environment.set(\"patientContactMobile3\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));",
									"pm.environment.set(\"patientContact_contactPreferences3\", collectionMethods.getRandomListofValuesFromList(contactPreferences));",
									"pm.environment.set(\"patientContactGender3\", ld.sample(genders));",
									"pm.environment.set(\"patientContactPronoun3\", collectionMethods.getRandomListofValuesFromList(pronoun));",
									"pm.environment.set(\"patientContact_languages3\", collectionMethods.getRandomListofValuesFromList(languages));",
									"pm.environment.set(\"isInquiryReferralSubmitted3\", false);",
									"",
									"pm.environment.set(\"AffiliationName3\", \"Google inc. india pvt ltd\");",
									"pm.environment.set(\"patientContactLatitude3\", pm.variables.replaceIn('{{$randomLatitude}}'));",
									"pm.environment.set(\"patientContactLongitude3\", pm.variables.replaceIn('{{$randomLongitude}}'));",
									"pm.environment.set(\"patientContactAddressLine1_3\", pm.variables.replaceIn('{{$randomStreetAddress}}'));",
									"pm.environment.set(\"patientContactAddressLine2_3\", pm.variables.replaceIn('{{$randomStreetName}}'));",
									"pm.environment.set(\"patientContactCity3\", pm.variables.replaceIn('{{$randomCity}}'));",
									"pm.environment.set(\"patientContactState3\", ld.sample(statesList));",
									"pm.environment.set(\"patientContactCountry3\", \"US\");",
									"pm.environment.set(\"patientContactZip3\", Math.floor(Math.random() * 90000) + 10000);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d5a4872c-2173-4cb7-a0c4-8fcbccda81cf",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.environment.set(\"patientContactId3\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d5bf7437-c35b-4339-875d-9b60bb503650",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{patientContactFirstName3}}\",\n    \"lastName\": \"{{patientContactLastName3}}\",\n    \"relationToPatient\": \"{{relation_to_patient3}}\",\n    \"isLivesWithPatient\": \"{{isLivesWithPatient3}}\",\n    \"affiliationName\": \"{{AffiliationName3}}\",\n    \"latitude\": \"{{patientContactLatitude3}}\",\n    \"longitude\": \"{{patientContactLongitude3}}\",\n    \"addressLine1\": \"{{patientContactAddressLine1_3}}\",\n    \"addressLine2\": \"{{patientContactAddressLine2_3}}\",\n    \"city\": \"{{patientContactCity3}}\",\n    \"state\": \"{{patientContactState3}}\",\n    \"country\": \"{{patientContactCountry3}}\",\n    \"zip\": \"{{patientContactZip3}}\",\n    \"email\": \"{{patientContactEmailId3}}\",\n    \"cellPhone\": \"+1 {{patientContactMobile3}}\",\n    \"contactPreferences\": [\n        {{patientContact_contactPreferences3}}\n    ],\n    \"gender\": \"{{patientContactGender3}}\",\n    \"pronouns\": [{{patientContactPronoun3}}],\n    \"languages\": [\n        {{patientContact_languages3}}\n    ],\n    \"isReferringProvider\": \"{{isInquiryReferralSubmitted3}}\",\n    \"providerId\": \"{{providerid}}\",\n    \"isPrimaryContact\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/patients/patient-contact/{{patientId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients",
								"patient-contact",
								"{{patientId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get Patient contact list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7568ecd1-5e14-4ec6-9684-fb7422e4a006",
								"exec": [
									"let ld = require('lodash');",
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"const expectedNewFieldsNull = {",
									"    \"chosenName\": null,",
									"    \"prefix\": null,",
									"    \"middleName\": null,",
									"    \"suffix\": null,",
									"    \"dateOfBirth\": null,",
									"    \"ethnicities\": [],",
									"    \"isSupport\": false,",
									"    \"supportExternalId\": null,",
									"    \"isProxy\": false,",
									"    \"otherLinkedPatients\": [],",
									"    \"hasSetPassword\": false,",
									"    \"hasLoggedIn\": false,",
									"    \"hasLoggedIn\":false,",
									"    \"providerId\": null",
									"};",
									"",
									"let contact1 = {",
									"        \"contactExternalId\": \"\" + pm.environment.get(\"patientContactId1\") + \"\",",
									"        \"firstName\": \"\" + pm.environment.get(\"patientContactFirstName1\") + \"\",",
									"        \"lastName\": \"\" + pm.environment.get(\"patientContactLastName1\") + \"\",",
									"        \"relationToPatient\": \"\" + pm.environment.get(\"relation_to_patient1\") + \"\",",
									"        \"isLivesWithPatient\": pm.environment.get(\"isLivesWithPatient1\") === \"Yes\" ? true : false,",
									"        \"address\": {",
									"            \"latitude\": parseFloat(pm.environment.get(\"patientContactLatitude1\")),",
									"            \"longitude\": parseFloat(pm.environment.get(\"patientContactLongitude1\")),",
									"            \"affiliationName\": \"\" + pm.environment.get(\"AffiliationName1\") + \"\",",
									"            \"addressLine1\": \"\" + pm.environment.get(\"patientContactAddressLine1_1\") + \"\",",
									"            \"addressLine2\": \"\" + pm.environment.get(\"patientContactAddressLine2_1\") + \"\",",
									"            \"city\": \"\" + pm.environment.get(\"patientContactCity1\") + \"\",",
									"            \"state\": \"\" + pm.environment.get(\"patientContactState1\") + \"\",",
									"            \"county\": null,",
									"            \"country\": \"\" + pm.environment.get(\"patientContactCountry1\") + \"\",",
									"            \"zip\": \"\" + pm.environment.get(\"patientContactZip1\") + \"\"",
									"        },",
									"        \"email\": \"\" + pm.environment.get(\"patientContactEmailId1\") + \"\",",
									"        \"cellPhone\": \"+1 \" + pm.environment.get(\"patientContactMobile1\") + \"\",",
									"        \"contactPreferences\": [pm.environment.get(\"patientContact_contactPreferences1\").slice(1, -1)],",
									"        \"gender\": \"\" + pm.environment.get(\"patientContactGender1\") + \"\",",
									"        \"pronouns\": [pm.environment.get(\"patientContactPronoun1\").slice(1, -1)],",
									"        \"languages\": [pm.environment.get(\"patientContact_languages1\").slice(1, -1)],",
									"        \"isReferringProvider\": pm.environment.get(\"isInquiryReferralSubmitted1\"),",
									"        \"isDeleted\": false,",
									"        \"patientId\": pm.environment.get(\"patientId_contact\"),",
									"        \"timezone\": null,",
									"        \"createdAT\": \"\"+(new Date()).toISOString().slice(0, 10)+\"\",",
									"        \"updatedAT\": null,",
									"        \"createdBy\": \"\" + pm.environment.get(\"providerid\") + \"\",",
									"        \"updatedBy\": null,",
									"        \"isPrimaryContact\": false,",
									"        \"isGuarantor\":   pm.environment.get(\"isGuarantor1\"),",
									"        \"officePhone\": \"\" + pm.environment.get(\"patientContactOfficePhone1\") + \"\",",
									"        \"officeExtension\": parseInt(pm.environment.get(\"patientContactOfficePhoneExt1\")),",
									"        \"isOngoingProvider\": pm.environment.get(\"isOngoingProvider1\"),",
									"        \"department\": \"\" + pm.environment.get(\"patientContactDepartment1\") + \"\",",
									"        ...expectedNewFieldsNull,",
									"    };",
									"",
									"let contact2 = {",
									"        \"contactExternalId\": \"\" + pm.environment.get(\"patientContactId2\") + \"\",",
									"        \"firstName\": \"\" + pm.environment.get(\"patientContactFirstName2\") + \"\",",
									"        \"lastName\": \"\" + pm.environment.get(\"patientContactLastName2\") + \"\",",
									"        \"relationToPatient\": \"\" + pm.environment.get(\"relation_to_patient2\") + \"\",",
									"        \"isLivesWithPatient\": pm.environment.get(\"isLivesWithPatient2\") === \"Yes\" ? true : false,",
									"        \"address\": {",
									"            \"latitude\": parseFloat(\"\" + pm.environment.get(\"patientContactLatitude2\") + \"\"),",
									"            \"longitude\": parseFloat(\"\" + pm.environment.get(\"patientContactLongitude2\") + \"\"),",
									"             \"affiliationName\": \"\" + pm.environment.get(\"AffiliationName2\") + \"\",",
									"            \"addressLine1\": \"\" + pm.environment.get(\"patientContactAddressLine1_2\") + \"\",",
									"            \"addressLine2\": \"\" + pm.environment.get(\"patientContactAddressLine2_2\") + \"\",",
									"            \"city\": \"\" + pm.environment.get(\"patientContactCity2\") + \"\",",
									"            \"state\": \"\" + pm.environment.get(\"patientContactState2\") + \"\",",
									"            \"county\": null,",
									"            \"country\": \"\" + pm.environment.get(\"patientContactCountry2\") + \"\",",
									"            \"zip\": \"\" + pm.environment.get(\"patientContactZip2\") + \"\"",
									"        },",
									"        \"email\": \"\" + pm.environment.get(\"patientContactEmailId2\") + \"\",",
									"        \"cellPhone\": \"+1 \" + pm.environment.get(\"patientContactMobile2\") + \"\",",
									"        \"contactPreferences\": [pm.environment.get(\"patientContact_contactPreferences2\").slice(1, -1)],",
									"        \"gender\": \"\" + pm.environment.get(\"patientContactGender2\") + \"\",",
									"        \"pronouns\":  [pm.environment.get(\"patientContactPronoun2\").slice(1, -1)],",
									"        \"languages\": [pm.environment.get(\"patientContact_languages2\").slice(1, -1)],",
									"        \"isReferringProvider\": pm.environment.get(\"isInquiryReferralSubmitted2\"),",
									"        \"isDeleted\": false,",
									"        \"patientId\": pm.environment.get(\"patientId_contact\"),",
									"        \"timezone\": null,",
									"        \"createdAT\": \"\"+(new Date()).toISOString().slice(0, 10)+\"\",",
									"        \"updatedAT\": null,",
									"        \"createdBy\": \"\" + pm.environment.get(\"providerid\") + \"\",",
									"        \"updatedBy\": null,",
									"        \"isPrimaryContact\": false,",
									"        \"isGuarantor\": false,",
									"        \"officePhone\": null,",
									"        \"officeExtension\": null,",
									"        \"isOngoingProvider\": null,",
									"        \"department\": null,",
									"        ...expectedNewFieldsNull,",
									"        \"chosenName\": pm.environment.get(\"patientContactChosenName2\") + \"\",",
									"        \"dateOfBirth\": pm.environment.get(\"patientContactDateOfBirth2\") + \"\",",
									"    };",
									"",
									"let contact3 = {",
									"        \"contactExternalId\": \"\" + pm.environment.get(\"patientContactId3\") + \"\",",
									"        \"firstName\": \"\" + pm.environment.get(\"patientContactFirstName3\") + \"\",",
									"        \"lastName\": \"\" + pm.environment.get(\"patientContactLastName3\") + \"\",",
									"        \"relationToPatient\": \"\" + pm.environment.get(\"relation_to_patient3\") + \"\",",
									"        \"isLivesWithPatient\": pm.environment.get(\"isLivesWithPatient3\") === \"Yes\" ? true : false,",
									"        \"address\": {",
									"            \"latitude\": parseFloat(pm.environment.get(\"patientContactLatitude3\")),",
									"            \"longitude\": parseFloat(pm.environment.get(\"patientContactLongitude3\")),",
									"            \"affiliationName\": \"\" + pm.environment.get(\"AffiliationName3\") + \"\",",
									"            \"addressLine1\": \"\" + pm.environment.get(\"patientContactAddressLine1_3\") + \"\",",
									"            \"addressLine2\": \"\" + pm.environment.get(\"patientContactAddressLine2_3\") + \"\",",
									"            \"city\": \"\" + pm.environment.get(\"patientContactCity3\") + \"\",",
									"            \"state\": \"\" + pm.environment.get(\"patientContactState3\") + \"\",",
									"            \"county\": null,",
									"            \"country\": \"\" + pm.environment.get(\"patientContactCountry3\") + \"\",",
									"            \"zip\": \"\" + pm.environment.get(\"patientContactZip3\") + \"\"",
									"        },",
									"        \"email\": \"\" + pm.environment.get(\"patientContactEmailId3\") + \"\",",
									"        \"cellPhone\": \"+1 \" + pm.environment.get(\"patientContactMobile3\") + \"\",",
									"        \"contactPreferences\": [pm.environment.get(\"patientContact_contactPreferences3\").slice(1, -1)],",
									"        \"gender\": \"\" + pm.environment.get(\"patientContactGender3\") + \"\",",
									"        \"pronouns\": [pm.environment.get(\"patientContactPronoun3\").slice(1, -1)],",
									"        \"languages\": [pm.environment.get(\"patientContact_languages3\").slice(1, -1)],",
									"        \"isReferringProvider\": pm.environment.get(\"isInquiryReferralSubmitted3\"),",
									"        \"isDeleted\": false,",
									"        \"patientId\": pm.environment.get(\"patientId_contact\"),",
									"        \"timezone\": null,",
									"        \"createdAT\": \"\"+(new Date()).toISOString().slice(0, 10)+\"\",",
									"        \"updatedAT\": null,",
									"        \"createdBy\": \"\" + pm.environment.get(\"providerid\") + \"\",",
									"        \"updatedBy\": null,",
									"        \"isPrimaryContact\": true,",
									"        \"isGuarantor\": false,",
									"        \"officePhone\": null,",
									"        \"officeExtension\": null,",
									"        \"isOngoingProvider\": null,",
									"        \"department\": null,",
									"        ...expectedNewFieldsNull,",
									"    };",
									"",
									"pm.test(\"Validate contact1 in response\", function () {",
									"    let flag=false;",
									"    const response = jsonData.map((res) => ({",
									"        ...res,",
									"        createdAT: new Date(res.createdAT).toISOString().slice(0, 10),",
									"        updatedAT: res.updatedAT ? new Date(res.updatedAT).toISOString().slice(0, 10) : null,",
									"    }));",
									"    for(let i=0; i<response.length; i++){",
									"        console.log(JSON.stringify(response[i]).replace(\",\\\"providerId\\\":null\",''));",
									"        console.log(JSON.stringify(contact1).replace(/\\\\/g, '').replace(\",\\\"providerId\\\":null\",''));",
									"        if(JSON.stringify(response[i]).replace(\",\\\"providerId\\\":null\",'').includes(JSON.stringify(contact1).replace(/\\\\/g, '').replace(\",\\\"providerId\\\":null\",''))){",
									"            flag = true;",
									"            break;",
									"        }",
									"    }",
									"    if(!flag)",
									"        pm.expect.fail(\"contact1 details are incorrect in the response\");",
									"});",
									"",
									"pm.test(\"Validate contact2 in response\", function () {",
									"    let flag=false;",
									"    const response = jsonData.map((res) => ({",
									"        ...res,",
									"        createdAT: new Date(res.createdAT).toISOString().slice(0, 10),",
									"        updatedAT: res.updatedAT ? new Date(res.updatedAT).toISOString().slice(0, 10) : null,",
									"    }));",
									"    for(let i=0; i<response.length; i++){",
									"        console.log(JSON.stringify(response[i]).replace(\",\\\"providerId\\\":null\",''));",
									"        console.log(JSON.stringify(contact2).replace(/\\\\/g, '').replace(\",\\\"providerId\\\":null\",''));",
									"        if(JSON.stringify(response[i]).replace(\",\\\"providerId\\\":null\",'').includes(JSON.stringify(contact2).replace(/\\\\/g, '').replace(\",\\\"providerId\\\":null\",''))){",
									"            flag = true;",
									"            break;",
									"        }",
									"    }",
									"    if(!flag)",
									"        pm.expect.fail(\"contact1 details are incorrect in the response\");",
									"});",
									"",
									"pm.test(\"Validate contact3 in response\", function () {",
									"    let flag=false;",
									"    const response = jsonData.map((res) => ({",
									"        ...res,",
									"        createdAT: new Date(res.createdAT).toISOString().slice(0, 10),",
									"        updatedAT: res.updatedAT ? new Date(res.updatedAT).toISOString().slice(0, 10) : null,",
									"    }));",
									"    for(let i=0; i<response.length; i++){",
									"        console.log(JSON.stringify(response[i]).replace(\",\\\"providerId\\\":null\",''));",
									"        console.log(JSON.stringify(contact3).replace(/\\\\/g, '').replace(\",\\\"providerId\\\":null\",''));",
									"        if(JSON.stringify(response[i]).replace(\",\\\"providerId\\\":null\",'').includes(JSON.stringify(contact3).replace(/\\\\/g, '').replace(\",\\\"providerId\\\":null\",''))){",
									"            flag = true;",
									"        }",
									"    }",
									"    if(!flag)",
									"        pm.expect.fail(\"contact3 details are incorrect in the response\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "244e4832-b829-4fdb-a16b-d583f453ee72",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{host}}/users/patients/patient-contact/{{patientId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients",
								"patient-contact",
								"{{patientId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update patient contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "88785996-b57a-4c80-b25e-4abf1585b510",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify patient contact id is generated\", function () {",
									"    pm.expect(jsonData.id).length.greaterThan(0);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fd0f56af-e1f8-4bff-84e1-3643e996253d",
								"exec": [
									"let ld = require('lodash');",
									"const trueorfalse = [true, false];",
									"",
									"const relation_to_patient = [",
									"    \"Case Manager/Discharge Planner\",",
									"    \"Community org/non-profit\",",
									"    \"Community professional\",",
									"    \"Dietitian\",",
									"    \"Doctor\",",
									"    \"Eating disorder coach/advocate\",",
									"    \"Executive\",",
									"    \"Family member\",",
									"    \"Father\",",
									"    \"Friend\",",
									"    \"Grandparent\",",
									"    \"Guardian\",",
									"    \"Hospital\",",
									"    \"Insurance company\",",
									"    \"Mother\",",
									"    \"Nurse\",",
									"    \"Nurse practitioner\",",
									"    \"Other\",",
									"    \"Outreach professional\",",
									"    \"Parent (non-binary)\",",
									"    \"Payor case manager\",",
									"    \"Physician Assistant\",",
									"    \"Physician: Adolescent Medicine/Eating Disorder Specialist\",",
									"    \"Physician: Endocrinologist\",",
									"    \"Physician: Family Medicine\",",
									"    \"Physician: Gastroenterologist\",",
									"    \"Physician: Other specialist\",",
									"    \"Physician: PCP (non-peds)\",",
									"    \"Physician: Pediatrician\",",
									"    \"Practice Manager\",",
									"    \"Private practice group\",",
									"    \"Psychiatrist\",",
									"    \"Psychologist\",",
									"    \"Referral Coordinator\",",
									"    \"School nurse\",",
									"    \"School therapist/counselor\",",
									"    \"Sibling\",",
									"    \"Social worker\",",
									"    \"Stepfather\",",
									"    \"Stepmother\",",
									"    \"Stepparent\",",
									"    \"Therapist\",",
									"    \"Treatment Center (eating disorder)\"",
									"];",
									"",
									"const yesorno = [\"Yes\", \"No\"];",
									"",
									"const contactPreferences = [",
									"    \"Unknown\",",
									"    \"Email\",",
									"    \"Phone\",",
									"    \"No preference\"",
									"]",
									"",
									"const genders = [",
									"    \"Cis-gender male\",",
									"    \"Cis-gender female\",",
									"    \"Non-binary\",",
									"    \"Other\",",
									"    \"Unknown\",",
									"    \"Transgender male\",",
									"    \"Transgender female\"",
									"];",
									"",
									"const pronoun = [",
									"  \"He/Him/His\",",
									"  \"She/Her/Hers\",",
									"  \"They/Them/Theirs\",",
									"  \"Other\",",
									"  \"Ey/Em/Eirs\",",
									"  \"Xe/Xem/Xir\",",
									"  \"(F)ae/(F)aer/(F)aers\",",
									"  \"None\"",
									"];",
									"",
									"const languages = [",
									"  \"Afrikaans\",",
									"  \"American Sign Language (ASL)\",",
									"  \"Armenian\",",
									"  \"Bamanankan\",",
									"  \"Bavarian\",",
									"  \"Bengali\",",
									"  \"Bhojpuri\",",
									"  \"Burmese\",",
									"  \"Cameroonian Pidgin\",",
									"  \"Cebuano\",",
									"  \"Chinese (Mandarin)\",",
									"  \"Chinese (Wu/Shanghainese)\",",
									"  \"Chinese (Yue/Cantonese)\",",
									"  \"Chittagonian\",",
									"  \"Czech\",",
									"  \"Deccan\",",
									"  \"Dutch\",",
									"  \"Eastern Punjabi\",",
									"  \"Egyptian Spoken Arabic\",",
									"  \"English\",",
									"  \"Filipino\",",
									"  \"French\",",
									"  \"Gan Chinese\",",
									"  \"Greek\",",
									"  \"Gujarati\",",
									"  \"Hakka Chinese\",",
									"  \"Hausa\",",
									"  \"Hindi\",",
									"  \"Hungarian\",",
									"  \"Igbo\",",
									"  \"Indonesian\",",
									"  \"Iranian Persian\",",
									"  \"Italian\",",
									"  \"Japanese\",",
									"  \"Javanese\",",
									"  \"Jinyu Chinese\",",
									"  \"Kannada\",",
									"  \"Kazakh\",",
									"  \"Khmer\",",
									"  \"Korean\",",
									"  \"Magahi\",",
									"  \"Maithili\",",
									"  \"Malay\",",
									"  \"Malayalam\",",
									"  \"Marathi\",",
									"  \"Nepali\",",
									"  \"Nigerian Fulfulde\",",
									"  \"Nigerian Pidgin\",",
									"  \"Northeastern Thai\",",
									"  \"Northern Kurdish\",",
									"  \"Northern Pashto\",",
									"  \"Northern Uzbek\",",
									"  \"Odia\",",
									"  \"Persian\",",
									"  \"Polish\",",
									"  \"Portuguese\",",
									"  \"Romanian\",",
									"  \"Russian\",",
									"  \"Sadri\",",
									"  \"Saraiki\",",
									"  \"Serbo-Croatian\",",
									"  \"Sindhi\",",
									"  \"Somali\",",
									"  \"South Azerbaijani\",",
									"  \"Southern Min Chinese\",",
									"  \"Spanish\",",
									"  \"Standard Arabic\",",
									"  \"Standard German\",",
									"  \"Sunda\",",
									"  \"Swahili\",",
									"  \"Swedish\",",
									"  \"Sylheti\",",
									"  \"Tagalog\",",
									"  \"Tamil\",",
									"  \"Telugu\",",
									"  \"Thai\",",
									"  \"Turkish\",",
									"  \"Ukrainian\",",
									"  \"Urdu\",",
									"  \"Vietnamese\",",
									"  \"Western Punjabi\",",
									"  \"Xhosa\",",
									"  \"Xiang Chinese\",",
									"  \"Yiddish\",",
									"  \"Yoruba\",",
									"  \"Zulu\"",
									"];",
									"",
									"const timezone = [",
									"    \"Hawaii Standard Time\",",
									"    \"Hawaii-Aleutian Time\",",
									"    \"Alaska Time\",",
									"    \"Pacific Time\",",
									"    \"Arizona\",",
									"    \"Mountain Time\",",
									"    \"Central Time\",",
									"    \"Eastern Time\",",
									"    \"London/UK Time\"",
									"];",
									"",
									"let statesList = [\"AK\", \"AL\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"DC\", \"FL\", \"GA\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"OH\", \"OK\", \"OR\", \"PA\", \"PR\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\", \"Outside US\", \"Unknown\"];",
									"",
									"let patientContactFirstName1 = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let patientContactLastName1 = pm.variables.replaceIn('{{$randomLastName}}');",
									"let email = \"qa\" + \"+\" + patientContactFirstName1 + \"+\" + Date.now() + \"@equip.health\";",
									"",
									"pm.environment.set(\"patientContactFirstName1\", patientContactFirstName1);",
									"pm.environment.set(\"patientContactLastName1\", patientContactLastName1);",
									"pm.environment.set(\"relation_to_patient1\", ld.sample(relation_to_patient));",
									"pm.environment.set(\"isLivesWithPatient1\", \"No\");",
									"pm.environment.set(\"patientContactEmailId1\", email);",
									"pm.environment.set(\"patientContactMobile1\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));",
									"pm.environment.set(\"patientContact_contactPreferences1\", collectionMethods.getRandomListofValuesFromList(contactPreferences));",
									"pm.environment.set(\"patientContactGender1\", ld.sample(genders));",
									"pm.environment.set(\"patientContactPronoun1\", collectionMethods.getRandomListofValuesFromList(pronoun));",
									"pm.environment.set(\"patientContact_languages1\", collectionMethods.getRandomListofValuesFromList(languages));",
									"pm.environment.set(\"isInquiryReferralSubmitted1\", ld.sample(trueorfalse));",
									"//pm.environment.set(\"patientContact_timezone\", collectionMethods.getRandomListofValuesFromList(timezone));",
									"",
									"pm.environment.set(\"AffiliationName_updated\", \"Google inc. india pvt ltd updated\");",
									"pm.environment.set(\"patientContactLatitude_updated\", pm.variables.replaceIn('{{$randomLatitude}}'));",
									"pm.environment.set(\"patientContactLongitude_updated\", pm.variables.replaceIn('{{$randomLongitude}}'));",
									"pm.environment.set(\"patientContactAddressLine1_updated\", pm.variables.replaceIn('{{$randomStreetAddress}}'));",
									"pm.environment.set(\"patientContactAddressLine2_updated\", pm.variables.replaceIn('{{$randomStreetName}}'));",
									"pm.environment.set(\"patientContactCity_updated\", pm.variables.replaceIn('{{$randomCity}}'));",
									"pm.environment.set(\"patientContactState_updated\", ld.sample(statesList));",
									"pm.environment.set(\"patientContactCountry_updated\", \"US\");",
									"pm.environment.set(\"patientContactZip_updated\", Math.floor(Math.random() * 90000) + 10000);",
									"pm.environment.set(\"isGuarantor1_updated\", ld.sample(trueorfalse));",
									"pm.environment.set(\"isOngoingProvider1_updated\", ld.sample(trueorfalse));",
									"pm.environment.set(\"patientContactPrefix1_updated\", \"Mr.\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "58c21a09-4fd5-4188-a236-6897edac025e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{patientContactFirstName1}}\",\n    \"lastName\": \"{{patientContactLastName1}}\",\n    \"relationToPatient\": \"{{relation_to_patient1}}\",\n    \"isLivesWithPatient\": \"{{isLivesWithPatient1}}\",\n    \"affiliationName\": \"{{AffiliationName_updated}}\",\n    \"latitude\": \"{{patientContactLatitude_updated}}\",\n    \"longitude\": \"{{patientContactLongitude_updated}}\",\n    \"addressLine1\": \"{{patientContactAddressLine1_updated}}\",\n    \"addressLine2\": \"{{patientContactAddressLine2_updated}}\",\n    \"city\": \"{{patientContactCity_updated}}\",\n    \"state\": \"{{patientContactState_updated}}\",\n    \"country\": \"{{patientContactCountry_updated}}\",\n    \"zip\": \"{{patientContactZip_updated}}\",\n    \"email\": \"{{patientContactEmailId1}}\",\n    \"cellPhone\": \"+1 {{patientContactMobile1}}\",\n    \"officePhone\": \"{{patientContactOfficePhone1}}\",\n    \"officeExtension\": \"{{patientContactOfficePhoneExt1}}\",\n    \"contactPreferences\": [\n        {{patientContact_contactPreferences1}}\n    ],\n    \"gender\": \"{{patientContactGender1}}\",\n    \"pronouns\": [{{patientContactPronoun1}}],\n    \"languages\": [\n        {{patientContact_languages1}}\n    ],\n    \"isReferringProvider\": \"{{isInquiryReferralSubmitted1}}\",\n    \"isDeleted\": \"No\",\n    \"providerId\": \"{{providerid}}\",\n    \"isPrimaryContact\": true,\n    \"isGuarantor\": {{isGuarantor1_updated}},\n    \"isOngoingProvider\": {{isOngoingProvider1_updated}},\n    \"prefix\": \"{{patientContactPrefix1_updated}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/patients/patient-contact/{{patientContactId1}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients",
								"patient-contact",
								"{{patientContactId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get Patient contact list - after update contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "057aad7a-6f41-4ee3-ac04-108c3050804d",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"const expectedNewFieldsNull = {",
									"    \"chosenName\": null,",
									"    \"prefix\": null,",
									"    \"middleName\": null,",
									"    \"suffix\": null,",
									"    \"dateOfBirth\": null,",
									"    \"ethnicities\": [],",
									"    \"isSupport\": false,",
									"    \"supportExternalId\": null,",
									"    \"isProxy\": false,",
									"    \"otherLinkedPatients\": [],",
									"    \"hasSetPassword\": false,",
									"    \"hasLoggedIn\":false,",
									"    \"providerId\": null",
									"};",
									"",
									"let contact1 = {",
									"        \"contactExternalId\": \"\" + pm.environment.get(\"patientContactId1\") + \"\",",
									"        \"firstName\": \"\" + pm.environment.get(\"patientContactFirstName1\") + \"\",",
									"        \"lastName\": \"\" + pm.environment.get(\"patientContactLastName1\") + \"\",",
									"        \"relationToPatient\": \"\" + pm.environment.get(\"relation_to_patient1\") + \"\",",
									"        \"isLivesWithPatient\": pm.environment.get(\"isLivesWithPatient1\") === 'Yes' ? true : false,",
									"        \"address\": {",
									"            \"latitude\": parseFloat(pm.environment.get(\"patientContactLatitude_updated\")),",
									"            \"longitude\": parseFloat(pm.environment.get(\"patientContactLongitude_updated\")),",
									"            \"affiliationName\": \"\" + pm.environment.get(\"AffiliationName_updated\") + \"\",",
									"            \"addressLine1\": \"\" + pm.environment.get(\"patientContactAddressLine1_updated\") + \"\",",
									"            \"addressLine2\": \"\" + pm.environment.get(\"patientContactAddressLine2_updated\") + \"\",",
									"            \"city\": \"\" + pm.environment.get(\"patientContactCity_updated\") + \"\",",
									"            \"state\": \"\" + pm.environment.get(\"patientContactState_updated\") + \"\",",
									"            \"county\": null,",
									"            \"country\": \"\" + pm.environment.get(\"patientContactCountry_updated\") + \"\",",
									"            \"zip\": \"\" + pm.environment.get(\"patientContactZip_updated\") + \"\"",
									"        },",
									"        \"email\": \"\" + pm.environment.get(\"patientContactEmailId1\") + \"\",",
									"        \"cellPhone\": \"+1 \" + pm.environment.get(\"patientContactMobile1\") + \"\",",
									"        \"contactPreferences\": [pm.environment.get(\"patientContact_contactPreferences1\").slice(1, -1)],",
									"        \"gender\": \"\" + pm.environment.get(\"patientContactGender1\") + \"\",",
									"        \"pronouns\": [pm.environment.get(\"patientContactPronoun1\").slice(1, -1)],",
									"        \"languages\": [pm.environment.get(\"patientContact_languages1\").slice(1, -1)],",
									"        \"isReferringProvider\": pm.environment.get(\"isInquiryReferralSubmitted1\"),",
									"        \"isDeleted\": false,",
									"        \"patientId\": pm.environment.get(\"patientId_contact\"),",
									"        \"timezone\": null,",
									"        \"createdAT\": \"\"+(new Date()).toISOString().slice(0, 10)+\"\",",
									"        \"updatedAT\": \"\"+(new Date()).toISOString().slice(0, 10)+\"\",",
									"        \"createdBy\": \"\" + pm.environment.get(\"providerid\") + \"\",",
									"        \"updatedBy\": \"\" + pm.environment.get(\"providerid\") + \"\",",
									"        \"isPrimaryContact\": true,",
									"        \"isGuarantor\":   pm.environment.get(\"isGuarantor1_updated\")  ,",
									"        \"officePhone\": \"\" + pm.environment.get(\"patientContactOfficePhone1\") + \"\",",
									"        \"officeExtension\":   parseInt(pm.environment.get(\"patientContactOfficePhoneExt1\")) ,",
									"        \"isOngoingProvider\":   pm.environment.get(\"isOngoingProvider1_updated\")  ,",
									"        \"department\": null,",
									"        ...expectedNewFieldsNull,",
									"        \"prefix\": pm.environment.get(\"patientContactPrefix1_updated\") + \"\",",
									"    };",
									"",
									"let contact2 = {",
									"        \"contactExternalId\": \"\" + pm.environment.get(\"patientContactId2\") + \"\",",
									"        \"firstName\": \"\" + pm.environment.get(\"patientContactFirstName2\") + \"\",",
									"        \"lastName\": \"\" + pm.environment.get(\"patientContactLastName2\") + \"\",",
									"        \"relationToPatient\": \"\" + pm.environment.get(\"relation_to_patient2\") + \"\",",
									"        \"isLivesWithPatient\": pm.environment.get(\"isLivesWithPatient2\") === 'Yes' ? true : false,",
									"        \"address\": {",
									"            \"latitude\": parseFloat(pm.environment.get(\"patientContactLatitude2\")),",
									"            \"longitude\": parseFloat(pm.environment.get(\"patientContactLongitude2\")),",
									"            \"affiliationName\": \"\" + pm.environment.get(\"AffiliationName2\") + \"\",",
									"            \"addressLine1\": \"\" + pm.environment.get(\"patientContactAddressLine1_2\") + \"\",",
									"            \"addressLine2\": \"\" + pm.environment.get(\"patientContactAddressLine2_2\") + \"\",",
									"            \"city\": \"\" + pm.environment.get(\"patientContactCity2\") + \"\",",
									"            \"state\": \"\" + pm.environment.get(\"patientContactState2\") + \"\",",
									"            \"county\": null,",
									"            \"country\": \"\" + pm.environment.get(\"patientContactCountry2\") + \"\",",
									"            \"zip\": \"\" + pm.environment.get(\"patientContactZip2\") + \"\"",
									"        },",
									"        \"email\": \"\" + pm.environment.get(\"patientContactEmailId2\") + \"\",",
									"        \"cellPhone\": \"+1 \" + pm.environment.get(\"patientContactMobile2\") + \"\",",
									"        \"contactPreferences\": [pm.environment.get(\"patientContact_contactPreferences2\").slice(1, -1)],",
									"        \"gender\": \"\" + pm.environment.get(\"patientContactGender2\") + \"\",",
									"        \"pronouns\": [pm.environment.get(\"patientContactPronoun2\").slice(1, -1)],",
									"        \"languages\": [pm.environment.get(\"patientContact_languages2\").slice(1, -1)],",
									"        \"isReferringProvider\": pm.environment.get(\"isInquiryReferralSubmitted2\"),",
									"        \"isDeleted\": false,",
									"        \"patientId\": pm.environment.get(\"patientId_contact\"),",
									"        \"timezone\": null,",
									"        \"createdAT\": \"\"+(new Date()).toISOString().slice(0, 10)+\"\",",
									"        \"updatedAT\": null,",
									"        \"createdBy\": \"\" + pm.environment.get(\"providerid\") + \"\",",
									"        \"updatedBy\": null,",
									"        \"isPrimaryContact\": false,",
									"        \"isGuarantor\": false,",
									"        \"officePhone\": null,",
									"        \"officeExtension\": null,",
									"        \"isOngoingProvider\": false,",
									"        \"department\": null,",
									"        ...expectedNewFieldsNull,",
									"        \"chosenName\": pm.environment.get(\"patientContactChosenName2\") + \"\",",
									"        \"dateOfBirth\": pm.environment.get(\"patientContactDateOfBirth2\") + \"\",",
									"    };",
									"",
									" let contact3 = {",
									"        \"contactExternalId\": \"\" + pm.environment.get(\"patientContactId3\") + \"\",",
									"        \"firstName\": \"\" + pm.environment.get(\"patientContactFirstName3\") + \"\",",
									"        \"lastName\": \"\" + pm.environment.get(\"patientContactLastName3\") + \"\",",
									"        \"relationToPatient\": \"\" + pm.environment.get(\"relation_to_patient3\") + \"\",",
									"        \"isLivesWithPatient\": pm.environment.get(\"isLivesWithPatient3\") === \"Yes\" ? true : false,",
									"        \"address\": {",
									"            \"latitude\": parseFloat(pm.environment.get(\"patientContactLatitude3\")),",
									"            \"longitude\": parseFloat(pm.environment.get(\"patientContactLongitude3\")),",
									"            \"affiliationName\": \"\" + pm.environment.get(\"AffiliationName3\") + \"\",",
									"            \"addressLine1\": \"\" + pm.environment.get(\"patientContactAddressLine1_3\") + \"\",",
									"            \"addressLine2\": \"\" + pm.environment.get(\"patientContactAddressLine2_3\") + \"\",",
									"            \"city\": \"\" + pm.environment.get(\"patientContactCity3\") + \"\",",
									"            \"state\": \"\" + pm.environment.get(\"patientContactState3\") + \"\",",
									"            \"county\": null,",
									"            \"country\": \"\" + pm.environment.get(\"patientContactCountry3\") + \"\",",
									"            \"zip\": \"\" + pm.environment.get(\"patientContactZip3\") + \"\"",
									"        },",
									"        \"email\": \"\" + pm.environment.get(\"patientContactEmailId3\") + \"\",",
									"        \"cellPhone\": \"+1 \" + pm.environment.get(\"patientContactMobile3\") + \"\",",
									"        \"contactPreferences\": [pm.environment.get(\"patientContact_contactPreferences3\").slice(1, -1)],",
									"        \"gender\": \"\" + pm.environment.get(\"patientContactGender3\") + \"\",",
									"        \"pronouns\": [pm.environment.get(\"patientContactPronoun3\").slice(1, -1)],",
									"        \"languages\": [pm.environment.get(\"patientContact_languages3\").slice(1, -1)],",
									"        \"isReferringProvider\": pm.environment.get(\"isInquiryReferralSubmitted2\"),",
									"        \"isDeleted\": false,",
									"        \"patientId\": pm.environment.get(\"patientId_contact\"),",
									"        \"timezone\": null,",
									"        \"createdAT\": \"\"+(new Date()).toISOString().slice(0, 10)+\"\",",
									"        \"updatedAT\": null,",
									"        \"createdBy\": \"\" + pm.environment.get(\"providerid\") + \"\",",
									"        \"updatedBy\": null,",
									"        \"isPrimaryContact\": false,",
									"        \"isGuarantor\": false,",
									"        \"officePhone\": null,",
									"        \"officeExtension\": null,",
									"        \"isOngoingProvider\": false,",
									"        \"department\": null,",
									"        ...expectedNewFieldsNull,",
									"    };",
									"",
									"pm.test(\"Validate contact1 in response\", function () {",
									"    let flag=false;",
									"    const response = jsonData.map((res) => ({",
									"        ...res,",
									"        createdAT: new Date(res.createdAT).toISOString().slice(0, 10),",
									"        updatedAT: res.updatedAT ? new Date(res.updatedAT).toISOString().slice(0, 10) : null,",
									"    }));",
									"    for(let i=0; i<response.length; i++){",
									"        console.log(JSON.stringify(response[i]).replace(\",\\\"providerId\\\":null\",''));",
									"        console.log(JSON.stringify(contact1).replace(/\\\\/g, '').replace(\",\\\"providerId\\\":null\",''));",
									"        if(JSON.stringify(response[i]).replace(\",\\\"providerId\\\":null\",'').includes(JSON.stringify(contact1).replace(/\\\\/g, '').replace(\",\\\"providerId\\\":null\",''))){",
									"            flag = true;",
									"            break;",
									"        }",
									"    }",
									"    if(!flag)",
									"        pm.expect.fail(\"contact1 details are incorrect in the response\");",
									"});",
									"/*",
									"pm.test(\"Validate contact2 in response\", function () {",
									"    let flag=false;",
									"    const response = jsonData.map((res) => ({",
									"        ...res,",
									"        createdAT: new Date(res.createdAT).toISOString().slice(0, 10),",
									"        updatedAT: res.updatedAT ? new Date(res.updatedAT).toISOString().slice(0, 10) : null,",
									"    }));",
									"    for(let i=0; i<response.length; i++){",
									"        console.log(JSON.stringify(response[i]).replace(\",\\\"providerId\\\":null\",''));",
									"        console.log(JSON.stringify(contact2).replace(/\\\\/g, '').replace(\",\\\"providerId\\\":null\",''));",
									"        if(JSON.stringify(response[i]).replace(\",\\\"providerId\\\":null\",'').includes(JSON.stringify(contact2).replace(/\\\\/g, '').replace(\",\\\"providerId\\\":null\",''))){",
									"            flag = true;",
									"            break;",
									"        }",
									"    }",
									"    if(!flag)",
									"        pm.expect.fail(\"contact2 details are incorrect in the response\");",
									"});",
									"",
									"pm.test(\"Validate contact3 in response\", function () {",
									"    let flag=false;",
									"    const response = jsonData.map((res) => ({",
									"        ...res,",
									"        createdAT: new Date(res.createdAT).toISOString().slice(0, 10),",
									"        updatedAT: res.updatedAT ? new Date(res.updatedAT).toISOString().slice(0, 10) : null,",
									"    }));",
									"    for(let i=0; i<response.length; i++){",
									"        console.log(JSON.stringify(response[i]).replace(\",\\\"providerId\\\":null\",''));",
									"        console.log(JSON.stringify(contact3).replace(/\\\\/g, '').replace(\",\\\"providerId\\\":null\",''));",
									"        if(JSON.stringify(response[i]).replace(\",\\\"providerId\\\":null\",'').includes(JSON.stringify(contact3).replace(/\\\\/g, '').replace(\",\\\"providerId\\\":null\",''))){",
									"            flag = true;",
									"            break;",
									"        }",
									"    }",
									"    if(!flag)",
									"        pm.expect.fail(\"contact3 details are incorrect in the response\");",
									"});*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d4788d98-6393-49b3-97ad-93c8d3178687",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{host}}/users/patients/patient-contact/{{patientId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients",
								"patient-contact",
								"{{patientId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete patient contact 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonText = pm.response.text();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify response message\", function () {",
									"    pm.expect(jsonText).to.equal(\"ContactId is successfully deleted.\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "c7da130a-7c4d-42dc-93eb-b850735bf8dd"
							}
						}
					],
					"id": "12a7d5fb-63f8-4779-b793-1f83f7535e67",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{host}}/users/patients/patient-contact/{{patientContactId2}}?provider-id={{providerid}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients",
								"patient-contact",
								"{{patientContactId2}}"
							],
							"query": [
								{
									"key": "provider-id",
									"value": "{{providerid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get Patient contact list - after delete contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8a257d4-fd30-4308-820a-d47b8ed7a5ea",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"const expectedNewFieldsNull = {",
									"    \"chosenName\": null,",
									"    \"prefix\": null,",
									"    \"middleName\": null,",
									"    \"suffix\": null,",
									"    \"dateOfBirth\": null,",
									"    \"ethnicities\": [],",
									"    \"isSupport\": false,",
									"    \"supportExternalId\": null,",
									"    \"isProxy\": false,",
									"    \"otherLinkedPatients\": [],",
									"    \"hasSetPassword\": false,",
									"    \"hasLoggedIn\": false,",
									"    \"hasLoggedIn\":false,",
									"    \"providerId\": null",
									"};",
									"",
									"let contact1 = {",
									"        \"contactExternalId\": \"\" + pm.environment.get(\"patientContactId1\") + \"\",",
									"        \"firstName\": \"\" + pm.environment.get(\"patientContactFirstName1\") + \"\",",
									"        \"lastName\": \"\" + pm.environment.get(\"patientContactLastName1\") + \"\",",
									"        \"relationToPatient\": \"\" + pm.environment.get(\"relation_to_patient1\") + \"\",",
									"        \"isLivesWithPatient\": pm.environment.get(\"isLivesWithPatient1\") === 'Yes' ? true : false,",
									"        \"address\": {",
									"            \"latitude\": parseFloat(pm.environment.get(\"patientContactLatitude_updated\")),",
									"            \"longitude\": parseFloat(pm.environment.get(\"patientContactLongitude_updated\")),",
									"            \"affiliationName\": \"\" + pm.environment.get(\"AffiliationName_updated\") + \"\",",
									"            \"addressLine1\": \"\" + pm.environment.get(\"patientContactAddressLine1_updated\") + \"\",",
									"            \"addressLine2\": \"\" + pm.environment.get(\"patientContactAddressLine2_updated\") + \"\",",
									"            \"city\": \"\" + pm.environment.get(\"patientContactCity_updated\") + \"\",",
									"            \"state\": \"\" + pm.environment.get(\"patientContactState_updated\") + \"\",",
									"            \"county\": null,",
									"            \"country\": \"\" + pm.environment.get(\"patientContactCountry_updated\") + \"\",",
									"            \"zip\": \"\" + pm.environment.get(\"patientContactZip_updated\") + \"\"",
									"        },",
									"        \"email\": \"\" + pm.environment.get(\"patientContactEmailId1\") + \"\",",
									"        \"cellPhone\": \"+1 \" + pm.environment.get(\"patientContactMobile1\") + \"\",",
									"        \"contactPreferences\": [pm.environment.get(\"patientContact_contactPreferences1\").slice(1, -1)],",
									"        \"gender\": \"\" + pm.environment.get(\"patientContactGender1\") + \"\",",
									"        \"pronouns\": [pm.environment.get(\"patientContactPronoun1\").slice(1, -1)],",
									"        \"languages\": [pm.environment.get(\"patientContact_languages1\").slice(1, -1)],",
									"        \"isReferringProvider\": pm.environment.get(\"isInquiryReferralSubmitted1\"),",
									"        \"isDeleted\": false,",
									"        \"patientId\": pm.environment.get(\"patientId_contact\"),",
									"        \"timezone\": null,",
									"        \"createdAT\": \"\"+(new Date()).toISOString().slice(0, 10)+\"\",",
									"        \"updatedAT\": \"\"+(new Date()).toISOString().slice(0, 10)+\"\",",
									"        \"createdBy\": \"\" + pm.environment.get(\"providerid\") + \"\",",
									"        \"updatedBy\": \"\" + pm.environment.get(\"providerid\") + \"\",",
									"        \"isPrimaryContact\": true,",
									"        \"isGuarantor\":   pm.environment.get(\"isGuarantor1_updated\")  ,",
									"        \"officePhone\": \"\" + pm.environment.get(\"patientContactOfficePhone1\") + \"\",",
									"        \"officeExtension\":   parseInt(pm.environment.get(\"patientContactOfficePhoneExt1\")) ,",
									"        \"isOngoingProvider\":   pm.environment.get(\"isOngoingProvider1_updated\")  ,",
									"        \"department\": null,",
									"        ...expectedNewFieldsNull,",
									"        \"prefix\": pm.environment.get(\"patientContactPrefix1_updated\") + \"\",",
									"    };",
									"",
									"let contact3 = {",
									"        \"contactExternalId\": \"\" + pm.environment.get(\"patientContactId3\") + \"\",",
									"        \"firstName\": \"\" + pm.environment.get(\"patientContactFirstName3\") + \"\",",
									"        \"lastName\": \"\" + pm.environment.get(\"patientContactLastName3\") + \"\",",
									"        \"relationToPatient\": \"\" + pm.environment.get(\"relation_to_patient3\") + \"\",",
									"        \"isLivesWithPatient\": pm.environment.get(\"isLivesWithPatient3\") === \"Yes\" ? true : false,",
									"        \"address\": {",
									"            \"latitude\": parseFloat(pm.environment.get(\"patientContactLatitude3\")),",
									"            \"longitude\": parseFloat(pm.environment.get(\"patientContactLongitude3\")),",
									"            \"affiliationName\": \"\" + pm.environment.get(\"AffiliationName3\") + \"\",",
									"            \"addressLine1\": \"\" + pm.environment.get(\"patientContactAddressLine1_3\") + \"\",",
									"            \"addressLine2\": \"\" + pm.environment.get(\"patientContactAddressLine2_3\") + \"\",",
									"            \"city\": \"\" + pm.environment.get(\"patientContactCity3\") + \"\",",
									"            \"state\": \"\" + pm.environment.get(\"patientContactState3\") + \"\",",
									"            \"county\": null,",
									"            \"country\": \"\" + pm.environment.get(\"patientContactCountry3\") + \"\",",
									"            \"zip\": \"\" + pm.environment.get(\"patientContactZip3\") + \"\"",
									"        },",
									"        \"email\": \"\" + pm.environment.get(\"patientContactEmailId3\") + \"\",",
									"        \"cellPhone\": \"+1 \" + pm.environment.get(\"patientContactMobile3\") + \"\",",
									"        \"contactPreferences\": [pm.environment.get(\"patientContact_contactPreferences3\").slice(1, -1)],",
									"        \"gender\": \"\" + pm.environment.get(\"patientContactGender3\") + \"\",",
									"        \"pronouns\": [pm.environment.get(\"patientContactPronoun3\").slice(1, -1)],",
									"        \"languages\": [pm.environment.get(\"patientContact_languages3\").slice(1, -1)],",
									"        \"isReferringProvider\": pm.environment.get(\"isInquiryReferralSubmitted3\"),",
									"        \"isDeleted\": false,",
									"        \"patientId\": pm.environment.get(\"patientId_contact\"),",
									"        \"timezone\": null,",
									"        \"createdAT\": \"\"+(new Date()).toISOString().slice(0, 10)+\"\",",
									"        \"updatedAT\": null,",
									"        \"createdBy\": \"\" + pm.environment.get(\"providerid\") + \"\",",
									"        \"updatedBy\": null,",
									"        \"isPrimaryContact\": false,",
									"        \"isGuarantor\": false,",
									"        \"officePhone\": null,",
									"        \"officeExtension\": null,",
									"        \"isOngoingProvider\": false,",
									"        \"department\": null,",
									"        ...expectedNewFieldsNull,",
									"    };",
									"",
									"pm.test(\"Validate contact1 in response\", function () {",
									"    let flag=false;",
									"    const response = jsonData.map((res) => ({",
									"        ...res,",
									"        createdAT: new Date(res.createdAT).toISOString().slice(0, 10),",
									"        updatedAT: res.updatedAT ? new Date(res.updatedAT).toISOString().slice(0, 10) : null,",
									"    }));",
									"    for(let i=0; i<response.length; i++){",
									"        console.log(JSON.stringify(response[i]).replace(\",\\\"providerId\\\":null\",''));",
									"        console.log(JSON.stringify(contact1).replace(/\\\\/g, '').replace(\",\\\"providerId\\\":null\",''));",
									"        if(JSON.stringify(response[i]).replace(\",\\\"providerId\\\":null\",'').includes(JSON.stringify(contact1).replace(/\\\\/g, '').replace(\",\\\"providerId\\\":null\",''))){",
									"            flag = true;",
									"            break;",
									"        }",
									"    }",
									"    if(!flag)",
									"        pm.expect.fail(\"contact1 details are incorrect in the response\");",
									"});",
									"/*",
									"pm.test(\"Validate contact3 in response\", function () {",
									"    let flag=false;",
									"    const response = jsonData.map((res) => ({",
									"        ...res,",
									"        createdAT: new Date(res.createdAT).toISOString().slice(0, 10),",
									"        updatedAT: res.updatedAT ? new Date(res.updatedAT).toISOString().slice(0, 10) : null,",
									"    }));",
									"    for(let i=0; i<response.length; i++){",
									"        console.log(JSON.stringify(response[i]).replace(\",\\\"providerId\\\":null\",''));",
									"        console.log(JSON.stringify(contact3).replace(/\\\\/g, '').replace(\",\\\"providerId\\\":null\",''));",
									"        if(JSON.stringify(response[i]).replace(\",\\\"providerId\\\":null\",'').includes(JSON.stringify(contact3).replace(/\\\\/g, '').replace(\",\\\"providerId\\\":null\",''))){",
									"            flag = true;",
									"            break;",
									"        }",
									"    }",
									"    if(!flag)",
									"        pm.expect.fail(\"contact3 details are incorrect in the response\");",
									"});*/",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "fdb69f82-2b37-43cf-a8ce-38a35350ce49",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{host}}/users/patients/patient-contact/{{patientId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients",
								"patient-contact",
								"{{patientId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete patient primary contact 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonText = pm.response.text();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify response message\", function () {",
									"    pm.expect(jsonText).to.equal(\"ContactId is successfully deleted.\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "e82ddc88-2209-41b7-a54f-dca87146895b"
							}
						}
					],
					"id": "cbe36d67-4685-43c2-ab87-e8661fc78ec1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{host}}/users/patients/patient-contact/{{patientContactId1}}?provider-id={{providerid}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients",
								"patient-contact",
								"{{patientContactId1}}"
							],
							"query": [
								{
									"key": "provider-id",
									"value": "{{providerid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get Patient contact list - after delete contact Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15468ace-60b3-4af2-a46b-2bf06d069945",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"const expectedNewFieldsNull = {",
									"    \"chosenName\": null,",
									"    \"prefix\": null,",
									"    \"middleName\": null,",
									"    \"suffix\": null,",
									"    \"dateOfBirth\": null,",
									"    \"ethnicities\": [],",
									"    \"isSupport\": false,",
									"    \"supportExternalId\": null,",
									"    \"isProxy\": false,",
									"    \"otherLinkedPatients\": [],",
									"    \"hasSetPassword\": false,",
									"    \"hasLoggedIn\": false,",
									"    \"hasLoggedIn\":false,",
									"    \"providerId\": null",
									"};",
									"",
									"let contact3 = ",
									"    {",
									"        \"contactExternalId\": \"\" + pm.environment.get(\"patientContactId3\") + \"\",",
									"        \"firstName\": \"\" + pm.environment.get(\"patientContactFirstName3\") + \"\",",
									"        \"lastName\": \"\" + pm.environment.get(\"patientContactLastName3\") + \"\",",
									"        \"relationToPatient\": \"\" + pm.environment.get(\"relation_to_patient3\") + \"\",",
									"        \"isLivesWithPatient\": pm.environment.get(\"isLivesWithPatient3\") === \"Yes\" ? true : false,",
									"        \"address\": {",
									"            \"latitude\": parseFloat(pm.environment.get(\"patientContactLatitude3\")),",
									"            \"longitude\": parseFloat(pm.environment.get(\"patientContactLongitude3\")),",
									"            \"affiliationName\": \"\" + pm.environment.get(\"AffiliationName3\") + \"\",",
									"            \"addressLine1\": \"\" + pm.environment.get(\"patientContactAddressLine1_3\") + \"\",",
									"            \"addressLine2\": \"\" + pm.environment.get(\"patientContactAddressLine2_3\") + \"\",",
									"            \"city\": \"\" + pm.environment.get(\"patientContactCity3\") + \"\",",
									"            \"state\": \"\" + pm.environment.get(\"patientContactState3\") + \"\",",
									"            \"county\": null,",
									"            \"country\": \"\" + pm.environment.get(\"patientContactCountry3\") + \"\",",
									"            \"zip\": \"\" + pm.environment.get(\"patientContactZip3\") + \"\"",
									"        },",
									"        \"email\": \"\" + pm.environment.get(\"patientContactEmailId3\") + \"\",",
									"        \"cellPhone\": \"+1 \" + pm.environment.get(\"patientContactMobile3\") + \"\",",
									"        \"contactPreferences\": [pm.environment.get(\"patientContact_contactPreferences3\").slice(1, -1)],",
									"        \"gender\": \"\" + pm.environment.get(\"patientContactGender3\") + \"\",",
									"        \"pronouns\": [pm.environment.get(\"patientContactPronoun3\").slice(1, -1)],",
									"        \"languages\": [pm.environment.get(\"patientContact_languages3\").slice(1, -1)],",
									"        \"isReferringProvider\": pm.environment.get(\"isInquiryReferralSubmitted3\"),",
									"        \"isDeleted\": false,",
									"        \"patientId\": pm.environment.get(\"patientId_contact\"),",
									"        \"timezone\": null,",
									"        \"createdAT\": \"\"+(new Date()).toISOString().slice(0, 10)+\"\",",
									"        \"updatedAT\": null,",
									"        \"createdBy\": \"\" + pm.environment.get(\"providerid\") + \"\",",
									"        \"updatedBy\": null,",
									"        \"isPrimaryContact\": false,",
									"        \"isGuarantor\": false,",
									"        \"officePhone\": null,",
									"        \"officeExtension\": null,",
									"        \"isOngoingProvider\": null,",
									"        \"department\": null,",
									"        ...expectedNewFieldsNull,",
									"    };",
									"",
									"pm.test(\"Validate contact3 in response\", function () {",
									"    let flag=false;",
									"    const response = jsonData.map((res) => ({",
									"        ...res,",
									"        createdAT: new Date(res.createdAT).toISOString().slice(0, 10),",
									"        updatedAT: res.updatedAT ? new Date(res.updatedAT).toISOString().slice(0, 10) : null,",
									"    }));",
									"    for(let i=0; i<response.length; i++){",
									"        console.log(JSON.stringify(response[i]).replace(\",\\\"providerId\\\":null\",''));",
									"        console.log(JSON.stringify(contact3).replace(/\\\\/g, '').replace(\",\\\"providerId\\\":null\",''));",
									"        if(JSON.stringify(response[i]).replace(\",\\\"providerId\\\":null\",'').includes(JSON.stringify(contact3).replace(/\\\\/g, '').replace(\",\\\"providerId\\\":null\",''))){",
									"            flag = true;",
									"            break;",
									"        }",
									"    }",
									"    if(!flag)",
									"        pm.expect.fail(\"contact3 details are incorrect in the response\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5e9e18d0-afa4-413a-9347-26bca408ac76",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{host}}/users/patients/patient-contact/{{patientId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients",
								"patient-contact",
								"{{patientId}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "b6580b81-8823-4c9b-9d55-42b4869d1044"
		},
		{
			"name": "Patient and Patient contact search",
			"item": [
				{
					"name": "Add patient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8805267f-29d9-4467-a328-c91a46dc1a8a",
								"exec": [
									"let ld = require('lodash');",
									"",
									"let gendersList = [",
									"    \"Cis-gender male\",",
									"    \"Cis-gender female\",",
									"    \"Non-binary\",",
									"    \"Other\",",
									"    \"Unknown\",",
									"    \"Transgender male\",",
									"    \"Transgender female\"",
									"];",
									"",
									"let pronounsList = [",
									"    \"He/Him/His\",",
									"    \"She/Her/Hers\",",
									"    \"They/Them/Theirs\",",
									"    \"Other\"",
									"];",
									"",
									"let ethnicitiesList = [",
									"    \"Asian\",",
									"    \"Black/African American\",",
									"    \"White/Caucasian\",",
									"    \"Hispanic/Latinx\",",
									"    \"Native American, Indian American, or Alaska Native\",",
									"    \"Native Hawaiian or other Pacific Islander\",",
									"    \"Middle Eastern or North African\",",
									"    \"Prefer not to answer\",",
									"    \"Other\"",
									"];",
									"",
									"let languagesList = [",
									"    \"English\",",
									"    \"Spanish\",",
									"    \"Chinese\",",
									"    \"French\",",
									"    \"Tagalog\",",
									"    \"Vietnamese\",",
									"    \"Korean\",",
									"    \"German\",",
									"    \"Russian\",",
									"    \"Italian\",",
									"    \"Portuguese\",",
									"    \"Polish\",",
									"    \"Japanese\",",
									"    \"Persian\",",
									"    \"Greek\",",
									"    \"Serbo-Croatian\",",
									"    \"Armenian\",",
									"    \"Yiddish\",",
									"    \"American Sign Language (ASL)\"",
									"];",
									"",
									"let sexList = [",
									"    \"Male\",",
									"    \"Female\"",
									"];",
									"",
									"let timezonesList = [",
									"    \"Hawaii Standard Time\",",
									"    \"Hawaii-Aleutian Time\",",
									"    \"Alaska Time\",",
									"    \"Pacific Time\",",
									"    \"Arizona\",",
									"    \"Mountain Time\",",
									"    \"Central Time\",",
									"    \"Eastern Time\"",
									"];",
									"",
									"let contactPreferences = [\"Email\", \"No preference\", \"Phone\", \"Unknown\"];",
									"",
									"let statesList = [\"AK\", \"AL\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"DC\", \"FL\", \"GA\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"OH\", \"OK\", \"OR\", \"PA\", \"PR\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\", \"Outside US\", \"Unknown\"];",
									"",
									"let addressLine2List = [\"Apt 1\", \"Apt 2\", \"Apt 3\", \"Unit #1\", \"Unit #2\", \"Unit #3\", \"Apt 2L\", \"Apt 2R\"];",
									"",
									"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let lastName = pm.variables.replaceIn('{{$randomLastName}}');",
									"let chosenName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let email = \"qa\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
									"let zip = Math.floor(10000 + Math.random() * 90000);",
									"",
									"//Generate random Date of Birth in YYYY-MM-DD Format",
									"function randomDate(start, end) {",
									"    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));",
									"}",
									"let date = randomDate(new Date(1990, 00, 01), new Date());",
									"let dateOfBirth = date.getFullYear() + '-' + (\"0\" + (date.getMonth() + 1)).slice(-2) + '-' + (\"0\" + date.getDate()).slice(-2);",
									"",
									"//Save the variables to be used in next request for validation",
									"pm.environment.set(\"patientFirstName\", firstName);",
									"pm.environment.set(\"patientLastName\", lastName);",
									"pm.environment.set(\"patientFirstLastAndChosenName\", firstName + \" \" + chosenName + \" \" + lastName);",
									"pm.environment.set(\"patientEmail\", email);",
									"pm.environment.set(\"patientPhoneNumber\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));",
									"pm.environment.set(\"patientChosenName\", chosenName);",
									"pm.environment.set(\"patientDateOfBirth\", dateOfBirth);",
									"pm.environment.set(\"patientAddressLine1\", pm.variables.replaceIn('{{$randomStreetAddress}}'));",
									"pm.environment.set(\"patientAddressLine2\", ld.sample(addressLine2List));",
									"pm.environment.set(\"patientCity\", pm.variables.replaceIn('{{$randomCity}}'));",
									"pm.environment.set(\"patientState\", ld.sample(statesList));",
									"pm.environment.set(\"patientCountry\", \"US\");",
									"pm.environment.set(\"patientZip\", zip.toString());",
									"pm.environment.set(\"patientLatitude\", pm.variables.replaceIn('{{$randomLatitude}}'));",
									"pm.environment.set(\"patientLongitude\", pm.variables.replaceIn('{{$randomLongitude}}'));",
									"pm.environment.set(\"patientEthnicities\", JSON.stringify(ld.sampleSize(ethnicitiesList, 2).sort()));",
									"pm.environment.set(\"patientLanguages\", JSON.stringify(ld.sampleSize(languagesList, 2).sort()));",
									"pm.environment.set(\"patientGenderOnRecord\", ld.sample(gendersList));",
									"pm.environment.set(\"patientGenderOffRecord\", ld.sample(gendersList));",
									"pm.environment.set(\"patientPronounsOnRecord\", ld.sample(pronounsList));",
									"pm.environment.set(\"patientPronounsOffRecord\", ld.sample(pronounsList));",
									"pm.environment.set(\"patientSex\", ld.sample(sexList));",
									"pm.environment.set(\"patientTimezone\", ld.sample(timezonesList));",
									"pm.environment.set(\"patientContactPreferences\", JSON.stringify(ld.sampleSize(contactPreferences, 2).sort()));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "03890a64-42fd-4b5d-8188-f5ea6d7c9103",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify id is generated\", function () {",
									"    pm.expect(jsonData.id).length.greaterThan(0);",
									"});",
									"",
									"pm.environment.set(\"patientId\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "bb74a1ad-fef6-402c-ad0a-78a73224dd01",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{patientFirstName}}\",\n    \"lastName\": \"{{patientLastName}}\",\n    \"dateOfBirth\": \"{{patientDateOfBirth}}\",\n    \"email\": \"{{patientEmail}}\",\n    \"contactPreferences\": {{patientContactPreferences}},\n    \"ethnicities\": {{patientEthnicities}},\n    \"phoneNumber\": \"{{patientPhoneNumber}}\",\n    \"chosenName\": \"{{patientChosenName}}\",\n    \"languages\": {{patientLanguages}},\n    \"genderOnRecord\": \"{{patientGenderOnRecord}}\",\n    \"genderOffRecord\": \"{{patientGenderOffRecord}}\",\n    \"pronounsOnRecord\": \"{{patientPronounsOnRecord}}\",\n    \"pronounsOffRecord\": \"{{patientPronounsOffRecord}}\",\n    \"sex\": \"{{patientSex}}\",\n    \"timezone\": \"{{patientTimezone}}\",\n    \"latitude\": \"{{patientLatitude}}\",\n    \"longitude\": \"{{patientLongitude}}\",\n    \"addressLine1\": \"{{patientAddressLine1}}\",\n    \"addressLine2\": \"{{patientAddressLine2}}\",\n    \"city\": \"{{patientCity}}\",\n    \"country\": \"{{patientCountry}}\",\n    \"state\": \"{{patientState}}\",\n    \"zip\": \"{{patientZip}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/patients",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add patient contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e27f0dbf-cfcb-49de-92b2-8786d2eb8e8a",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify patient contact id is generated\", function () {",
									"    pm.expect(jsonData.id).length.greaterThan(0);",
									"});",
									"",
									"pm.environment.set(\"patientContactId1\", jsonData.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3c54fbc9-826a-4565-8a00-9657ff61707d",
								"exec": [
									"let ld = require('lodash');",
									"const trueorfalse = [true, false];",
									"const relation_to_patient = [",
									"    \"Case Manager/Discharge Planner\",",
									"    \"Community org/non-profit\",",
									"    \"Community professional\",",
									"    \"Dietitian\",",
									"    \"Doctor\",",
									"    \"Eating disorder coach/advocate\",",
									"    \"Executive\",",
									"    \"Family member\",",
									"    \"Father\",",
									"    \"Friend\",",
									"    \"Grandparent\",",
									"    \"Guardian\",",
									"    \"Hospital\",",
									"    \"Insurance company\",",
									"    \"Mother\",",
									"    \"Nurse\",",
									"    \"Nurse practitioner\",",
									"    \"Other\",",
									"    \"Outreach professional\",",
									"    \"Parent (non-binary)\",",
									"    \"Payor case manager\",",
									"    \"Physician Assistant\",",
									"    \"Physician: Adolescent Medicine/Eating Disorder Specialist\",",
									"    \"Physician: Endocrinologist\",",
									"    \"Physician: Family Medicine\",",
									"    \"Physician: Gastroenterologist\",",
									"    \"Physician: Other specialist\",",
									"    \"Physician: PCP (non-peds)\",",
									"    \"Physician: Pediatrician\",",
									"    \"Practice Manager\",",
									"    \"Psychiatrist\",",
									"    \"Psychologist\",",
									"    \"Referral Coordinator\",",
									"    \"School nurse\",",
									"    \"School therapist/counselor\",",
									"    \"Sibling\",",
									"    \"Stepfather\",",
									"    \"Stepmother\",",
									"    \"Stepparent\",",
									"    \"Therapist\",",
									"    \"Treatment Center (eating disorder)\"",
									"];",
									"",
									"const yesorno = [\"Yes\", \"No\"];",
									"",
									"const contactPreferences = [",
									"    \"Unknown\",",
									"    \"Email\",",
									"    \"Phone\",",
									"    \"No preference\"",
									"]",
									"",
									"const genders = [",
									"    \"Cis-gender male\",",
									"    \"Cis-gender female\",",
									"    \"Non-binary\",",
									"    \"Other\",",
									"    \"Unknown\",",
									"    \"Transgender male\",",
									"    \"Transgender female\"",
									"];",
									"",
									"const pronoun = [",
									"  \"He/Him/His\",",
									"  \"She/Her/Hers\",",
									"  \"They/Them/Theirs\",",
									"  \"Other\",",
									"  \"Ey/Em/Eirs\",",
									"  \"Xe/Xem/Xir\",",
									"  \"(F)ae/(F)aer/(F)aers\",",
									"  \"None\"",
									"];",
									"",
									"const languages = [",
									"  \"Afrikaans\",",
									"  \"American Sign Language (ASL)\",",
									"  \"Armenian\",",
									"  \"Bamanankan\",",
									"  \"Bavarian\",",
									"  \"Bengali\",",
									"  \"Bhojpuri\",",
									"  \"Burmese\",",
									"  \"Cameroonian Pidgin\",",
									"  \"Cebuano\",",
									"  \"Chinese (Mandarin)\",",
									"  \"Chinese (Wu/Shanghainese)\",",
									"  \"Chinese (Yue/Cantonese)\",",
									"  \"Chittagonian\",",
									"  \"Czech\",",
									"  \"Deccan\",",
									"  \"Dutch\",",
									"  \"Eastern Punjabi\",",
									"  \"Egyptian Spoken Arabic\",",
									"  \"English\",",
									"  \"Filipino\",",
									"  \"French\",",
									"  \"Gan Chinese\",",
									"  \"Greek\",",
									"  \"Gujarati\",",
									"  \"Hakka Chinese\",",
									"  \"Hausa\",",
									"  \"Hindi\",",
									"  \"Hungarian\",",
									"  \"Igbo\",",
									"  \"Indonesian\",",
									"  \"Iranian Persian\",",
									"  \"Italian\",",
									"  \"Japanese\",",
									"  \"Javanese\",",
									"  \"Jinyu Chinese\",",
									"  \"Kannada\",",
									"  \"Kazakh\",",
									"  \"Khmer\",",
									"  \"Korean\",",
									"  \"Magahi\",",
									"  \"Maithili\",",
									"  \"Malay\",",
									"  \"Malayalam\",",
									"  \"Marathi\",",
									"  \"Nepali\",",
									"  \"Nigerian Fulfulde\",",
									"  \"Nigerian Pidgin\",",
									"  \"Northeastern Thai\",",
									"  \"Northern Kurdish\",",
									"  \"Northern Pashto\",",
									"  \"Northern Uzbek\",",
									"  \"Odia\",",
									"  \"Persian\",",
									"  \"Polish\",",
									"  \"Portuguese\",",
									"  \"Romanian\",",
									"  \"Russian\",",
									"  \"Sadri\",",
									"  \"Saraiki\",",
									"  \"Serbo-Croatian\",",
									"  \"Sindhi\",",
									"  \"Somali\",",
									"  \"South Azerbaijani\",",
									"  \"Southern Min Chinese\",",
									"  \"Spanish\",",
									"  \"Standard Arabic\",",
									"  \"Standard German\",",
									"  \"Sunda\",",
									"  \"Swahili\",",
									"  \"Swedish\",",
									"  \"Sylheti\",",
									"  \"Tagalog\",",
									"  \"Tamil\",",
									"  \"Telugu\",",
									"  \"Thai\",",
									"  \"Turkish\",",
									"  \"Ukrainian\",",
									"  \"Urdu\",",
									"  \"Vietnamese\",",
									"  \"Western Punjabi\",",
									"  \"Xhosa\",",
									"  \"Xiang Chinese\",",
									"  \"Yiddish\",",
									"  \"Yoruba\",",
									"  \"Zulu\"",
									"];",
									"",
									"const timezone = [",
									"    \"Hawaii Standard Time\",",
									"    \"Hawaii-Aleutian Time\",",
									"    \"Alaska Time\",",
									"    \"Pacific Time\",",
									"    \"Arizona\",",
									"    \"Mountain Time\",",
									"    \"Central Time\",",
									"    \"Eastern Time\",",
									"    \"London/UK Time\"",
									"];",
									"",
									"let patientContactFirstName1 = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let patientContactLastName1 = pm.variables.replaceIn('{{$randomLastName}}');",
									"let email = \"qa\" + \"+\" + patientContactFirstName1 + \"+\" + Date.now() + \"@equip.health\";",
									"",
									"pm.environment.set(\"patientContactFirstName1\", patientContactFirstName1);",
									"pm.environment.set(\"patientContactLastName1\", patientContactLastName1);",
									"pm.environment.set(\"relation_to_patient1\", ld.sample(relation_to_patient));",
									"pm.environment.set(\"isLivesWithPatient1\", ld.sample(yesorno));",
									"pm.environment.set(\"patientContactEmailId1\", email);",
									"pm.environment.set(\"patientContactMobile1\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));",
									"pm.environment.set(\"patientContact_contactPreferences1\", collectionMethods.getRandomListofValuesFromList(contactPreferences));",
									"pm.environment.set(\"patientContactGender1\", ld.sample(genders));",
									"pm.environment.set(\"patientContactPronoun1\", ld.sample(pronoun));",
									"pm.environment.set(\"patientContact_languages1\", collectionMethods.getRandomListofValuesFromList(languages));",
									"pm.environment.set(\"isInquiryReferralSubmitted1\", ld.sample(trueorfalse));",
									"",
									"pm.environment.set(\"AffiliationName1\", \"Google inc. india pvt ltd\");",
									"pm.environment.set(\"patientContactLatitude1\", pm.variables.replaceIn('{{$randomLatitude}}'));",
									"pm.environment.set(\"patientContactLongitude1\", pm.variables.replaceIn('{{$randomLongitude}}'));",
									"pm.environment.set(\"patientContactAddressLine1_1\", pm.variables.replaceIn('{{$randomStreetAddress}}'));",
									"pm.environment.set(\"patientContactAddressLine2_1\", pm.variables.replaceIn('{{$randomStreetName}}'));",
									"pm.environment.set(\"patientContactCity1\", pm.variables.replaceIn('{{$randomCity}}'));",
									"pm.environment.set(\"patientContactState1\", pm.variables.replaceIn('{{$randomStreetName}}'));",
									"pm.environment.set(\"patientContactCountry1\", \"US\");",
									"pm.environment.set(\"patientContactZip1\", Math.floor(Math.random() * 90000) + 10000);",
									"pm.environment.set(\"providerid\", \"f64a7075-a2bb-4c6c-8d2d-b8ac9a7f1ffc\");",
									"",
									"//pm.environment.set(\"patientContact_timezone\", collectionMethods.getRandomListofValuesFromList(timezone));",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5799ed36-82e8-4f75-9f2e-682975ea8e80",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{patientContactFirstName1}}\",\n    \"lastName\": \"{{patientContactLastName1}}\",\n    \"relationToPatient\": \"{{relation_to_patient1}}\",\n    \"isLivesWithPatient\": \"{{isLivesWithPatient1}}\",\n    \"affiliationName\": \"{{AffiliationName1}}\",\n    \"latitude\": \"{{patientContactLatitude1}}\",\n    \"longitude\": \"{{patientContactLongitude1}}\",\n    \"addressLine1\": \"{{patientContactAddressLine1_1}}\",\n    \"addressLine2\": \"{{patientContactAddressLine2_1}}\",\n    \"city\": \"{{patientContactCity1}}\",\n    \"state\": \"{{patientContactState1}}\",\n    \"country\": \"{{patientContactCountry1}}\",\n    \"zip\": \"{{patientContactZip1}}\",\n    \"email\": \"{{patientContactEmailId1}}\",\n    \"cellPhone\": \"+1 {{patientContactMobile1}}\",\n    \"contactPreferences\": [\n        {{patientContact_contactPreferences1}}\n    ],\n    \"gender\": \"{{patientContactGender1}}\",\n    \"pronouns\": \"{{patientContactPronoun1}}\",\n    \"languages\": [\n        {{patientContact_languages1}}\n    ],\n    \"isReferringProvider\": false,\n    \"providerId\": \"{{providerid}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/patients/patient-contact/{{patientId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients",
								"patient-contact",
								"{{patientId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patient search by phone number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"var searchString = pm.request.url.query.get(\"filter-by\").substring(16).replace(\"%20\",\" \");",
									"console.log(\"search string is \"+ searchString)",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"pm.test(\"Verify pageNumber count\", function () {",
									"    pm.expect(jsonData.count).to.be.eql(jsonData['data'].length);",
									"});",
									"",
									"pm.test(\"Verify the response have above patient\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"patientId\"));",
									"});",
									"",
									"pm.test(\"Verify each patient in the response have the expected phone number\", () => { ",
									"    for (let i = 0; i < jsonData.data.length; i++) {",
									"        pm.expect(",
									"            jsonData.data[i].phoneNumber.includes(searchString) ||",
									"            jsonData.data[i].firstName.includes(searchString) || ",
									"            jsonData.data[i].lastName.includes(searchString) || ",
									"            jsonData.data[i].email.includes(searchString) || ",
									"            jsonData.data[i].chosenName.includes(searchString)",
									"            ",
									"        ).to.be.true;",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"id": "7104d389-1327-4504-8a79-672ef8127776"
							}
						}
					],
					"id": "6fb290e7-5776-45a2-87cb-d8770ee469cd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/patients?page-size=15&filter-by=patient-search::{{patientPhoneNumber}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients"
							],
							"query": [
								{
									"key": "page-size",
									"value": "15"
								},
								{
									"key": "filter-by",
									"value": "patient-search::{{patientPhoneNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Patient search by first name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4f58d513-fd52-48a1-8225-fe982f5369d0",
								"exec": [
									"let jsonData = pm.response.json();",
									"var searchString = pm.request.url.query.get(\"filter-by\").substring(16).replace(\"%20\", \" \").toLowerCase();",
									"console.log(\"search string is \" + searchString)",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify pageNumber count\", function () {",
									"    pm.expect(jsonData.count).to.be.eql(jsonData['data'].length);",
									"});",
									"",
									"pm.test(\"Verify the response have above patient\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"patientId\"));",
									"});",
									"",
									"pm.test(\"Verify each patient in the response have the search name\", () => {",
									"    for (let i = 0; i < jsonData.data.length; i++) {",
									"        pm.expect(",
									"            jsonData.data[i].firstName.toLowerCase().includes(searchString) ||",
									"            jsonData.data[i].lastName.toLowerCase().includes(searchString) ||",
									"            jsonData.data[i].email.toLowerCase().includes(searchString) ||",
									"            jsonData.data[i].chosenName.toLowerCase().includes(searchString)",
									"        ).to.be.true;",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2e0f4491-13e0-4ba1-927b-2ee1acdaff4e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/patients?page-size=500&filter-by=patient-search::{{patientFirstName}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients"
							],
							"query": [
								{
									"key": "page-size",
									"value": "500"
								},
								{
									"key": "filter-by",
									"value": "patient-search::{{patientFirstName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Patient search by last name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"var searchString = pm.request.url.query.get(\"filter-by\").substring(16).replace(\"%20\",\" \").toLowerCase();",
									"console.log(\"search string is \"+ searchString);",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify pageNumber count\", function () {",
									"    pm.expect(jsonData.count).to.be.eql(jsonData['data'].length);",
									"});",
									"",
									"pm.test(\"Verify the response have above patient\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"patientId\"));",
									"});",
									"",
									"pm.test(\"Verify each patient in the response have the search name\", () => { ",
									"    for (let i = 0; i < jsonData.data.length; i++) {",
									"    pm.expect(",
									"            jsonData.data[i].firstName.toLowerCase().includes(searchString) || ",
									"            jsonData.data[i].lastName.toLowerCase().includes(searchString) || ",
									"            jsonData.data[i].email.toLowerCase().includes(searchString) || ",
									"            jsonData.data[i].chosenName.toLowerCase().includes(searchString)",
									"        ).to.be.true;",
									"    }",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "f260be64-f66f-4fd1-a901-5458e044416b"
							}
						}
					],
					"id": "6028c82c-affc-41e7-9d2d-dc98ed64f0a0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/patients?page-size=500&filter-by=patient-search::{{patientLastName}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients"
							],
							"query": [
								{
									"key": "page-size",
									"value": "500"
								},
								{
									"key": "filter-by",
									"value": "patient-search::{{patientLastName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Patient search by chosen name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"var searchString = pm.request.url.query.get(\"filter-by\").substring(16).replace(\"%20\",\" \").toLowerCase();",
									"console.log(\"search string is \"+ searchString);",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify pageNumber count\", function () {",
									"    pm.expect(jsonData.count).to.be.eql(jsonData['data'].length);",
									"});",
									"",
									"pm.test(\"Verify the response have above patient\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"patientId\"));",
									"});",
									"",
									"pm.test(\"Verify each patient in the response have the search name\", () => { ",
									"    for (let i = 0; i < jsonData.data.length; i++) {",
									"        pm.expect(",
									"            jsonData.data[i].firstName.toLowerCase().includes(searchString) || ",
									"            jsonData.data[i].lastName.toLowerCase().includes(searchString) || ",
									"            jsonData.data[i].email.toLowerCase().includes(searchString) || ",
									"            jsonData.data[i].chosenName.toLowerCase().includes(searchString)",
									"        ).to.be.true;",
									"    }",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "7df2c8c3-e341-4524-9f3a-b6c1fd41d1d5"
							}
						}
					],
					"id": "d4c78e0a-85ba-4239-8505-79fe5709b391",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/patients?page-size=500&filter-by=patient-search::{{patientChosenName}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients"
							],
							"query": [
								{
									"key": "page-size",
									"value": "500"
								},
								{
									"key": "filter-by",
									"value": "patient-search::{{patientChosenName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Patient search by first, last and chosen name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e8421181-cee7-481c-9ce6-98fd04ba8d01",
								"exec": [
									"let jsonData = pm.response.json();",
									"var searchString = pm.request.url.query.get(\"filter-by\").substring(16).replace(\"%20\", \" \").toLowerCase();",
									"console.log(\"search string is \" + searchString)",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify pageNumber count\", function () {",
									"    pm.expect(jsonData.count).to.be.eql(jsonData['data'].length);",
									"});",
									"",
									"pm.test(\"Verify the response have above patient\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"patientId\"));",
									"});",
									"",
									"pm.test(\"Verify each patient in the response have the search name\", () => {",
									"    for (let i = 0; i < jsonData.data.length; i++) {",
									"        pm.expect(",
									"            jsonData.data[i].firstName.includes(pm.environment.get(\"patientFirstName\")) ||",
									"            jsonData.data[i].lastName.includes(pm.environment.get(\"patientLastName\")) ||",
									"            jsonData.data[i].chosenName.includes(pm.environment.get(\"patientChosenName\"))",
									"        ).to.be.true;",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "cc009f1a-ae5e-4acb-916a-13625fc27383",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/patients?page-size=500&filter-by=patient-search::{{patientFirstLastAndChosenName}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients"
							],
							"query": [
								{
									"key": "page-size",
									"value": "500"
								},
								{
									"key": "filter-by",
									"value": "patient-search::{{patientFirstLastAndChosenName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Patient search by email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"var searchString = pm.request.url.query.get(\"filter-by\").substring(16).replace(\"%20\",\" \").toLowerCase();",
									"console.log(\"search string is \"+ searchString);",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify pageNumber count\", function () {",
									"    pm.expect(jsonData.count).to.be.eql(jsonData['data'].length);",
									"});",
									"",
									"pm.test(\"Verify the response have above patient\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"patientId\"));",
									"});",
									"",
									"pm.test(\"Verify each patient in the response have the search name\", () => { ",
									"    for (let i = 0; i < jsonData.data.length; i++) {",
									"        pm.expect(",
									"            jsonData.data[i].firstName.toLowerCase().includes(searchString) || ",
									"            jsonData.data[i].lastName.toLowerCase().includes(searchString) || ",
									"            jsonData.data[i].email.toLowerCase().includes(searchString) || ",
									"            jsonData.data[i].chosenName.toLowerCase().includes(searchString)",
									"        ).to.be.true;",
									"    }",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "08d2d3ee-e6cf-4e4e-aaf9-bccec18da3ef"
							}
						}
					],
					"id": "de1635b1-8db4-43d5-9822-b7b8a3bceba0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/patients?page-size=500&filter-by=patient-search::{{patientEmail}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients"
							],
							"query": [
								{
									"key": "page-size",
									"value": "500"
								},
								{
									"key": "filter-by",
									"value": "patient-search::{{patientEmail}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Patient information",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "953bc4e5-4bb6-4c33-8ab3-f7ae3a0f0e7d",
								"exec": [
									"let ld = require('lodash');",
									"",
									"let gendersList = [",
									"    \"Cis-gender male\",",
									"    \"Cis-gender female\",",
									"    \"Non-binary\",",
									"    \"Other\",",
									"    \"Unknown\",",
									"    \"Transgender male\",",
									"    \"Transgender female\"",
									"];",
									"",
									"let pronounsList = [",
									"    \"He/Him/His\",",
									"    \"She/Her/Hers\",",
									"    \"They/Them/Theirs\",",
									"    \"Other\"",
									"];",
									"",
									"let ethnicitiesList = [",
									"    \"Asian\",",
									"    \"Black/African American\",",
									"    \"White/Caucasian\",",
									"    \"Hispanic/Latinx\",",
									"    \"Native American, Indian American, or Alaska Native\",",
									"    \"Native Hawaiian or other Pacific Islander\",",
									"    \"Middle Eastern or North African\",",
									"    \"Prefer not to answer\",",
									"    \"Other\"",
									"];",
									"",
									"let languagesList = [",
									"    \"English\",",
									"    \"Spanish\",",
									"    \"Chinese\",",
									"    \"French\",",
									"    \"Tagalog\",",
									"    \"Vietnamese\",",
									"    \"Korean\",",
									"    \"German\",",
									"    \"Russian\",",
									"    \"Italian\",",
									"    \"Portuguese\",",
									"    \"Polish\",",
									"    \"Japanese\",",
									"    \"Persian\",",
									"    \"Greek\",",
									"    \"Serbo-Croatian\",",
									"    \"Armenian\",",
									"    \"Yiddish\",",
									"    \"American Sign Language (ASL)\"",
									"];",
									"",
									"let sexList = [",
									"    \"Male\",",
									"    \"Female\"",
									"];",
									"",
									"let timezonesList = [",
									"    \"Hawaii Standard Time\",",
									"    \"Hawaii-Aleutian Time\",",
									"    \"Alaska Time\",",
									"    \"Pacific Time\",",
									"    \"Arizona\",",
									"    \"Mountain Time\",",
									"    \"Central Time\",",
									"    \"Eastern Time\"",
									"];",
									"",
									"let contactPreferences = [\"Email\", \"No preference\", \"Phone\", \"Unknown\"];",
									"",
									"let statesList = [\"AK\", \"AL\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"DC\", \"FL\", \"GA\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"OH\", \"OK\", \"OR\", \"PA\", \"PR\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\", \"Outside US\", \"Unknown\"];",
									"",
									"let addressLine2List = [\"Apt 1\", \"Apt 2\", \"Apt 3\", \"Unit #1\", \"Unit #2\", \"Unit #3\", \"Apt 2L\", \"Apt 2R\"];",
									"",
									"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let lastName = pm.variables.replaceIn('{{$randomLastName}}');",
									"let chosenName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let email = \"qa\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
									"let zip = Math.floor(10000 + Math.random() * 90000);",
									"",
									"//Generate random Date of Birth in YYYY-MM-DD Format",
									"function randomDate(start, end) {",
									"    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));",
									"}",
									"let date = randomDate(new Date(1990, 00, 01), new Date());",
									"let dateOfBirth = date.getFullYear() + '-' + (\"0\" + (date.getMonth() + 1)).slice(-2) + '-' + (\"0\" + date.getDate()).slice(-2);",
									"",
									"//Save the variables to be used in next request for validation",
									"pm.environment.set(\"patientFirstName1\", firstName);",
									"pm.environment.set(\"patientLastName1\", lastName);",
									"pm.environment.set(\"patientEmail1\", email);",
									"pm.environment.set(\"patientPhoneNumber1\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));",
									"pm.environment.set(\"patientChosenName1\", chosenName);",
									"pm.environment.set(\"patientDateOfBirth1\", dateOfBirth);",
									"pm.environment.set(\"patientAddressLine11\", pm.variables.replaceIn('{{$randomStreetAddress}}'));",
									"pm.environment.set(\"patientAddressLine21\", ld.sample(addressLine2List));",
									"pm.environment.set(\"patientCity1\", pm.variables.replaceIn('{{$randomCity}}'));",
									"pm.environment.set(\"patientState1\", ld.sample(statesList));",
									"pm.environment.set(\"patientCountry1\", \"US\");",
									"pm.environment.set(\"patientZip1\", zip.toString());",
									"pm.environment.set(\"patientLatitude1\", pm.variables.replaceIn('{{$randomLatitude}}'));",
									"pm.environment.set(\"patientLongitude1\", pm.variables.replaceIn('{{$randomLongitude}}'));",
									"pm.environment.set(\"patientEthnicities1\", JSON.stringify(ld.sampleSize(ethnicitiesList, 2).sort()));",
									"pm.environment.set(\"patientLanguages1\", JSON.stringify(ld.sampleSize(languagesList, 2).sort()));",
									"pm.environment.set(\"patientGenderOnRecord1\", ld.sample(gendersList));",
									"pm.environment.set(\"patientGenderOffRecord1\", ld.sample(gendersList));",
									"pm.environment.set(\"patientPronounsOnRecord1\", ld.sample(pronounsList));",
									"pm.environment.set(\"patientPronounsOffRecord1\", ld.sample(pronounsList));",
									"pm.environment.set(\"patientSex1\", ld.sample(sexList));",
									"pm.environment.set(\"patientTimezone1\", ld.sample(timezonesList));",
									"pm.environment.set(\"patientContactPreferences1\", JSON.stringify(ld.sampleSize(contactPreferences, 2).sort()));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c9af1431-8004-401c-9801-9e0f846e1dc9",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify id is generated\", function () {",
									"    pm.expect(jsonData.id).length.greaterThan(0);",
									"});",
									"",
									"//pm.environment.set(\"patientId\", jsonData.id);",
									"// pm.sendRequest(\"Get Patient by ID\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5993931d-1fe3-4e9d-937b-0b18d906e3c2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{patientFirstName1}}\",\n    \"lastName\": \"{{patientLastName1}}\",\n    \"dateOfBirth\": \"{{patientDateOfBirth1}}\",\n    \"email\": \"{{patientEmail1}}\",\n    \"contactPreferences\": {{patientContactPreferences1}},\n    \"ethnicities\": {{patientEthnicities1}},\n    \"phoneNumber\": \"{{patientPhoneNumber1}}\",\n    \"chosenName\": \"{{patientChosenName1}}\",\n    \"languages\": {{patientLanguages1}},\n    \"genderOnRecord\": \"{{patientGenderOnRecord1}}\",\n    \"genderOffRecord\": \"{{patientGenderOffRecord1}}\",\n    \"pronounsOnRecord\": \"{{patientPronounsOnRecord1}}\",\n    \"pronounsOffRecord\": \"{{patientPronounsOffRecord1}}\",\n    \"sex\": \"{{patientSex1}}\",\n    \"timezone\": \"{{patientTimezone1}}\",\n    \"latitude\": \"{{patientLatitude1}}\",\n    \"longitude\": \"{{patientLongitude1}}\",\n    \"addressLine1\": \"{{patientAddressLine11}}\",\n    \"addressLine2\": \"{{patientAddressLine21}}\",\n    \"city\": \"{{patientCity1}}\",\n    \"country\": \"{{patientCountry1}}\",\n    \"state\": \"{{patientState1}}\",\n    \"zip\": \"{{patientZip1}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/patients/{{patientId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients",
								"{{patientId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patient search by old patient info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"var searchString = pm.request.url.query.get(\"filter-by\").substring(16).replace(\"%20\",\" \");",
									"console.log(\"search string is \"+ searchString)",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"pm.test(\"Verify pageNumber count\", function () {",
									"    pm.expect(jsonData.count).to.be.eql(jsonData['data'].length);",
									"});",
									"",
									"pm.test(\"Verify the response have above patient\", function () {",
									"    pm.expect(pm.response.text()).not.to.include(pm.environment.get(\"patientId\"));",
									"});"
								],
								"type": "text/javascript",
								"id": "7525b840-f86b-4d22-bd5a-d85949b57e31"
							}
						}
					],
					"id": "462b87b3-3a5d-47d0-9d16-55a1d337105d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/patients?page-size=500&filter-by=patient-search::{{patientPhoneNumber}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients"
							],
							"query": [
								{
									"key": "page-size",
									"value": "500"
								},
								{
									"key": "filter-by",
									"value": "patient-search::{{patientPhoneNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Patient search by contact phone number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"var searchString = pm.request.url.query.get(\"filter-by\").substring(16).replace(\"%20\",\" \").toLowerCase();",
									"console.log(\"search string is \"+ searchString)",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"pm.test(\"Verify pageNumber count\", function () {",
									"    pm.expect(jsonData.count).to.be.eql(jsonData['data'].length);",
									"});",
									"",
									"pm.test(\"Verify the response have above patient\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"patientId\"));",
									"});"
								],
								"type": "text/javascript",
								"id": "8930224a-a841-4e0f-8e40-2da74c5fb335"
							}
						}
					],
					"id": "9362d669-9a28-4789-a12e-28bd55269fbb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/patients?page-size=500&filter-by=contact-search::{{patientContactMobile1}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients"
							],
							"query": [
								{
									"key": "page-size",
									"value": "500"
								},
								{
									"key": "filter-by",
									"value": "contact-search::{{patientContactMobile1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Patient search by contact first name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"var searchString = pm.request.url.query.get(\"filter-by\").substring(16).replace(\"%20\",\" \").toLowerCase();",
									"console.log(\"search string is \"+ searchString)",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify pageNumber count\", function () {",
									"    pm.expect(jsonData.count).to.be.eql(jsonData['data'].length);",
									"});",
									"",
									"pm.test(\"Verify the response have above patient\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"patientId\"));",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "d8d0031f-1003-40aa-bd75-72c6b05b41c3"
							}
						}
					],
					"id": "bd91c206-03f5-47f8-b05b-498a9c5e7530",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/patients?page-size=500&filter-by=contact-search::{{patientContactFirstName1}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients"
							],
							"query": [
								{
									"key": "page-size",
									"value": "500"
								},
								{
									"key": "filter-by",
									"value": "contact-search::{{patientContactFirstName1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Patient search by contact last name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"var searchString = pm.request.url.query.get(\"filter-by\").substring(16).replace(\"%20\",\" \").toLowerCase();",
									"console.log(\"search srting is \"+ searchString);",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify pageNumber count\", function () {",
									"    pm.expect(jsonData.count).to.be.eql(jsonData['data'].length);",
									"});",
									"",
									"pm.test(\"Verify the response have above patient\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"patientId\"));",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "a8f0cebf-57d2-409e-9069-fc3bca25aaa1"
							}
						}
					],
					"id": "4c9528d6-20ec-4732-9288-190ceaf8620c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/patients?page-size=500&filter-by=contact-search::{{patientContactLastName1}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients"
							],
							"query": [
								{
									"key": "page-size",
									"value": "500"
								},
								{
									"key": "filter-by",
									"value": "contact-search::{{patientContactLastName1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Patient search by contact email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"var searchString = pm.request.url.query.get(\"filter-by\").substring(16).replace(\"%20\",\" \").toLowerCase();",
									"console.log( pm.request.url.query.get(\"filter-by\").substring(16));",
									"console.log(\"search string is \"+ searchString);",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify pageNumber count\", function () {",
									"    pm.expect(jsonData.count).to.be.eql(jsonData['data'].length);",
									"});",
									"",
									"pm.test(\"Verify the response have above patient\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"patientId\"));",
									"});"
								],
								"type": "text/javascript",
								"id": "d1a452aa-8e56-490c-9ea5-5b79b8453d8b"
							}
						}
					],
					"id": "0b07711b-773d-4151-ac61-3ba393aaf7ef",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/patients?page-size=500&filter-by=contact-search::{{patientContactEmailId1}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients"
							],
							"query": [
								{
									"key": "page-size",
									"value": "500"
								},
								{
									"key": "filter-by",
									"value": "contact-search::{{patientContactEmailId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete patient contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonText = pm.response.text();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify response message\", function () {",
									"    pm.expect(jsonText).to.equal(\"ContactId is successfully deleted.\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "276d3cae-28c8-4766-9374-2af817861ffc"
							}
						}
					],
					"id": "efc102d9-abd5-4f8a-8f65-a0fea2ecade1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{host}}/users/patients/patient-contact/{{patientContactId1}}?provider-id={{providerid}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients",
								"patient-contact",
								"{{patientContactId1}}"
							],
							"query": [
								{
									"key": "provider-id",
									"value": "{{providerid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Patient search by deleted contact first name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"var searchString = pm.request.url.query.get(\"filter-by\").substring(16).replace(\"%20\",\" \").toLowerCase();",
									"console.log(\"search string is \"+ searchString)",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify pageNumber count\", function () {",
									"    pm.expect(jsonData.count).to.be.eql(jsonData['data'].length);",
									"});",
									"",
									"pm.test(\"Verify the response do not have above patient\", function () {",
									"    pm.expect(pm.response.text()).not.to.include(pm.environment.get(\"patientId\"));",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "1dba1655-52a3-4ed6-8100-17d863cdf72e"
							}
						}
					],
					"id": "6b3fc16c-d93e-4ddc-bf48-0c3476035b1d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/patients?page-size=500&filter-by=contact-search::{{patientContactFirstName1}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients"
							],
							"query": [
								{
									"key": "page-size",
									"value": "500"
								},
								{
									"key": "filter-by",
									"value": "contact-search::{{patientContactFirstName1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Patient search - Invalid data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"var searchString = pm.request.url.query.get(\"filter-by\").substring(16).replace(\"%20\",\" \");",
									"console.log(\"search string is \"+ searchString)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"pm.test(\"Verify pageNumber count\", function () {",
									"    pm.expect(jsonData.count).to.be.eql(jsonData['data'].length);",
									"});",
									"",
									"pm.test(\"Verify count is 0\", () => { ",
									"    pm.expect(jsonData.count).to.be.eql(0);",
									"});"
								],
								"type": "text/javascript",
								"id": "6e2e564b-189a-4eb4-9a3d-7b0da9aa6397"
							}
						}
					],
					"id": "97ec6b85-ec08-4142-84ab-1008693431ae",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/patients?page-size=500&filter-by=patient-search::hhhhhbbbbbb",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients"
							],
							"query": [
								{
									"key": "page-size",
									"value": "500"
								},
								{
									"key": "filter-by",
									"value": "patient-search::hhhhhbbbbbb"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Contact search - Invalid data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"var searchString = pm.request.url.query.get(\"filter-by\").substring(16).replace(\"%20\",\" \");",
									"console.log(\"search string is \"+ searchString)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"pm.test(\"Verify pageNumber count\", function () {",
									"    pm.expect(jsonData.count).to.be.eql(jsonData['data'].length);",
									"});",
									"",
									"pm.test(\"Verify count is 0\", () => { ",
									"    pm.expect(jsonData.count).to.be.eql(0);",
									"});"
								],
								"type": "text/javascript",
								"id": "85368ede-e7b6-4995-88e8-6d03a2c2880c"
							}
						}
					],
					"id": "dc434781-3443-465c-969d-95885cedca20",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/patients?page-size=500&filter-by=contact-search::hhhhhbbbbbb",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients"
							],
							"query": [
								{
									"key": "page-size",
									"value": "500"
								},
								{
									"key": "filter-by",
									"value": "contact-search::hhhhhbbbbbb"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "c00060f0-1eb9-43d6-879b-fe346c9f9364"
		},
		{
			"name": "Care plan",
			"item": [
				{
					"name": "Admission team",
					"item": [
						{
							"name": "Add Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9bc7b41f-c9e7-40ca-a2bc-79305e73923c",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"",
											"pm.test(\"Response has a JSON body\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"pm.test(\"Verify id is generated\", function () {",
											"    pm.expect(jsonData.id).length.greaterThan(0);",
											"});",
											"",
											"pm.environment.set(\"patientId\", jsonData.id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "81998963-6b09-4af3-95fd-726d3ddfa19a",
										"exec": [
											"let ld = require('lodash');",
											"",
											"let gendersList = [",
											"    \"Cis-gender male\",",
											"    \"Cis-gender female\",",
											"    \"Non-binary\",",
											"    \"Other\",",
											"    \"Unknown\",",
											"    \"Transgender male\",",
											"    \"Transgender female\"",
											"];",
											"",
											"let pronounsList = [",
											"    \"He/Him/His\",",
											"    \"She/Her/Hers\",",
											"    \"They/Them/Theirs\",",
											"    \"Other\"",
											"];",
											"",
											"let ethnicitiesList = [",
											"    \"Asian\",",
											"    \"Black/African American\",",
											"    \"White/Caucasian\",",
											"    \"Hispanic/Latinx\",",
											"    \"Native American, Indian American, or Alaska Native\",",
											"    \"Native Hawaiian or other Pacific Islander\",",
											"    \"Middle Eastern or North African\",",
											"    \"Prefer not to answer\",",
											"    \"Other\"",
											"];",
											"",
											"let languagesList = [",
											"    \"English\",",
											"    \"Spanish\",",
											"    \"Chinese\",",
											"    \"French\",",
											"    \"Tagalog\",",
											"    \"Vietnamese\",",
											"    \"Korean\",",
											"    \"German\",",
											"    \"Russian\",",
											"    \"Italian\",",
											"    \"Portuguese\",",
											"    \"Polish\",",
											"    \"Japanese\",",
											"    \"Persian\",",
											"    \"Greek\",",
											"    \"Serbo-Croatian\",",
											"    \"Armenian\",",
											"    \"Yiddish\",",
											"    \"American Sign Language (ASL)\"",
											"];",
											"",
											"let sexList = [",
											"    \"Male\",",
											"    \"Female\"",
											"];",
											"",
											"let timezonesList = [",
											"    \"Hawaii Standard Time\",",
											"    \"Hawaii-Aleutian Time\",",
											"    \"Alaska Time\",",
											"    \"Pacific Time\",",
											"    \"Arizona\",",
											"    \"Mountain Time\",",
											"    \"Central Time\",",
											"    \"Eastern Time\"",
											"];",
											"",
											"let contactPreferences = [\"Email\", \"No preference\", \"Phone\", \"Unknown\"];",
											"",
											"let statesList = [\"AK\", \"AL\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"DC\", \"FL\", \"GA\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"OH\", \"OK\", \"OR\", \"PA\", \"PR\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\", \"Outside US\", \"Unknown\"];",
											"",
											"let addressLine2List = [\"Apt 1\", \"Apt 2\", \"Apt 3\", \"Unit #1\", \"Unit #2\", \"Unit #3\", \"Apt 2L\", \"Apt 2R\"];",
											"",
											"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
											"let lastName = pm.variables.replaceIn('{{$randomLastName}}');",
											"let chosenName = pm.variables.replaceIn('{{$randomFirstName}}');",
											"let email = \"qa\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
											"let zip = Math.floor(10000 + Math.random() * 90000);",
											"",
											"//Generate random Date of Birth in YYYY-MM-DD Format",
											"function randomDate(start, end) {",
											"    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));",
											"}",
											"let date = randomDate(new Date(1990, 00, 01), new Date());",
											"let dateOfBirth = date.getFullYear() + '-' + (\"0\" + (date.getMonth() + 1)).slice(-2) + '-' + (\"0\" + date.getDate()).slice(-2);",
											"",
											"//Save the variables to be used in next request for validation",
											"pm.environment.set(\"patientFirstName\", firstName);",
											"pm.environment.set(\"patientLastName\", lastName);",
											"pm.environment.set(\"patientEmail\", email);",
											"pm.environment.set(\"patientPhoneNumber\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));",
											"pm.environment.set(\"patientChosenName\", chosenName);",
											"pm.environment.set(\"patientDateOfBirth\", dateOfBirth);",
											"pm.environment.set(\"patientAddressLine1\", pm.variables.replaceIn('{{$randomStreetAddress}}'));",
											"pm.environment.set(\"patientAddressLine2\", ld.sample(addressLine2List));",
											"pm.environment.set(\"patientCity\", pm.variables.replaceIn('{{$randomCity}}'));",
											"pm.environment.set(\"patientState\", ld.sample(statesList));",
											"pm.environment.set(\"patientCountry\", \"US\");",
											"pm.environment.set(\"patientZip\", zip.toString());",
											"pm.environment.set(\"patientLatitude\", pm.variables.replaceIn('{{$randomLatitude}}'));",
											"pm.environment.set(\"patientLongitude\", pm.variables.replaceIn('{{$randomLongitude}}'));",
											"pm.environment.set(\"patientEthnicities\", JSON.stringify(ld.sampleSize(ethnicitiesList, 2).sort()));",
											"pm.environment.set(\"patientLanguages\", JSON.stringify(ld.sampleSize(languagesList, 2).sort()));",
											"pm.environment.set(\"patientGenderOnRecord\", ld.sample(gendersList));",
											"pm.environment.set(\"patientGenderOffRecord\", ld.sample(gendersList));",
											"pm.environment.set(\"patientPronounsOnRecord\", ld.sample(pronounsList));",
											"pm.environment.set(\"patientPronounsOffRecord\", ld.sample(pronounsList));",
											"pm.environment.set(\"patientSex\", ld.sample(sexList));",
											"pm.environment.set(\"patientTimezone\", ld.sample(timezonesList));",
											"pm.environment.set(\"patientContactPreferences\", JSON.stringify(ld.sampleSize(contactPreferences, 2).sort()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7872da8b-4e60-4647-8304-4da56cdc9ec8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"{{patientFirstName}}\",\n    \"lastName\": \"{{patientLastName}}\",\n    \"dateOfBirth\": \"{{patientDateOfBirth}}\",\n    \"email\": \"{{patientEmail}}\",\n    \"contactPreferences\": {{patientContactPreferences}},\n    \"ethnicities\": {{patientEthnicities}},\n    \"phoneNumber\": \"{{patientPhoneNumber}}\",\n    \"chosenName\": \"{{patientChosenName}}\",\n    \"languages\": {{patientLanguages}},\n    \"genderOnRecord\": \"{{patientGenderOnRecord}}\",\n    \"genderOffRecord\": \"{{patientGenderOffRecord}}\",\n    \"pronounsOnRecord\": \"{{patientPronounsOnRecord}}\",\n    \"pronounsOffRecord\": \"{{patientPronounsOffRecord}}\",\n    \"sex\": \"{{patientSex}}\",\n    \"timezone\": \"{{patientTimezone}}\",\n    \"latitude\": \"{{patientLatitude}}\",\n    \"longitude\": \"{{patientLongitude}}\",\n    \"addressLine1\": \"{{patientAddressLine1}}\",\n    \"addressLine2\": \"{{patientAddressLine2}}\",\n    \"city\": \"{{patientCity}}\",\n    \"country\": \"{{patientCountry}}\",\n    \"state\": \"{{patientState}}\",\n    \"zip\": \"{{patientZip}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/patients",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"patients"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get providers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d2276ad2-fcbf-4c98-9007-10691b871ea0",
										"exec": [
											"let responseJson = pm.response.json();",
											"let ld = require('lodash');",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"})",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"",
											"pm.test(\"Verify providers by page size and page number\", () => {",
											"    var pageSize = pm.request.url.query.get(\"page-size\");",
											"    pm.expect(responseJson.providers.length.toString()).to.eql(pageSize);",
											"});",
											"//Fetch providers's externalIds and and store them in an arry of objects and randomly picks one to pass in the request. ",
											"let userIds = responseJson.providers;",
											"let arryOfProviderIds = userIds.map(tool => tool.userId);",
											"// One random externalId for admission team",
											"let random = Math.floor(Math.random() * arryOfProviderIds.length);",
											"let providerExternalIdForAdmissionTeam = arryOfProviderIds[random];",
											"",
											"pm.environment.set(\"providerExternalIdForAdmissionTeam\", providerExternalIdForAdmissionTeam);",
											"//pm.environment.set(\"providerExternalIdForAdmissionTeam\", ld.sample(arryOfProviderIds));",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "15aaafea-afb7-46fd-9228-b236e40b4dfb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "96dc1cf1-5133-4874-bd20-41b70f0db8db",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/providers?page-size=20&page-number=1",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"providers"
									],
									"query": [
										{
											"key": "page-size",
											"value": "20"
										},
										{
											"key": "page-number",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create admission team",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e8a14211-3f5a-4ef1-9579-2c365825bbee",
										"exec": [
											"",
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"",
											"pm.test(\"Response has a JSON body\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"pm.test(\"Verify id is generated\", function () {",
											"    pm.expect(jsonData.id).length.greaterThan(0);",
											"});",
											"",
											"pm.environment.set(\"admissionTeamExternalId\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3b2d0a8a-edca-4a3e-924f-3d00a39482b0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"patientExternalId\": \"{{patientId}}\",\n    \"type\": \"admissions\",\n    \"providers\": [\n        \"{{providerExternalIdForCareTeam}}\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/care-team",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"care-team"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify admission team creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c04da61d-da0d-4f70-a172-9c9d46b3e986",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"pm.test(\"Response has a JSON body\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"// pm.test(\"Verify care team details\", function () {",
											"//  tests[\"Patient# \" + (i + 1) + \" has care team member as \" + jsonData['data'][i]['careTeamMembers'][0].providerFirstName] = pm.expect(jsonData['data'][i]['careTeamMembers'][0].providerFirstName).to.include(\"Mayank\");",
											"//         }});",
											"",
											"let admissionTeamExternalID = jsonData.admissionsTeam.externalId;",
											"",
											"pm.test(\"Verify admission is created\", function () {",
											"    pm.expect(jsonData.admissionsTeam.externalId).to.eql(admissionTeamExternalID);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3af59282-8305-40ec-83c6-496a3044f111",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{host}}/users/care-team/{{patientId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"care-team",
										"{{patientId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get providers update the team",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c0bb42c4-8302-4293-bf4c-358d7417d914",
										"exec": [
											"let responseJson = pm.response.json();",
											"let ld = require('lodash');",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"})",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"",
											"pm.test(\"Verify providers by page size and page number\", () => {",
											"    var pageSize = pm.request.url.query.get(\"page-size\");",
											"    pm.expect(responseJson.providers.length.toString()).to.eql(pageSize);",
											"});",
											"//Fetch providers's externalIds and and store them in an arry of objects and randomly picks one to pass in the request. ",
											"let userIds = responseJson.providers;",
											"let arryOfProviderIds = userIds.map(tool => tool.userId);",
											"// One random externalId for admission team",
											"let random = Math.floor(Math.random() * arryOfProviderIds.length);",
											"let providerExternalIdForAdmissionTeam = arryOfProviderIds[random];",
											"",
											"pm.environment.set(\"providerExternalIdForAdmissionTeam\", providerExternalIdForAdmissionTeam);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3cd5eb05-b0b7-45df-a4ad-57c3b2382014",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "583ee3f9-4efd-4966-bb0d-e832887c26c2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/providers?page-size=10&page-number=1",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"providers"
									],
									"query": [
										{
											"key": "page-size",
											"value": "10"
										},
										{
											"key": "page-number",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update admission team",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3fc5d078-a133-4758-a7b9-a0017dfad60e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "dbb55ad2-c6d7-44ae-b906-beefab462e6e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "8f87f9dc-84b2-4343-8631-e9da797672d3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"providers\": [\n        \"{{providerExternalIdForAdmissionTeam}}\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/care-team/{{admissionTeamExternalId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"care-team",
										"{{admissionTeamExternalId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify admission team update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09c805aa-9895-4892-b19e-8d49fe3f29f6",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"pm.test(\"Response has a JSON body\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"// pm.test(\"Verify care team details\", function () {",
											"//  tests[\"Patient# \" + (i + 1) + \" has care team member as \" + jsonData['data'][i]['careTeamMembers'][0].providerFirstName] = pm.expect(jsonData['data'][i]['careTeamMembers'][0].providerFirstName).to.include(\"Mayank\");",
											"//         }});",
											"",
											"pm.test(\"Verify admission and care team\", function () {",
											"    pm.expect(jsonData.admissionsTeam.providers[0].providerExternalId).to.eql(pm.environment.get(\"providerExternalIdForAdmissionTeam\"));",
											"    });",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3ed558cc-60af-4394-9d13-89ac0ecf9857",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{host}}/users/care-team/{{patientId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"care-team",
										"{{patientId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get providers-to verify the same provider is not getting added multiple times",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "435ce2f2-5134-4c62-af6f-c5d7a4060c5b",
										"exec": [
											"let responseJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"})",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"",
											"pm.test(\"Verify providers by page size and page number\", () => {",
											"    var pageSize = pm.request.url.query.get(\"page-size\");",
											"    pm.expect(responseJson.providers.length.toString()).to.eql(pageSize);",
											"});",
											"//Fetch providers's externalIds and and store them in an arry of objects and randomly picks one to pass in the request. ",
											"let userIds = responseJson.providers;",
											"let arryOfProviderIds = userIds.map(tool => tool.userId);",
											"// One random externalId for admission team",
											"let random = Math.floor(Math.random() * arryOfProviderIds.length);",
											"let providerExternalIdForAdmissionTeam = arryOfProviderIds[random];",
											"",
											"pm.environment.set(\"providerExternalIdForAdmissionTeam\", providerExternalIdForAdmissionTeam);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1afc454b-3244-4bca-9701-91c15390d039",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "9e648a93-939a-4283-a063-49cb54fedb0a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/providers?page-size=10&page-number=1",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"providers"
									],
									"query": [
										{
											"key": "page-size",
											"value": "10"
										},
										{
											"key": "page-number",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update admission-PassTheSameProviderIdMoreThenOneTime",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "76ee6502-8575-4197-88cd-ee8a16618083",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "66452dd5-f1b0-4c26-826c-eb5558c34368",
										"exec": [
											"",
											"// If the user pass the same provider more than one to add to the admission team, the request should fail and return 500.",
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ad76515d-8e37-4c7c-9aaf-446e8d6f3198",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"providers\": [\n        \"{{providerExternalIdForAdmissionTeam}}\", \"{{providerExternalIdForAdmissionTeam}}\", \"{{providerExternalIdForAdmissionTeam}}\" \n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/care-team/{{admissionTeamExternalId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"care-team",
										"{{admissionTeamExternalId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify admission team - verify the same proivder is not added multiple time",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5caf1584-fde9-406e-a198-59d38afff44f",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"pm.test(\"Response has a JSON body\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"// pm.test(\"Verify care team details\", function () {",
											"//  tests[\"Patient# \" + (i + 1) + \" has care team member as \" + jsonData['data'][i]['careTeamMembers'][0].providerFirstName] = pm.expect(jsonData['data'][i]['careTeamMembers'][0].providerFirstName).to.include(\"Mayank\");",
											"//         }});",
											"",
											"let admissionTeamExternalId = jsonData.admissionsTeam.externalId;",
											"pm.test(\"Verify admission team\", function () {",
											"    pm.expect(jsonData.admissionsTeam.externalId).to.eql(admissionTeamExternalId);",
											"    });",
											"//It will stor the proivder(s) ids in array of Objects.",
											"let providerIds = jsonData.admissionsTeam.providers;",
											"let arryOfProvidersIds = providerIds.map (tool => tool.providerExternalId);",
											"let valadation = false; // We asume that there is no duplicate provider is added.",
											"",
											"let i;",
											"let j;",
											"",
											"// The loops will compare the proivders's Ids and if found duplicate provider, then it will change the valadation to true and the test will fail. ",
											"for (i = 0; i < arryOfProvidersIds.length; i++) {",
											"for (j = i+1; j < arryOfProvidersIds.length; j++) {",
											"if (arryOfProvidersIds[i]===arryOfProvidersIds[j]){",
											"    valadation = true;",
											"    break;",
											"        }",
											"    }",
											"}",
											"",
											"pm.environment.set(\"valadation\", valadation);",
											"",
											"pm.test(\"Verify there is no duplicate proivder is recorded\", function () {",
											"      pm.expect(jsonData.valadation).to.eql(pm.environment.get(false));",
											"    });",
											"   console.log (valadation); ",
											"",
											" ",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4378abfb-b720-4dde-bfc8-8797a3289e56",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{host}}/users/care-team/{{patientId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"care-team",
										"{{patientId}}"
									]
								}
							},
							"response": []
						}
					],
					"id": "70169b57-63f7-4fad-a40b-ee2879b14bf4"
				},
				{
					"name": "Care team",
					"item": [
						{
							"name": "Add Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc563330-c384-4e10-8b58-6256f292598f",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"",
											"pm.test(\"Response has a JSON body\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"pm.test(\"Verify id is generated\", function () {",
											"    pm.expect(jsonData.id).length.greaterThan(0);",
											"});",
											"",
											"pm.environment.set(\"patientId\", jsonData.id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4a8fa306-92f2-40f0-a384-f3c1f65aa78e",
										"exec": [
											"let ld = require('lodash');",
											"",
											"let gendersList = [",
											"    \"Cis-gender male\",",
											"    \"Cis-gender female\",",
											"    \"Non-binary\",",
											"    \"Other\",",
											"    \"Unknown\",",
											"    \"Transgender male\",",
											"    \"Transgender female\"",
											"];",
											"",
											"let pronounsList = [",
											"    \"He/Him/His\",",
											"    \"She/Her/Hers\",",
											"    \"They/Them/Theirs\",",
											"    \"Other\"",
											"];",
											"",
											"let ethnicitiesList = [",
											"    \"Asian\",",
											"    \"Black/African American\",",
											"    \"White/Caucasian\",",
											"    \"Hispanic/Latinx\",",
											"    \"Native American, Indian American, or Alaska Native\",",
											"    \"Native Hawaiian or other Pacific Islander\",",
											"    \"Middle Eastern or North African\",",
											"    \"Prefer not to answer\",",
											"    \"Other\"",
											"];",
											"",
											"let languagesList = [",
											"    \"English\",",
											"    \"Spanish\",",
											"    \"Chinese\",",
											"    \"French\",",
											"    \"Tagalog\",",
											"    \"Vietnamese\",",
											"    \"Korean\",",
											"    \"German\",",
											"    \"Russian\",",
											"    \"Italian\",",
											"    \"Portuguese\",",
											"    \"Polish\",",
											"    \"Japanese\",",
											"    \"Persian\",",
											"    \"Greek\",",
											"    \"Serbo-Croatian\",",
											"    \"Armenian\",",
											"    \"Yiddish\",",
											"    \"American Sign Language (ASL)\"",
											"];",
											"",
											"let sexList = [",
											"    \"Male\",",
											"    \"Female\"",
											"];",
											"",
											"let timezonesList = [",
											"    \"Hawaii Standard Time\",",
											"    \"Hawaii-Aleutian Time\",",
											"    \"Alaska Time\",",
											"    \"Pacific Time\",",
											"    \"Arizona\",",
											"    \"Mountain Time\",",
											"    \"Central Time\",",
											"    \"Eastern Time\"",
											"];",
											"",
											"let contactPreferences = [\"Email\", \"No preference\", \"Phone\", \"Unknown\"];",
											"",
											"let statesList = [\"AK\", \"AL\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"DC\", \"FL\", \"GA\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"OH\", \"OK\", \"OR\", \"PA\", \"PR\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\", \"Outside US\", \"Unknown\"];",
											"",
											"let addressLine2List = [\"Apt 1\", \"Apt 2\", \"Apt 3\", \"Unit #1\", \"Unit #2\", \"Unit #3\", \"Apt 2L\", \"Apt 2R\"];",
											"",
											"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
											"let lastName = pm.variables.replaceIn('{{$randomLastName}}');",
											"let chosenName = pm.variables.replaceIn('{{$randomFirstName}}');",
											"let email = \"qa\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
											"let zip = Math.floor(10000 + Math.random() * 90000);",
											"",
											"//Generate random Date of Birth in YYYY-MM-DD Format",
											"function randomDate(start, end) {",
											"    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));",
											"}",
											"let date = randomDate(new Date(1990, 00, 01), new Date());",
											"let dateOfBirth = date.getFullYear() + '-' + (\"0\" + (date.getMonth() + 1)).slice(-2) + '-' + (\"0\" + date.getDate()).slice(-2);",
											"",
											"//Save the variables to be used in next request for validation",
											"pm.environment.set(\"patientFirstName\", firstName);",
											"pm.environment.set(\"patientLastName\", lastName);",
											"pm.environment.set(\"patientEmail\", email);",
											"pm.environment.set(\"patientPhoneNumber\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));",
											"pm.environment.set(\"patientChosenName\", chosenName);",
											"pm.environment.set(\"patientDateOfBirth\", dateOfBirth);",
											"pm.environment.set(\"patientAddressLine1\", pm.variables.replaceIn('{{$randomStreetAddress}}'));",
											"pm.environment.set(\"patientAddressLine2\", ld.sample(addressLine2List));",
											"pm.environment.set(\"patientCity\", pm.variables.replaceIn('{{$randomCity}}'));",
											"pm.environment.set(\"patientState\", ld.sample(statesList));",
											"pm.environment.set(\"patientCountry\", \"US\");",
											"pm.environment.set(\"patientZip\", zip.toString());",
											"pm.environment.set(\"patientLatitude\", pm.variables.replaceIn('{{$randomLatitude}}'));",
											"pm.environment.set(\"patientLongitude\", pm.variables.replaceIn('{{$randomLongitude}}'));",
											"pm.environment.set(\"patientEthnicities\", JSON.stringify(ld.sampleSize(ethnicitiesList, 2).sort()));",
											"pm.environment.set(\"patientLanguages\", JSON.stringify(ld.sampleSize(languagesList, 2).sort()));",
											"pm.environment.set(\"patientGenderOnRecord\", ld.sample(gendersList));",
											"pm.environment.set(\"patientGenderOffRecord\", ld.sample(gendersList));",
											"pm.environment.set(\"patientPronounsOnRecord\", ld.sample(pronounsList));",
											"pm.environment.set(\"patientPronounsOffRecord\", ld.sample(pronounsList));",
											"pm.environment.set(\"patientSex\", ld.sample(sexList));",
											"pm.environment.set(\"patientTimezone\", ld.sample(timezonesList));",
											"pm.environment.set(\"patientContactPreferences\", JSON.stringify(ld.sampleSize(contactPreferences, 2).sort()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "1dbfb632-e6e6-4c72-9656-9e72020bc44a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"{{patientFirstName}}\",\n    \"lastName\": \"{{patientLastName}}\",\n    \"dateOfBirth\": \"{{patientDateOfBirth}}\",\n    \"email\": \"{{patientEmail}}\",\n    \"contactPreferences\": {{patientContactPreferences}},\n    \"ethnicities\": {{patientEthnicities}},\n    \"phoneNumber\": \"{{patientPhoneNumber}}\",\n    \"chosenName\": \"{{patientChosenName}}\",\n    \"languages\": {{patientLanguages}},\n    \"genderOnRecord\": \"{{patientGenderOnRecord}}\",\n    \"genderOffRecord\": \"{{patientGenderOffRecord}}\",\n    \"pronounsOnRecord\": \"{{patientPronounsOnRecord}}\",\n    \"pronounsOffRecord\": \"{{patientPronounsOffRecord}}\",\n    \"sex\": \"{{patientSex}}\",\n    \"timezone\": \"{{patientTimezone}}\",\n    \"latitude\": \"{{patientLatitude}}\",\n    \"longitude\": \"{{patientLongitude}}\",\n    \"addressLine1\": \"{{patientAddressLine1}}\",\n    \"addressLine2\": \"{{patientAddressLine2}}\",\n    \"city\": \"{{patientCity}}\",\n    \"country\": \"{{patientCountry}}\",\n    \"state\": \"{{patientState}}\",\n    \"zip\": \"{{patientZip}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/patients",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"patients"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get providers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7d6c5cfc-d431-4389-9a31-300e077dc56a",
										"exec": [
											"let responseJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"})",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"",
											"pm.test(\"Verify providers by page size and page number\", () => {",
											"    var pageSize = pm.request.url.query.get(\"page-size\");",
											"    pm.expect(responseJson.providers.length.toString()).to.eql(pageSize);",
											"});",
											"//Fetch providers's externalIds and and store them in an arry of objects and randomly picks one to pass in the request. ",
											"let userIds = responseJson.providers;",
											"let arryCareTeamMemberIds = userIds.map (tool => tool.userId);",
											"// One random externalId for care team",
											"let randomForCare = Math.floor(Math.random() * arryCareTeamMemberIds.length);",
											"let providerExternalIdForCareTeam = arryCareTeamMemberIds[randomForCare];",
											"",
											"pm.environment.set(\"providerExternalIdForCareTeam\", providerExternalIdForCareTeam);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "064128c6-1201-4c99-969c-bddec149f834",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c0c39e82-f6ef-4809-ab93-f6230ea7a736",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/providers?page-size=20&page-number=1",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"providers"
									],
									"query": [
										{
											"key": "page-size",
											"value": "20"
										},
										{
											"key": "page-number",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create care team",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "daa34893-46f3-4a93-ba7c-c0edff643a8f",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"",
											"pm.test(\"Response has a JSON body\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"pm.test(\"Verify id is generated\", function () {",
											"    pm.expect(jsonData.id).length.greaterThan(0);",
											"});",
											"",
											"pm.environment.set(\"careTeamExternalId\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "1bbed26e-897a-4e76-9aad-81decc5d68f1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"patientExternalId\": \"{{patientId}}\",\n    \"type\": \"care\",\n    \"providers\": [\n        \"{{providerExternalIdForCareTeam}}\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/care-team",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"care-team"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify care team creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a706aee1-b37c-4751-aafb-6169ebe9dd7e",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"pm.test(\"Response has a JSON body\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"// pm.test(\"Verify care team details\", function () {",
											"//  tests[\"Patient# \" + (i + 1) + \" has care team member as \" + jsonData['data'][i]['careTeamMembers'][0].providerFirstName] = pm.expect(jsonData['data'][i]['careTeamMembers'][0].providerFirstName).to.include(\"Mayank\");",
											"//         }});",
											"",
											"let = careTeamExternalId = jsonData.careTeam.externalId;",
											"pm.test(\"Verify care team is created\", function () {",
											"  pm.expect(jsonData.careTeam.externalId).to.eql(careTeamExternalId);",
											"",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2369c60c-bb84-49a4-86aa-28ca6d35ea9b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{host}}/users/care-team/{{patientId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"care-team",
										"{{patientId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get providers to update care team",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8eef2190-0d08-477e-b4b9-17843fac11c7",
										"exec": [
											"let responseJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"})",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"",
											"pm.test(\"Verify providers by page size and page number\", () => {",
											"    var pageSize = pm.request.url.query.get(\"page-size\");",
											"    pm.expect(responseJson.providers.length.toString()).to.eql(pageSize);",
											"});",
											"//Fetch providers's externalIds and and store them in an arry of objects and randomly picks one to pass in the request. ",
											"let userIds = responseJson.providers;",
											"let arryCareTeamMemberIds = userIds.map (tool => tool.userId);",
											"// One random externalId for care team",
											"let randomForCare = Math.floor(Math.random() * arryCareTeamMemberIds.length);",
											"let providerExternalIdForCareTeam = arryCareTeamMemberIds[randomForCare];",
											"",
											"pm.environment.set(\"providerExternalIdForCareTeam\", providerExternalIdForCareTeam);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "09780ddf-f581-4cec-9d87-b0bc0ebbd90f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "6d0ebeac-3c33-4ea8-974b-99ecfc6a2175",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/providers?page-size=20&page-number=1",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"providers"
									],
									"query": [
										{
											"key": "page-size",
											"value": "20"
										},
										{
											"key": "page-number",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update care team",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4ced1987-df4e-4b8f-9198-9998336145c8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d608250a-50c8-4b22-9ac5-dd78e1b9b506",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a9d493f5-bc7d-40bf-88c0-7bb02f2f9ac1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"providers\": [\n        \"{{providerExternalIdForCareTeam}}\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/care-team/{{careTeamExternalId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"care-team",
										"{{careTeamExternalId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify care team is updated",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dca3845b-d4cb-4d10-99fb-0d0d9bdc05d9",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"pm.test(\"Response has a JSON body\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"// pm.test(\"Verify care team details\", function () {",
											"//  tests[\"Patient# \" + (i + 1) + \" has care team member as \" + jsonData['data'][i]['careTeamMembers'][0].providerFirstName] = pm.expect(jsonData['data'][i]['careTeamMembers'][0].providerFirstName).to.include(\"Mayank\");",
											"//         }});",
											"",
											"pm.test(\"Verify care team\", function () {",
											"       pm.expect(jsonData.careTeam.providers[0].providerExternalId).to.eql(pm.environment.get(\"providerExternalIdForCareTeam\"));",
											"",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "eb023d1d-ae73-4b98-9db2-7163a91e2ba9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{host}}/users/care-team/{{patientId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"care-team",
										"{{patientId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get providers to verify duplicate providers is not getting added",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bfa94dbb-a655-456f-91ee-40b5e57f4976",
										"exec": [
											"let responseJson = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"})",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"",
											"pm.test(\"Verify providers by page size and page number\", () => {",
											"    var pageSize = pm.request.url.query.get(\"page-size\");",
											"    pm.expect(responseJson.providers.length.toString()).to.eql(pageSize);",
											"});",
											"//Fetch providers's externalIds and and store them in an arry of objects and randomly picks one to pass in the request. ",
											"let userIds = responseJson.providers;",
											"let arryCareTeamMemberIds = userIds.map (tool => tool.userId);",
											"// One random externalId for care team",
											"let randomForCare = Math.floor(Math.random() * arryCareTeamMemberIds.length);",
											"let providerExternalIdForCareTeam = arryCareTeamMemberIds[randomForCare];",
											"",
											"pm.environment.set(\"providerExternalIdForCareTeam\", providerExternalIdForCareTeam);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4e81603e-acd8-4f4b-9a4f-6d0457f3add6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5688e2a7-6d9a-4aab-b4b0-fa922e86cbb5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/providers?page-size=20&page-number=1",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"providers"
									],
									"query": [
										{
											"key": "page-size",
											"value": "20"
										},
										{
											"key": "page-number",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update care team",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3c4965ed-52db-4743-b98f-fa16a0968d2f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f6a5a14e-eb14-40a8-810b-b6bbe6960b40",
										"exec": [
											"// If the user pass the same provider more than one to add to the Care team, the request should fail and return 500.",
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "85bc90f6-8026-45cc-a85d-c9058fa334e0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"providers\": [\n        \"{{providerExternalIdForCareTeam}}\",\"{{providerExternalIdForCareTeam}}\",\"{{providerExternalIdForCareTeam}}\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/care-team/{{careTeamExternalId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"care-team",
										"{{careTeamExternalId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify care team is doesn't have duplicate member",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09352cb3-eced-4ca9-8b9a-f48bd1ce3a13",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											"pm.test(\"Response has a JSON body\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"",
											"// pm.test(\"Verify care team details\", function () {",
											"//  tests[\"Patient# \" + (i + 1) + \" has care team member as \" + jsonData['data'][i]['careTeamMembers'][0].providerFirstName] = pm.expect(jsonData['data'][i]['careTeamMembers'][0].providerFirstName).to.include(\"Mayank\");",
											"//         }});",
											"",
											"let careTeam = jsonData.careTeam.externalId;",
											"pm.test(\"Verify Care team\", function () {",
											"    pm.expect(jsonData.careTeam.externalId).to.eql(careTeam);",
											"",
											"});",
											"",
											"let providerIds = jsonData.careTeam.providers;",
											"let arryOfProvidersIds = providerIds.map(tool => tool.providerExternalId);",
											"let valadation = false; // We asume that there is no duplicate provider is added.",
											"",
											"let i;",
											"let j;",
											"",
											"// The loops will compare the proivders's Ids and if found duplicate provider, then it will change the valadation to true and the test will fail. ",
											"for (i = 0; i < arryOfProvidersIds.length; i++) {",
											"    for (j = i + 1; j < arryOfProvidersIds.length; j++) {",
											"        if (arryOfProvidersIds[i] === arryOfProvidersIds[j]) {",
											"            valadation = true;",
											"            break;",
											"        }",
											"    }",
											"}",
											"",
											"pm.test(\"Verify there is no duplicate proivder is recorded\", function () {",
											"    pm.expect(valadation).to.be.eql(false);",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "aa5bed2c-e7d9-4864-85d4-496a55c0535d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{host}}/users/care-team/{{patientId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"care-team",
										"{{patientId}}"
									]
								}
							},
							"response": []
						}
					],
					"id": "250fac93-3b63-43ef-bd23-55059c8b3bf4"
				},
				{
					"name": "V2",
					"item": [
						{
							"name": "Admissions team",
							"item": [
								{
									"name": "Add Patient",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ca94b979-e82f-4481-8698-49506ef267fc",
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 4000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(4000);",
													"});",
													"",
													"pm.test(\"Response has a JSON body\", function () {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Content-Type header is application/json\", () => {",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
													"});",
													"",
													"pm.test(\"Verify id is generated\", function () {",
													"    pm.expect(jsonData.id).length.greaterThan(0);",
													"});",
													"",
													"pm.environment.set(\"patientId\", jsonData.id);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "aefe3ed8-30a7-43fa-bebe-bd2ee35be02c",
												"exec": [
													"let ld = require('lodash');",
													"",
													"let gendersList = [",
													"    \"Cis-gender male\",",
													"    \"Cis-gender female\",",
													"    \"Non-binary\",",
													"    \"Other\",",
													"    \"Unknown\",",
													"    \"Transgender male\",",
													"    \"Transgender female\"",
													"];",
													"",
													"let pronounsList = [",
													"    \"He/Him/His\",",
													"    \"She/Her/Hers\",",
													"    \"They/Them/Theirs\",",
													"    \"Other\"",
													"];",
													"",
													"let ethnicitiesList = [",
													"    \"Asian\",",
													"    \"Black/African American\",",
													"    \"White/Caucasian\",",
													"    \"Hispanic/Latinx\",",
													"    \"Native American, Indian American, or Alaska Native\",",
													"    \"Native Hawaiian or other Pacific Islander\",",
													"    \"Middle Eastern or North African\",",
													"    \"Prefer not to answer\",",
													"    \"Other\"",
													"];",
													"",
													"let languagesList = [",
													"    \"English\",",
													"    \"Spanish\",",
													"    \"Chinese\",",
													"    \"French\",",
													"    \"Tagalog\",",
													"    \"Vietnamese\",",
													"    \"Korean\",",
													"    \"German\",",
													"    \"Russian\",",
													"    \"Italian\",",
													"    \"Portuguese\",",
													"    \"Polish\",",
													"    \"Japanese\",",
													"    \"Persian\",",
													"    \"Greek\",",
													"    \"Serbo-Croatian\",",
													"    \"Armenian\",",
													"    \"Yiddish\",",
													"    \"American Sign Language (ASL)\"",
													"];",
													"",
													"let sexList = [",
													"    \"Male\",",
													"    \"Female\"",
													"];",
													"",
													"let timezonesList = [",
													"    \"Hawaii Standard Time\",",
													"    \"Hawaii-Aleutian Time\",",
													"    \"Alaska Time\",",
													"    \"Pacific Time\",",
													"    \"Arizona\",",
													"    \"Mountain Time\",",
													"    \"Central Time\",",
													"    \"Eastern Time\"",
													"];",
													"",
													"let contactPreferences = [\"Email\", \"No preference\", \"Phone\", \"Unknown\"];",
													"",
													"let statesList = [\"AK\", \"AL\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"DC\", \"FL\", \"GA\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"OH\", \"OK\", \"OR\", \"PA\", \"PR\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\", \"Outside US\", \"Unknown\"];",
													"",
													"let addressLine2List = [\"Apt 1\", \"Apt 2\", \"Apt 3\", \"Unit #1\", \"Unit #2\", \"Unit #3\", \"Apt 2L\", \"Apt 2R\"];",
													"",
													"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
													"let lastName = pm.variables.replaceIn('{{$randomLastName}}');",
													"let chosenName = pm.variables.replaceIn('{{$randomFirstName}}');",
													"let email = \"qa\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
													"let zip = Math.floor(10000 + Math.random() * 90000);",
													"",
													"//Generate random Date of Birth in YYYY-MM-DD Format",
													"function randomDate(start, end) {",
													"    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));",
													"}",
													"let date = randomDate(new Date(1990, 00, 01), new Date());",
													"let dateOfBirth = date.getFullYear() + '-' + (\"0\" + (date.getMonth() + 1)).slice(-2) + '-' + (\"0\" + date.getDate()).slice(-2);",
													"",
													"//Save the variables to be used in next request for validation",
													"pm.environment.set(\"patientFirstName\", firstName);",
													"pm.environment.set(\"patientLastName\", lastName);",
													"pm.environment.set(\"patientEmail\", email);",
													"pm.environment.set(\"patientPhoneNumber\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));",
													"pm.environment.set(\"patientChosenName\", chosenName);",
													"pm.environment.set(\"patientDateOfBirth\", dateOfBirth);",
													"pm.environment.set(\"patientAddressLine1\", pm.variables.replaceIn('{{$randomStreetAddress}}'));",
													"pm.environment.set(\"patientAddressLine2\", ld.sample(addressLine2List));",
													"pm.environment.set(\"patientCity\", pm.variables.replaceIn('{{$randomCity}}'));",
													"pm.environment.set(\"patientState\", ld.sample(statesList));",
													"pm.environment.set(\"patientCountry\", \"US\");",
													"pm.environment.set(\"patientZip\", zip.toString());",
													"pm.environment.set(\"patientLatitude\", pm.variables.replaceIn('{{$randomLatitude}}'));",
													"pm.environment.set(\"patientLongitude\", pm.variables.replaceIn('{{$randomLongitude}}'));",
													"pm.environment.set(\"patientEthnicities\", JSON.stringify(ld.sampleSize(ethnicitiesList, 2).sort()));",
													"pm.environment.set(\"patientLanguages\", JSON.stringify(ld.sampleSize(languagesList, 2).sort()));",
													"pm.environment.set(\"patientGenderOnRecord\", ld.sample(gendersList));",
													"pm.environment.set(\"patientGenderOffRecord\", ld.sample(gendersList));",
													"pm.environment.set(\"patientPronounsOnRecord\", ld.sample(pronounsList));",
													"pm.environment.set(\"patientPronounsOffRecord\", ld.sample(pronounsList));",
													"pm.environment.set(\"patientSex\", ld.sample(sexList));",
													"pm.environment.set(\"patientTimezone\", ld.sample(timezonesList));",
													"pm.environment.set(\"patientContactPreferences\", JSON.stringify(ld.sampleSize(contactPreferences, 2).sort()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "8c5f2ae7-d186-4e06-addf-23096259e53d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test-token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"{{patientFirstName}}\",\n    \"lastName\": \"{{patientLastName}}\",\n    \"dateOfBirth\": \"{{patientDateOfBirth}}\",\n    \"email\": \"{{patientEmail}}\",\n    \"contactPreferences\": {{patientContactPreferences}},\n    \"ethnicities\": {{patientEthnicities}},\n    \"phoneNumber\": \"{{patientPhoneNumber}}\",\n    \"chosenName\": \"{{patientChosenName}}\",\n    \"languages\": {{patientLanguages}},\n    \"genderOnRecord\": \"{{patientGenderOnRecord}}\",\n    \"genderOffRecord\": \"{{patientGenderOffRecord}}\",\n    \"pronounsOnRecord\": \"{{patientPronounsOnRecord}}\",\n    \"pronounsOffRecord\": \"{{patientPronounsOffRecord}}\",\n    \"sex\": \"{{patientSex}}\",\n    \"timezone\": \"{{patientTimezone}}\",\n    \"latitude\": \"{{patientLatitude}}\",\n    \"longitude\": \"{{patientLongitude}}\",\n    \"addressLine1\": \"{{patientAddressLine1}}\",\n    \"addressLine2\": \"{{patientAddressLine2}}\",\n    \"city\": \"{{patientCity}}\",\n    \"country\": \"{{patientCountry}}\",\n    \"state\": \"{{patientState}}\",\n    \"zip\": \"{{patientZip}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users/patients",
											"host": [
												"{{host}}"
											],
											"path": [
												"users",
												"patients"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get providers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "06048f81-2c77-4ac3-a7e9-c87a7e9c9e2a",
												"exec": [
													"let responseJson = pm.response.json();",
													"let ld = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"})",
													"pm.test(\"Response time is less than 4000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(4000);",
													"});",
													"",
													"pm.test(\"Verify providers by page size and page number\", () => {",
													"    var pageSize = pm.request.url.query.get(\"page-size\");",
													"    pm.expect(responseJson.providers.length.toString()).to.eql(pageSize);",
													"});",
													"//Fetch providers's externalIds and and store them in an arry of objects and randomly picks one to pass in the request. ",
													"let userIds = responseJson.providers;",
													"let arryOfProviderIds = userIds.map(tool => tool.userId);",
													"// One random externalId for admission team",
													"let random = Math.floor(Math.random() * arryOfProviderIds.length);",
													"let providerExternalIdForAdmissionTeam = arryOfProviderIds[random];",
													"",
													"pm.environment.set(\"providerExternalIdForAdmissionTeam1\", providerExternalIdForAdmissionTeam);",
													"//pm.environment.set(\"providerExternalIdForAdmissionTeam\", ld.sample(arryOfProviderIds));",
													"console.log(\"providerExternalIdForAdmissionTeam: \"+providerExternalIdForAdmissionTeam);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0d5169f8-90ab-4fb7-aaed-9995c568d440",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "0353d2e9-0894-4582-8038-1bd5199cf281",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test-token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users/providers?page-size=20&page-number=1",
											"host": [
												"{{host}}"
											],
											"path": [
												"users",
												"providers"
											],
											"query": [
												{
													"key": "page-size",
													"value": "20"
												},
												{
													"key": "page-number",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create admission team - Negative case",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eb943be5-fb98-47b5-9664-cc88a8b0259f",
												"exec": [
													"",
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response time is less than 4000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(4000);",
													"});",
													"",
													"pm.test(\"Response has a JSON body\", function () {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Content-Type header is application/json\", () => {",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
													"});",
													"",
													"pm.test(\"Verify the error message\", () => {",
													"    pm.expect(jsonData._embedded.errors[0].message).to.contains(\"problem: isVisibleForPatientChat is marked non-null but is null\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d3c58fd2-95b0-4768-8340-855e3d0e2e1a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test-token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"patientExternalId\": \"{{patientId}}\",\n    \"type\": \"admissions\",\n    \"providers\": [\n        {\n            \"externalId\": \"{{providerExternalIdForAdmissionTeam1}}\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users/care-team/v2",
											"host": [
												"{{host}}"
											],
											"path": [
												"users",
												"care-team",
												"v2"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create admission team",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7247772d-e573-4aa2-8f0a-a4e829645ff8",
												"exec": [
													"",
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 4000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(4000);",
													"});",
													"",
													"pm.test(\"Response has a JSON body\", function () {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Content-Type header is application/json\", () => {",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
													"});",
													"",
													"pm.test(\"Verify id is generated\", function () {",
													"    pm.expect(jsonData.id).length.greaterThan(0);",
													"});",
													"",
													"pm.environment.set(\"admissionTeamExternalId\", jsonData.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c1bc0f00-de3a-469b-9a27-b166f9bb263f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test-token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"patientExternalId\": \"{{patientId}}\",\n    \"type\": \"admissions\",\n    \"providers\": [\n        {\n            \"externalId\": \"{{providerExternalIdForAdmissionTeam1}}\",\n            \"isVisibleForPatientChat\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users/care-team/v2",
											"host": [
												"{{host}}"
											],
											"path": [
												"users",
												"care-team",
												"v2"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify admission team creation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cb6ad4cc-f495-4c30-9455-025b4169de63",
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Response time is less than 4000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(4000);",
													"});",
													"pm.test(\"Response has a JSON body\", function () {",
													"    pm.response.to.be.json;",
													"});",
													"pm.test(\"Content-Type header is application/json\", () => {",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
													"});",
													"",
													"// pm.test(\"Verify care team details\", function () {",
													"//  tests[\"Patient# \" + (i + 1) + \" has care team member as \" + jsonData['data'][i]['careTeamMembers'][0].providerFirstName] = pm.expect(jsonData['data'][i]['careTeamMembers'][0].providerFirstName).to.include(\"Mayank\");",
													"//         }});",
													"",
													"pm.test(\"Verify admission\", function () {",
													"    pm.expect(jsonData.admissionsTeam.providers[0].providerExternalId).to.eql(pm.environment.get(\"providerExternalIdForAdmissionTeam1\"));",
													"});",
													"",
													"pm.test(\"Verify provider visibleForPatientChat flag is true\", function () {",
													"    pm.expect(jsonData.admissionsTeam.providers[0].visibleForPatientChat).to.eql(true);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "4c22236e-2a76-4f9b-a369-ce651b45f1a2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test-token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{host}}/users/care-team/{{patientId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"users",
												"care-team",
												"{{patientId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get providers update the team",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b5fb5055-f4a4-4665-b095-d25df3f383d3",
												"exec": [
													"let responseJson = pm.response.json();",
													"let ld = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"})",
													"pm.test(\"Response time is less than 4000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(4000);",
													"});",
													"",
													"pm.test(\"Verify providers by page size and page number\", () => {",
													"    var pageSize = pm.request.url.query.get(\"page-size\");",
													"    pm.expect(responseJson.providers.length.toString()).to.eql(pageSize);",
													"});",
													"//Fetch providers's externalIds and and store them in an arry of objects and randomly picks one to pass in the request. ",
													"let userIds = responseJson.providers;",
													"let arryOfProviderIds = userIds.map(tool => tool.userId);",
													"// One random externalId for admission team",
													"let random = Math.floor(Math.random() * arryOfProviderIds.length);",
													"let providerExternalIdForAdmissionTeam = arryOfProviderIds[random];",
													"",
													"pm.environment.set(\"providerExternalIdForAdmissionTeam2\", providerExternalIdForAdmissionTeam);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3eea0f37-9bff-478d-b522-3289ec02c6d7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "5a6320d1-7131-4aa0-9118-83705fc113c4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test-token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users/providers?page-size=10&page-number=1",
											"host": [
												"{{host}}"
											],
											"path": [
												"users",
												"providers"
											],
											"query": [
												{
													"key": "page-size",
													"value": "10"
												},
												{
													"key": "page-number",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update admission team",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e2fa0ad7-770b-457a-aeee-c9e2677ff1e6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "29e541a1-96e4-4a73-a61c-861d63169638",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 4000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(4000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "30963978-b095-4408-9b90-30ff4c926054",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test-token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"providers\": [\n        {\n            \"externalId\": \"{{providerExternalIdForAdmissionTeam1}}\",\n            \"isVisibleForPatientChat\": false\n        },\n        {\n            \"externalId\": \"{{providerExternalIdForAdmissionTeam2}}\",\n            \"isVisibleForPatientChat\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users/care-team/{{admissionTeamExternalId}}/v2",
											"host": [
												"{{host}}"
											],
											"path": [
												"users",
												"care-team",
												"{{admissionTeamExternalId}}",
												"v2"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify admission team update",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a73f7de-19bd-4402-9fb4-ef9640a6649f",
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Response time is less than 4000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(4000);",
													"});",
													"pm.test(\"Response has a JSON body\", function () {",
													"    pm.response.to.be.json;",
													"});",
													"pm.test(\"Content-Type header is application/json\", () => {",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
													"});",
													"",
													"// pm.test(\"Verify care team details\", function () {",
													"//  tests[\"Patient# \" + (i + 1) + \" has care team member as \" + jsonData['data'][i]['careTeamMembers'][0].providerFirstName] = pm.expect(jsonData['data'][i]['careTeamMembers'][0].providerFirstName).to.include(\"Mayank\");",
													"//         }});",
													"",
													"pm.test(\"Verify admission and care team1\", function () {",
													"    pm.expect(jsonData.admissionsTeam.providers[0].providerExternalId).to.eql(pm.environment.get(\"providerExternalIdForAdmissionTeam1\"));",
													"    });",
													"",
													"pm.test(\"Verify provider visibleForPatientChat flag is false1\", function () {",
													"    pm.expect(jsonData.admissionsTeam.providers[0].visibleForPatientChat).to.eql(false);",
													"});",
													"",
													"pm.test(\"Verify admission and care team2\", function () {",
													"    pm.expect(jsonData.admissionsTeam.providers[1].providerExternalId).to.eql(pm.environment.get(\"providerExternalIdForAdmissionTeam2\"));",
													"    });",
													"",
													"pm.test(\"Verify provider visibleForPatientChat flag is false2\", function () {",
													"    pm.expect(jsonData.admissionsTeam.providers[1].visibleForPatientChat).to.eql(true);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "5abe4cfe-d76b-442f-9e6f-792531afdbc0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test-token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{host}}/users/care-team/{{patientId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"users",
												"care-team",
												"{{patientId}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "f4993932-f8f7-4201-a1dc-236a0718bbe5"
						},
						{
							"name": "Care team",
							"item": [
								{
									"name": "Add Patient",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3db888e1-57da-4bc2-a657-5277b931efd5",
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 4000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(4000);",
													"});",
													"",
													"pm.test(\"Response has a JSON body\", function () {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Content-Type header is application/json\", () => {",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
													"});",
													"",
													"pm.test(\"Verify id is generated\", function () {",
													"    pm.expect(jsonData.id).length.greaterThan(0);",
													"});",
													"",
													"pm.environment.set(\"patientId\", jsonData.id);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6f4f1df3-ea77-487d-979b-07dcdf8b0a62",
												"exec": [
													"let ld = require('lodash');",
													"",
													"let gendersList = [",
													"    \"Cis-gender male\",",
													"    \"Cis-gender female\",",
													"    \"Non-binary\",",
													"    \"Other\",",
													"    \"Unknown\",",
													"    \"Transgender male\",",
													"    \"Transgender female\"",
													"];",
													"",
													"let pronounsList = [",
													"    \"He/Him/His\",",
													"    \"She/Her/Hers\",",
													"    \"They/Them/Theirs\",",
													"    \"Other\"",
													"];",
													"",
													"let ethnicitiesList = [",
													"    \"Asian\",",
													"    \"Black/African American\",",
													"    \"White/Caucasian\",",
													"    \"Hispanic/Latinx\",",
													"    \"Native American, Indian American, or Alaska Native\",",
													"    \"Native Hawaiian or other Pacific Islander\",",
													"    \"Middle Eastern or North African\",",
													"    \"Prefer not to answer\",",
													"    \"Other\"",
													"];",
													"",
													"let languagesList = [",
													"    \"English\",",
													"    \"Spanish\",",
													"    \"Chinese\",",
													"    \"French\",",
													"    \"Tagalog\",",
													"    \"Vietnamese\",",
													"    \"Korean\",",
													"    \"German\",",
													"    \"Russian\",",
													"    \"Italian\",",
													"    \"Portuguese\",",
													"    \"Polish\",",
													"    \"Japanese\",",
													"    \"Persian\",",
													"    \"Greek\",",
													"    \"Serbo-Croatian\",",
													"    \"Armenian\",",
													"    \"Yiddish\",",
													"    \"American Sign Language (ASL)\"",
													"];",
													"",
													"let sexList = [",
													"    \"Male\",",
													"    \"Female\"",
													"];",
													"",
													"let timezonesList = [",
													"    \"Hawaii Standard Time\",",
													"    \"Hawaii-Aleutian Time\",",
													"    \"Alaska Time\",",
													"    \"Pacific Time\",",
													"    \"Arizona\",",
													"    \"Mountain Time\",",
													"    \"Central Time\",",
													"    \"Eastern Time\"",
													"];",
													"",
													"let contactPreferences = [\"Email\", \"No preference\", \"Phone\", \"Unknown\"];",
													"",
													"let statesList = [\"AK\", \"AL\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"DC\", \"FL\", \"GA\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"OH\", \"OK\", \"OR\", \"PA\", \"PR\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\", \"Outside US\", \"Unknown\"];",
													"",
													"let addressLine2List = [\"Apt 1\", \"Apt 2\", \"Apt 3\", \"Unit #1\", \"Unit #2\", \"Unit #3\", \"Apt 2L\", \"Apt 2R\"];",
													"",
													"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
													"let lastName = pm.variables.replaceIn('{{$randomLastName}}');",
													"let chosenName = pm.variables.replaceIn('{{$randomFirstName}}');",
													"let email = \"qa\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
													"let zip = Math.floor(10000 + Math.random() * 90000);",
													"",
													"//Generate random Date of Birth in YYYY-MM-DD Format",
													"function randomDate(start, end) {",
													"    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));",
													"}",
													"let date = randomDate(new Date(1990, 00, 01), new Date());",
													"let dateOfBirth = date.getFullYear() + '-' + (\"0\" + (date.getMonth() + 1)).slice(-2) + '-' + (\"0\" + date.getDate()).slice(-2);",
													"",
													"//Save the variables to be used in next request for validation",
													"pm.environment.set(\"patientFirstName\", firstName);",
													"pm.environment.set(\"patientLastName\", lastName);",
													"pm.environment.set(\"patientEmail\", email);",
													"pm.environment.set(\"patientPhoneNumber\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));",
													"pm.environment.set(\"patientChosenName\", chosenName);",
													"pm.environment.set(\"patientDateOfBirth\", dateOfBirth);",
													"pm.environment.set(\"patientAddressLine1\", pm.variables.replaceIn('{{$randomStreetAddress}}'));",
													"pm.environment.set(\"patientAddressLine2\", ld.sample(addressLine2List));",
													"pm.environment.set(\"patientCity\", pm.variables.replaceIn('{{$randomCity}}'));",
													"pm.environment.set(\"patientState\", ld.sample(statesList));",
													"pm.environment.set(\"patientCountry\", \"US\");",
													"pm.environment.set(\"patientZip\", zip.toString());",
													"pm.environment.set(\"patientLatitude\", pm.variables.replaceIn('{{$randomLatitude}}'));",
													"pm.environment.set(\"patientLongitude\", pm.variables.replaceIn('{{$randomLongitude}}'));",
													"pm.environment.set(\"patientEthnicities\", JSON.stringify(ld.sampleSize(ethnicitiesList, 2).sort()));",
													"pm.environment.set(\"patientLanguages\", JSON.stringify(ld.sampleSize(languagesList, 2).sort()));",
													"pm.environment.set(\"patientGenderOnRecord\", ld.sample(gendersList));",
													"pm.environment.set(\"patientGenderOffRecord\", ld.sample(gendersList));",
													"pm.environment.set(\"patientPronounsOnRecord\", ld.sample(pronounsList));",
													"pm.environment.set(\"patientPronounsOffRecord\", ld.sample(pronounsList));",
													"pm.environment.set(\"patientSex\", ld.sample(sexList));",
													"pm.environment.set(\"patientTimezone\", ld.sample(timezonesList));",
													"pm.environment.set(\"patientContactPreferences\", JSON.stringify(ld.sampleSize(contactPreferences, 2).sort()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "24ed4baf-e404-4caf-ba43-34859f09cf95",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test-token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"{{patientFirstName}}\",\n    \"lastName\": \"{{patientLastName}}\",\n    \"dateOfBirth\": \"{{patientDateOfBirth}}\",\n    \"email\": \"{{patientEmail}}\",\n    \"contactPreferences\": {{patientContactPreferences}},\n    \"ethnicities\": {{patientEthnicities}},\n    \"phoneNumber\": \"{{patientPhoneNumber}}\",\n    \"chosenName\": \"{{patientChosenName}}\",\n    \"languages\": {{patientLanguages}},\n    \"genderOnRecord\": \"{{patientGenderOnRecord}}\",\n    \"genderOffRecord\": \"{{patientGenderOffRecord}}\",\n    \"pronounsOnRecord\": \"{{patientPronounsOnRecord}}\",\n    \"pronounsOffRecord\": \"{{patientPronounsOffRecord}}\",\n    \"sex\": \"{{patientSex}}\",\n    \"timezone\": \"{{patientTimezone}}\",\n    \"latitude\": \"{{patientLatitude}}\",\n    \"longitude\": \"{{patientLongitude}}\",\n    \"addressLine1\": \"{{patientAddressLine1}}\",\n    \"addressLine2\": \"{{patientAddressLine2}}\",\n    \"city\": \"{{patientCity}}\",\n    \"country\": \"{{patientCountry}}\",\n    \"state\": \"{{patientState}}\",\n    \"zip\": \"{{patientZip}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users/patients",
											"host": [
												"{{host}}"
											],
											"path": [
												"users",
												"patients"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get providers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cc0d0ade-2a1f-425d-b3d0-266a4c1aa6f3",
												"exec": [
													"let responseJson = pm.response.json();",
													"let ld = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"})",
													"pm.test(\"Response time is less than 4000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(4000);",
													"});",
													"",
													"pm.test(\"Verify providers by page size and page number\", () => {",
													"    var pageSize = pm.request.url.query.get(\"page-size\");",
													"    pm.expect(responseJson.providers.length.toString()).to.eql(pageSize);",
													"});",
													"//Fetch providers's externalIds and and store them in an arry of objects and randomly picks one to pass in the request. ",
													"let userIds = responseJson.providers;",
													"let arryOfProviderIds = userIds.map(tool => tool.userId);",
													"// One random externalId for admission team",
													"let random = Math.floor(Math.random() * arryOfProviderIds.length);",
													"let providerExternalIdForCareTeam = arryOfProviderIds[random];",
													"",
													"pm.environment.set(\"providerExternalIdForCareTeam1\", providerExternalIdForCareTeam);",
													"//pm.environment.set(\"providerExternalIdForAdmissionTeam\", ld.sample(arryOfProviderIds));",
													"console.log(\"providerExternalIdForCareTeam1: \"+providerExternalIdForCareTeam);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6d913d8f-a1c3-4201-a079-8a8da1033ca8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "51cfe52a-8784-48cc-8065-fb77bd28663c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test-token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users/providers?page-size=20&page-number=1",
											"host": [
												"{{host}}"
											],
											"path": [
												"users",
												"providers"
											],
											"query": [
												{
													"key": "page-size",
													"value": "20"
												},
												{
													"key": "page-number",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create care team - Negative case",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4eaf66fc-e75f-4fc2-9f9e-b37acfd4df5a",
												"exec": [
													"",
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response time is less than 4000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(4000);",
													"});",
													"",
													"pm.test(\"Response has a JSON body\", function () {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Content-Type header is application/json\", () => {",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
													"});",
													"",
													"pm.test(\"Verify the error message\", () => {",
													"    pm.expect(jsonData._embedded.errors[0].message).to.contains(\"problem: isVisibleForPatientChat is marked non-null but is null\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3f7c479e-e796-4ff6-b5a1-3ff3bf518041",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test-token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"patientExternalId\": \"{{patientId}}\",\n    \"type\": \"care\",\n    \"providers\": [\n        {\n            \"externalId\": \"{{providerExternalIdForCareTeam1}}\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users/care-team/v2",
											"host": [
												"{{host}}"
											],
											"path": [
												"users",
												"care-team",
												"v2"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create care team",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a6864895-85e2-47a8-b2f0-5a53891a7e2e",
												"exec": [
													"",
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 4000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(4000);",
													"});",
													"",
													"pm.test(\"Response has a JSON body\", function () {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Content-Type header is application/json\", () => {",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
													"});",
													"",
													"pm.test(\"Verify id is generated\", function () {",
													"    pm.expect(jsonData.id).length.greaterThan(0);",
													"});",
													"",
													"pm.environment.set(\"careTeamExternalId\", jsonData.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "04b84cfc-f10b-4c4a-b935-5e4d5e3caf73",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test-token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"patientExternalId\": \"{{patientId}}\",\n    \"type\": \"care\",\n    \"providers\": [\n        {\n            \"externalId\": \"{{providerExternalIdForCareTeam1}}\",\n            \"isVisibleForPatientChat\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users/care-team/v2",
											"host": [
												"{{host}}"
											],
											"path": [
												"users",
												"care-team",
												"v2"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify care team creation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "139da472-0463-4ffb-b313-09083af1ffd0",
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Response time is less than 4000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(4000);",
													"});",
													"pm.test(\"Response has a JSON body\", function () {",
													"    pm.response.to.be.json;",
													"});",
													"pm.test(\"Content-Type header is application/json\", () => {",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
													"});",
													"",
													"// pm.test(\"Verify care team details\", function () {",
													"//  tests[\"Patient# \" + (i + 1) + \" has care team member as \" + jsonData['data'][i]['careTeamMembers'][0].providerFirstName] = pm.expect(jsonData['data'][i]['careTeamMembers'][0].providerFirstName).to.include(\"Mayank\");",
													"//         }});",
													"",
													"pm.test(\"Verify care team\", function () {",
													"    pm.expect(jsonData.careTeam.providers[0].providerExternalId).to.eql(pm.environment.get(\"providerExternalIdForCareTeam1\"));",
													"});",
													"",
													"pm.test(\"Verify provider visibleForPatientChat flag is true\", function () {",
													"    pm.expect(jsonData.careTeam.providers[0].visibleForPatientChat).to.eql(true);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7826d702-7c9a-4f0b-95b8-ac691dd59041",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test-token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{host}}/users/care-team/{{patientId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"users",
												"care-team",
												"{{patientId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get providers update the team",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9dc28064-cb30-4ed6-85a0-cb4710d353d6",
												"exec": [
													"let responseJson = pm.response.json();",
													"let ld = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"})",
													"pm.test(\"Response time is less than 4000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(4000);",
													"});",
													"",
													"pm.test(\"Verify providers by page size and page number\", () => {",
													"    var pageSize = pm.request.url.query.get(\"page-size\");",
													"    pm.expect(responseJson.providers.length.toString()).to.eql(pageSize);",
													"});",
													"//Fetch providers's externalIds and and store them in an arry of objects and randomly picks one to pass in the request. ",
													"let userIds = responseJson.providers;",
													"let arryOfProviderIds = userIds.map(tool => tool.userId);",
													"// One random externalId for admission team",
													"let random = Math.floor(Math.random() * arryOfProviderIds.length);",
													"let providerExternalIdForCareTeam = arryOfProviderIds[random];",
													"",
													"pm.environment.set(\"providerExternalIdForCareTeam2\", providerExternalIdForCareTeam);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "409fb26d-c1ee-4389-92c4-1e537481da33",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ac1c7977-cfcf-487c-9b76-2e0c3fef1803",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test-token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users/providers?page-size=10&page-number=1",
											"host": [
												"{{host}}"
											],
											"path": [
												"users",
												"providers"
											],
											"query": [
												{
													"key": "page-size",
													"value": "10"
												},
												{
													"key": "page-number",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update care team",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "42340989-f8b3-469d-8f21-0e5e336bc044",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2800a4d2-4a6b-4b60-8141-d6f6fb9ec41b",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 4000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(4000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "81937533-99c8-4946-a123-cb3d1fde17b1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test-token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"providers\": [\n        {\n            \"externalId\": \"{{providerExternalIdForCareTeam1}}\",\n            \"isVisibleForPatientChat\": false\n        },\n        {\n            \"externalId\": \"{{providerExternalIdForCareTeam2}}\",\n            \"isVisibleForPatientChat\": true\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/users/care-team/{{careTeamExternalId}}/v2",
											"host": [
												"{{host}}"
											],
											"path": [
												"users",
												"care-team",
												"{{careTeamExternalId}}",
												"v2"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify care team update",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "efc1a1a3-c343-4e82-aff0-27ef98272722",
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Response time is less than 4000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(4000);",
													"});",
													"pm.test(\"Response has a JSON body\", function () {",
													"    pm.response.to.be.json;",
													"});",
													"pm.test(\"Content-Type header is application/json\", () => {",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
													"});",
													"",
													"// pm.test(\"Verify care team details\", function () {",
													"//  tests[\"Patient# \" + (i + 1) + \" has care team member as \" + jsonData['data'][i]['careTeamMembers'][0].providerFirstName] = pm.expect(jsonData['data'][i]['careTeamMembers'][0].providerFirstName).to.include(\"Mayank\");",
													"//         }});",
													"",
													"pm.test(\"Verify admission and care team\", function () {",
													"    pm.expect(jsonData.careTeam.providers[0].providerExternalId).to.eql(pm.environment.get(\"providerExternalIdForCareTeam1\"));",
													"    });",
													"",
													"pm.test(\"Verify provider visibleForPatientChat flag is false\", function () {",
													"    pm.expect(jsonData.careTeam.providers[0].visibleForPatientChat).to.eql(false);",
													"});",
													"",
													"pm.test(\"Verify admission and care team\", function () {",
													"    pm.expect(jsonData.careTeam.providers[1].providerExternalId).to.eql(pm.environment.get(\"providerExternalIdForCareTeam2\"));",
													"    });",
													"",
													"pm.test(\"Verify provider visibleForPatientChat flag is false\", function () {",
													"    pm.expect(jsonData.careTeam.providers[1].visibleForPatientChat).to.eql(true);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "fca8b1ea-00bd-4f2b-839a-13423baec62b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test-token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{host}}/users/care-team/{{patientId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"users",
												"care-team",
												"{{patientId}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "0ddb7929-28e6-439e-b988-89fb7a9ba584"
						}
					],
					"id": "247c96c0-6936-4cb4-8d1e-c0745a7c6490"
				}
			],
			"id": "1a2bbee0-1f39-44c8-ba1e-7f28a90e551c"
		},
		{
			"name": "getUserDetailsInBatch",
			"item": [
				{
					"name": "List of Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "03f38609-0951-416c-8cf6-80abc1512a5d",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"",
									"// Fetch patients userId and and store them in an arry of objects and randomly picks one to pass in the request. ",
									"let patientUserIds = jsonData.data;",
									"let arryOfPatientsUserIds = patientUserIds.map(tool => tool.userId);",
									"// One random patientId will be picked for to pass on the next Get request",
									"let random = Math.floor(Math.random() * arryOfPatientsUserIds.length);",
									"let patientId = arryOfPatientsUserIds[random];",
									"pm.environment.set(\"patientId\", patientId);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "83c54097-1c93-4efe-a51f-bc739d7a3937",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f60564bc-442b-4050-9dc0-e8dafcfe5375",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/patients",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients"
							]
						}
					},
					"response": []
				},
				{
					"name": "List of Provider",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "362b638f-c1b9-4c33-925d-f26091409d21",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e752ac27-a758-4879-8213-f0556f52ccf7",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"",
									"// Fetch proivder's userId and and store them in an arry of objects and randomly picks one to pass in the request. ",
									"let providerUserIds = jsonData.providers;",
									"let arryOfProvidersUserIds = providerUserIds.map(tool => tool.userId);",
									"// One random proivderId will be picked for to pass on the next Get request",
									"let random = Math.floor(Math.random() * arryOfProvidersUserIds.length);",
									"let providerId = arryOfProvidersUserIds[random];",
									"pm.environment.set(\"providerId\", providerId);",
									"//console.log(providerId);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a9992fdf-3904-4db4-9653-6ccaa39be8d1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/providers",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"providers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user auth_id and eamil",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "88743d29-6288-4dd5-bca5-d63163500b7d",
								"exec": [
									"let responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"let arrayOfResponse = responseJson;",
									"let arrayAuth_Ids = arrayOfResponse.map(tool => tool.userAuthId);",
									"let arryOfEmails = arrayOfResponse.map(tool => tool.email);",
									"let authIdValadation = false;",
									"let eamilValadation = false;",
									"",
									"console.log(arryOfEmails.length);",
									"",
									"",
									"//We should alwasys have authId in the respons for each user. If the response do not return the authId for any providers, the length of the arryAuth_Ids will be less than 3. The authIdValadation will stay false and the test will fail.",
									"if (arrayAuth_Ids.length === 3) {",
									"    authIdValadation = true;",
									"}",
									"pm.test(\"Verify all return users iclude userAuthId\", function () {",
									"    pm.expect(authIdValadation).to.be.eql(true);",
									"});",
									"",
									"//We should alwasys have eamil the respons for each user. If the response do not return the eamil for any providers, the length of the arryOfEmails will be less than 3. The eamilValadation will stay false and the test will fail.",
									"if (arryOfEmails.length === 3) {",
									"    eamilValadation = true;",
									"}",
									"",
									"pm.test(\"Verify all return users iclude Email\", function () {",
									"    pm.expect(eamilValadation).to.be.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c8e83984-c4e6-44e6-9bc9-cf7564bc6bd3",
								"exec": [
									"// At this point there is no API enpoint avilible to fetch the supports user Ids. Therefore run below query against DB. It will return 50 supportIds and store those Ids in the arrayOfSupportIds manually as below.",
									"//\"select au.external_id from support s",
									"//join app_user au ",
									"//on s.user_id =au.user_id",
									"//limit 50;\"",
									"",
									"",
									"",
									"let host = pm.environment.get(\"host\");",
									"",
									"//all supports avilible in QA environment",
									"let qaArrayOfSupportIds = [\"38bfa700-b8a8-458c-9be8-7233a8461d97\", \"d085f379-5819-43ac-bd29-be10e22742f4\", \"3316f368-73e1-41fd-944c-89844a932dea\", \"7c6ea2a3-ca2c-45f4-a020-6e96d1d2bcc9\", \"6d389d36-a0bd-4572-a914-d0303fb96669\", \"0196d0af-e650-47c6-a43a-09e0852a8b3c\", \"bc6c3e12-8563-4c07-a51c-69d9a5bd3989\", \"8600756b-ee39-4edc-b33e-70238c498892\", \"09d35022-22f5-4fb9-85ab-cb50e8284612\"];",
									"",
									"//50 supports acccount from Dev Environmet",
									"let devArrayOfSupportIds = [\"d5b98fb8-80bd-4169-a181-1cd9496d6017\", \"dbbe0574-acc3-441a-9478-48a1550fb737\", \"00294d4d-f367-41e6-8293-bd0b184b3b19\", \"ebb6cf58-17cb-4ea2-baa4-f5f3945f0268\", \"e51b4f4c-389e-4257-ba63-5749839c047c\", \"b743e90e-2765-42a6-9c87-a9536ad474ad\", \"f5055acd-37c5-4fa8-ab8e-34758fadc579\", \"826ed8cc-38c8-43b6-87cf-a5e9a387d451\", \"450e4894-262f-48ae-b605-a99e70d17941\", \"87caa826-f380-4847-8ddd-28388ca27617\", \"5552c28b-9d14-4481-9e99-576c1e391850\", \"dbc6677c-0563-4a67-b293-5217178efa64\", \"355f223a-134b-460e-89dc-9221c4e4f14e\", \"08135ee3-10a4-46ea-9c1c-e986c6a64b8c\", \"2452b615-27e8-47cd-9101-bbadade4cbf0\", \"1caf58db-c5e1-45f1-aae7-2ed7250397d5\", \"4e33eb40-5475-448a-ab0e-853d58360aa0\", \"48e85c8b-2bce-4997-bbc8-adbf2e683fb2\", \"50ef0518-dc9b-4c60-9d32-b22f7a242554\", \"bd4e9cb3-8998-4d15-9ff7-7b358ca302d7\", \"3dfb2ba5-437d-4f11-be17-a91aa9c9d532\", \"3550ab5e-1722-4023-9799-cce5bd1e000d\", \"5d07ceb2-0c50-43ed-934a-4f4ba151e691\", \"32d197a9-5704-4b30-9653-5d5ea5e58b93\", \"5d0acb50-d94b-4bae-bf96-b412307c6187\", \"fa6ae8e1-825c-414a-b999-49ab7b8adaf6\", \"a9992943-b1e8-48f5-927b-76c909026603\", \"ba839888-ddff-4ddc-b6ba-1a825dd0367d\", \"4bfc4b02-0a01-4ee9-8e25-54f9968e18ed\", \"1256d616-1349-4062-992f-a7417fe635c3\", \"2ea82618-2a5b-4b60-8a39-1df50be75f8e\", \"9b51ff20-b652-4897-a32c-39c010dab573\", \"b34a816b-57b8-439f-aef5-7cf1e72343fb\", \"4c2f77a6-725e-43aa-b0b4-09b415980915\", \"6e74a7d0-dff2-47a7-8847-5308ccca33a5\", \"15e2c8ef-8121-4578-bdfd-247db979bfd1\", \"46600a0f-60f6-45f5-80fe-450d79b1b299\", \"7ab98b3c-457e-4847-afb0-d5e085e005a4\", \"0a48594b-818b-4852-abb5-a61135c2a2c1\", \"4509ae9d-9e35-4a35-b732-f94594843378\", \"38a85ca3-283f-4cf1-a953-1a5205edaa8c\", \"3e45cafd-5bfd-4476-85d5-64e12665c381\", \"40efc0c4-7c67-4149-beb2-c523b0368482\", \"b78fd8dc-96e4-473f-8b67-909e3ef20c9e\", \"8732bc48-4f64-4e47-b4fc-123e570ab62f\", \"ea8380f8-6eac-4491-aaac-7ecafbfc6eca\", \"a9956dba-07b2-4907-854b-8afb6fa19f0b\", \"8986a5e3-74cb-49bf-94f5-68c4e1687aa0\", \"6350fcd2-4c9e-4531-a423-f48d153d65c9\", \"3795e764-cc5b-47c9-9cc7-90e873e2f898\"];",
									"",
									"let arrayOfSupportIds;",
									"",
									"if (host===\"https://api-qa.np.equip.health\"){",
									"    arrayOfSupportIds = qaArrayOfSupportIds;",
									"} else {",
									"    arrayOfSupportIds = devArrayOfSupportIds;",
									"}",
									"",
									"",
									"// Here it will select one Id randomly to pass in request's parameter.",
									"let random = Math.floor(Math.random() * arrayOfSupportIds.length);",
									"let supportId = arrayOfSupportIds[random];",
									"pm.environment.set(\"supportId\", supportId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3f0e1af4-2fb9-48c7-974f-5b9e1ce44638",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users?id={{patientId}},{{providerId}},{{supportId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "id",
									"value": "{{patientId}},{{providerId}},{{supportId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "926e4071-feb6-4f46-abc0-a289b4facb3f"
		},
		{
			"name": "Support Accounts",
			"item": [
				{
					"name": "Add Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c4f279fc-12fa-408b-ac84-c07350aa6cc7",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify id is generated\", function () {",
									"    pm.expect(jsonData.id).length.greaterThan(0);",
									"});",
									"",
									"pm.environment.set(\"patientId\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a1ce2602-1234-404c-a657-55b1a16802f3",
								"exec": [
									"let ld = require('lodash');",
									"",
									"let gendersList = [",
									"    \"Cis-gender male\",",
									"    \"Cis-gender female\",",
									"    \"Non-binary\",",
									"    \"Other\",",
									"    \"Unknown\",",
									"    \"Transgender male\",",
									"    \"Transgender female\"",
									"];",
									"",
									"let pronounsList = [",
									"    \"(F)ae/(F)aer/(F)aers\",",
									"    \"Ey/Em/Eirs\",",
									"    \"He/Him/His\",",
									"    \"None\",",
									"    \"Other\",",
									"    \"She/Her/Hers\",",
									"    \"They/Them/Theirs\",",
									"    \"Xe/Xem/Xir\"",
									"];",
									"",
									"let ethnicitiesList = [",
									"    \"Asian\",",
									"    \"Black/African American\",",
									"    \"White/Caucasian\",",
									"    \"Hispanic/Latinx\",",
									"    \"Native American, Indian American, or Alaska Native\",",
									"    \"Native Hawaiian or other Pacific Islander\",",
									"    \"Middle Eastern or North African\",",
									"    \"Prefer not to answer\",",
									"    \"Other\"",
									"];",
									"",
									"let languagesList = [",
									"    \"English\",",
									"    \"Spanish\",",
									"    \"Chinese\",",
									"    \"French\",",
									"    \"Tagalog\",",
									"    \"Vietnamese\",",
									"    \"Korean\",",
									"    \"German\",",
									"    \"Russian\",",
									"    \"Italian\",",
									"    \"Portuguese\",",
									"    \"Polish\",",
									"    \"Japanese\",",
									"    \"Persian\",",
									"    \"Greek\",",
									"    \"Serbo-Croatian\",",
									"    \"Armenian\",",
									"    \"Yiddish\",",
									"    \"American Sign Language (ASL)\"",
									"];",
									"",
									"let sexList = [",
									"    \"Male\",",
									"    \"Female\"",
									"];",
									"",
									"let timezonesList = [",
									"    \"Hawaii Standard Time\",",
									"    \"Hawaii-Aleutian Time\",",
									"    \"Alaska Time\",",
									"    \"Pacific Time\",",
									"    \"Arizona\",",
									"    \"Mountain Time\",",
									"    \"Central Time\",",
									"    \"Eastern Time\"",
									"];",
									"",
									"let contactPreferences = [\"Email\", \"No preference\", \"Phone\", \"Unknown\"];",
									"",
									"let statesList = [\"AK\", \"AL\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"DC\", \"FL\", \"GA\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"OH\", \"OK\", \"OR\", \"PA\", \"PR\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\", \"Outside US\", \"Unknown\"];",
									"",
									"let addressLine2List = [\"Apt 1\", \"Apt 2\", \"Apt 3\", \"Unit #1\", \"Unit #2\", \"Unit #3\", \"Apt 2L\", \"Apt 2R\"];",
									"",
									"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let lastName = pm.variables.replaceIn('{{$randomLastName}}');",
									"let chosenName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let email = \"qa\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
									"let zip = Math.floor(10000 + Math.random() * 90000);",
									"",
									"//Generate random Date of Birth in YYYY-MM-DD Format",
									"function randomDate(start, end) {",
									"    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));",
									"}",
									"let date = randomDate(new Date(1990, 00, 01), new Date());",
									"let dateOfBirth = date.getFullYear() + '-' + (\"0\" + (date.getMonth() + 1)).slice(-2) + '-' + (\"0\" + date.getDate()).slice(-2);",
									"",
									"//Save the variables to be used in next request for validation",
									"pm.environment.set(\"patientFirstName\", firstName);",
									"pm.environment.set(\"patientLastName\", lastName);",
									"pm.environment.set(\"patientEmail\", email);",
									"pm.environment.set(\"patientPhoneNumber\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));",
									"pm.environment.set(\"patientChosenName\", chosenName);",
									"pm.environment.set(\"patientDateOfBirth\", dateOfBirth);",
									"pm.environment.set(\"patientAddressLine1\", pm.variables.replaceIn('{{$randomStreetAddress}}'));",
									"pm.environment.set(\"patientAddressLine2\", ld.sample(addressLine2List));",
									"pm.environment.set(\"patientCity\", pm.variables.replaceIn('{{$randomCity}}'));",
									"pm.environment.set(\"patientState\", ld.sample(statesList));",
									"pm.environment.set(\"patientCountry\", \"US\");",
									"pm.environment.set(\"patientZip\", zip.toString());",
									"pm.environment.set(\"patientLatitude\", pm.variables.replaceIn('{{$randomLatitude}}'));",
									"pm.environment.set(\"patientLongitude\", pm.variables.replaceIn('{{$randomLongitude}}'));",
									"pm.environment.set(\"patientEthnicities\", JSON.stringify(ld.sampleSize(ethnicitiesList, 2).sort()));",
									"pm.environment.set(\"patientLanguages\", JSON.stringify(ld.sampleSize(languagesList, 2).sort()));",
									"pm.environment.set(\"patientGenderOnRecord\", ld.sample(gendersList));",
									"pm.environment.set(\"patientGenderOffRecord\", ld.sample(gendersList));",
									"pm.environment.set(\"patientPronounsOnRecord\", JSON.stringify(ld.sampleSize(pronounsList, 3).sort()));",
									"pm.environment.set(\"patientPronounsOffRecord\", JSON.stringify(ld.sampleSize(pronounsList, 3).sort()));",
									"pm.environment.set(\"patientSex\", ld.sample(sexList));",
									"pm.environment.set(\"patientTimezone\", ld.sample(timezonesList));",
									"pm.environment.set(\"patientContactPreferences\", JSON.stringify(ld.sampleSize(contactPreferences, 2).sort()));"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4b1c14ad-448a-4136-adf3-8d4956670d88",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{patientFirstName}}\",\n    \"lastName\": \"{{patientLastName}}\",\n    \"dateOfBirth\": \"{{patientDateOfBirth}}\",\n    \"email\": \"{{patientEmail}}\",\n    \"contactPreferences\": {{patientContactPreferences}},\n    \"ethnicities\": {{patientEthnicities}},\n    \"phoneNumber\": \"{{patientPhoneNumber}}\",\n    \"chosenName\": \"{{patientChosenName}}\",\n    \"languages\": {{patientLanguages}},\n    \"genderOnRecord\": \"{{patientGenderOnRecord}}\",\n    \"genderOffRecord\": \"{{patientGenderOffRecord}}\",\n    \"pronounsOnRecord\": {{patientPronounsOnRecord}},\n    \"pronounsOffRecord\": {{patientPronounsOffRecord}},\n    \"sex\": \"{{patientSex}}\",\n    \"timezone\": \"{{patientTimezone}}\",\n    \"latitude\": \"{{patientLatitude}}\",\n    \"longitude\": \"{{patientLongitude}}\",\n    \"addressLine1\": \"{{patientAddressLine1}}\",\n    \"addressLine2\": \"{{patientAddressLine2}}\",\n    \"city\": \"{{patientCity}}\",\n    \"country\": \"{{patientCountry}}\",\n    \"state\": \"{{patientState}}\",\n    \"zip\": \"{{patientZip}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/patients",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add  Proxy Support User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec1829f0-77a8-4e53-9bd1-b7fa42a23d3b",
								"exec": [
									"let text = pm.response.text();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"",
									"",
									"pm.environment.set(\"supportId1\", text);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "74a018b9-9ad9-4988-b707-d4b1a1b82c64",
								"exec": [
									"let ld = require('lodash');",
									"",
									"const relation_to_patient = [",
									"  \"Adopted sibling\",",
									"  \"Adoptive father\",",
									"  \"Adoptive mother\",",
									"  \"Adoptive parent\",",
									"  \"Biological father\",",
									"  \"Biological mother\",",
									"  \"Biological parent\",",
									"  \"Biological sibling\",",
									"  \"Case Manager/Discharge Planner\",",
									"  \"Community org/non-profit\",",
									"  \"Community professional\",",
									"  \"Dietitian\",",
									"  \"Doctor\",",
									"  \"Eating disorder coach/advocate\",",
									"  \"Executive\",",
									"  \"Family member\",",
									"  \"Father\",",
									"  \"Foster father\",",
									"  \"Foster mother\",",
									"  \"Foster parent\",",
									"  \"Friend\",",
									"  \"Grandparent\",",
									"  \"Guardian\",",
									"  \"Half sibling\",",
									"  \"Hospital\",",
									"  \"Insurance company\",",
									"  \"Maternal grandfather\",",
									"  \"Maternal grandmother\",",
									"  \"Mother\",",
									"  \"Nurse\",",
									"  \"Nurse practitioner\",",
									"  \"Other\",",
									"  \"Outreach professional\",",
									"  \"Paternal grandfather\",",
									"  \"Paternal grandmother\",",
									"  \"Payor case manager\",",
									"  \"Physician Assistant\",",
									"  \"Physician: Adolescent Medicine/Eating Disorder Specialist\",",
									"  \"Physician: Endocrinologist\",",
									"  \"Physician: Family Medicine\",",
									"  \"Physician: Gastroenterologist\",",
									"  \"Physician: Other specialist\",",
									"  \"Physician: PCP (non-peds)\",",
									"  \"Physician: Pediatrician\",",
									"  \"Practice Manager\",",
									"  \"Psychiatrist\",",
									"  \"Psychologist\",",
									"  \"Referral Coordinator\",",
									"  \"School nurse\",",
									"  \"School therapist/counselor\",",
									"  \"Step sibling\",",
									"  \"Stepfather\",",
									"  \"Stepmother\",",
									"  \"Stepparent\",",
									"  \"Strategic Partner\",",
									"  \"Therapist\",",
									"  \"Treatment Center (eating disorder)\",",
									"  \"Treatment Center (non-ED)\",",
									"  \"University: Counseling Center\",",
									"  \"University: Student Health\"",
									"];",
									"",
									"let gendersList = [",
									"    \"Cis-gender male\",",
									"    \"Cis-gender female\",",
									"    \"Non-binary\",",
									"    \"Other\",",
									"    \"Unknown\",",
									"    \"Transgender male\",",
									"    \"Transgender female\"",
									"];",
									"",
									"let pronounsList = [",
									"    \"He/Him/His\",",
									"    \"She/Her/Hers\",",
									"    \"They/Them/Theirs\",",
									"    \"Other\"",
									"];",
									"",
									"let ethnicitiesList = [",
									"    \"Asian\",",
									"    \"Black/African American\",",
									"    \"White/Caucasian\",",
									"    \"Hispanic/Latinx\",",
									"    \"Native American, Indian American, or Alaska Native\",",
									"    \"Native Hawaiian or other Pacific Islander\",",
									"    \"Middle Eastern or North African\",",
									"    \"Prefer not to answer\",",
									"    \"Other\"",
									"];",
									"",
									"let languagesList = [",
									"    \"English\",",
									"    \"Spanish\",",
									"    \"Chinese\",",
									"    \"French\",",
									"    \"Tagalog\",",
									"    \"Vietnamese\",",
									"    \"Korean\",",
									"    \"German\",",
									"    \"Russian\",",
									"    \"Italian\",",
									"    \"Portuguese\",",
									"    \"Polish\",",
									"    \"Japanese\",",
									"    \"Persian\",",
									"    \"Greek\",",
									"    \"Serbo-Croatian\",",
									"    \"Armenian\",",
									"    \"Yiddish\",",
									"    \"American Sign Language (ASL)\"",
									"];",
									"",
									"let sexList = [",
									"    \"Male\",",
									"    \"Female\"",
									"];",
									"",
									"let timezonesList = [",
									"    \"Hawaii Standard Time\",",
									"    \"Hawaii-Aleutian Time\",",
									"    \"Alaska Time\",",
									"    \"Pacific Time\",",
									"    \"Arizona\",",
									"    \"Mountain Time\",",
									"    \"Central Time\",",
									"    \"Eastern Time\"",
									"];",
									"",
									"let contactPreferences = [\"Email\", \"No preference\", \"Phone\", \"Unknown\"];",
									"",
									"let statesList = [\"AK\", \"AL\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"DC\", \"FL\", \"GA\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"OH\", \"OK\", \"OR\", \"PA\", \"PR\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\", \"Outside US\", \"Unknown\"];",
									"",
									"let addressLine2List = [\"Apt 1\", \"Apt 2\", \"Apt 3\", \"Unit #1\", \"Unit #2\", \"Unit #3\", \"Apt 2L\", \"Apt 2R\"];",
									"",
									"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let lastName = pm.variables.replaceIn('{{$randomLastName}}');",
									"let chosenName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let email = \"sreedhar\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
									"let zip = Math.floor(10000 + Math.random() * 90000);",
									"",
									"//Generate random Date of Birth in YYYY-MM-DD Format",
									"function randomDate(start, end) {",
									"    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));",
									"}",
									"let date = randomDate(new Date(1990, 00, 01), new Date());",
									"let dateOfBirth = date.getFullYear() + '-' + (\"0\" + (date.getMonth() + 1)).slice(-2) + '-' + (\"0\" + date.getDate()).slice(-2);",
									"",
									"//Save the variables to be used in next request for validation",
									"pm.environment.set(\"supportFirstName\", firstName);",
									"pm.environment.set(\"supportLastName\", lastName);",
									"pm.environment.set(\"relationtopatient\", ld.sample(relation_to_patient));",
									"pm.environment.set(\"patientEmail\", email);",
									"pm.environment.set(\"patientPhoneNumber\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));",
									"pm.environment.set(\"patientChosenName\", chosenName);",
									"pm.environment.set(\"patientDateOfBirth\", dateOfBirth);",
									"pm.environment.set(\"patientAddressLine1\", pm.variables.replaceIn('{{$randomStreetAddress}}'));",
									"pm.environment.set(\"patientAddressLine2\", ld.sample(addressLine2List));",
									"pm.environment.set(\"patientCity\", pm.variables.replaceIn('{{$randomCity}}'));",
									"pm.environment.set(\"patientState\", ld.sample(statesList));",
									"pm.environment.set(\"patientCountry\", \"US\");",
									"pm.environment.set(\"patientZip\", zip.toString());",
									"pm.environment.set(\"patientLatitude\", pm.variables.replaceIn('{{$randomLatitude}}'));",
									"pm.environment.set(\"patientLongitude\", pm.variables.replaceIn('{{$randomLongitude}}'));",
									"pm.environment.set(\"patientEthnicities\", JSON.stringify(ld.sampleSize(ethnicitiesList, 2).sort()));",
									"pm.environment.set(\"patientLanguages\", JSON.stringify(ld.sampleSize(languagesList, 2).sort()));",
									"pm.environment.set(\"patientGenderOnRecord\", ld.sample(gendersList));",
									"pm.environment.set(\"patientGenderOffRecord\", ld.sample(gendersList));",
									"pm.environment.set(\"patientPronounsOnRecord\", ld.sample(pronounsList));",
									"pm.environment.set(\"patientPronounsOffRecord\", ld.sample(pronounsList));",
									"pm.environment.set(\"patientSex\", ld.sample(sexList));",
									"pm.environment.set(\"patientTimezone\", ld.sample(timezonesList));",
									"pm.environment.set(\"patientContactPreferences\", JSON.stringify(ld.sampleSize(contactPreferences, 2).sort()));"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "13f37c2a-91b7-46ca-8a46-0df1cd1dbc0c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{supportFirstName}}\",\n    \"lastName\": \"{{supportLastName}}\",\n    \"email\": \"{{patientEmail}}\",\n    \"cellPhone\": \"{{patientPhoneNumber}}\",\n    \"gender\": \"{{patientGenderOnRecord}}\",\n    \"pronouns\": \"{{patientPronounsOnRecord}}\",\n    \"sex\": \"{{patientSex}}\",\n    \"timezone\": \"{{patientTimezone}}\",\n    \"latitude\": \"{{patientLatitude}}\",\n    \"longitude\": \"{{patientLongitude}}\",\n    \"affiliationName\": \"\",\n    \"addressLine1\": \"{{patientAddressLine1}}\",\n    \"addressLine2\": \"{{patientAddressLine2}}\",\n    \"city\": \"{{patientCity}}\",\n    \"state\": \"{{patientState}}\",\n    \"country\": \"{{patientCountry}}\",\n    \"zip\": \"{{patientZip}}\",\n    \"contactPreferences\": {{patientContactPreferences}},\n    \"languages\": {{patientLanguages}},\n    \"patientExternalId\": \"{{patientId}}\",\n   \"relationToPatient\": \"{{relationtopatient}}\",\n    \"isProxy\": true,\n    \"isPrimaryContact\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/supports",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"supports"
							]
						}
					},
					"response": []
				},
				{
					"name": "get Proxy Support User Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "57a7abc9-5420-4b55-a803-d1a8d5cc5b22",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Verify support details\", function () {",
									"   ",
									"",
									"    pm.expect(jsonData[0].supportExternalId).to.equal(pm.environment.get(\"supportId1\"));",
									"    pm.expect(jsonData[0].isProxy).to.equal(true);",
									"    pm.expect(jsonData[0].hasLoggedIn).to.equal(false);",
									"    pm.expect(jsonData[0].contactExternalId).to.equal(null);",
									"    pm.expect(jsonData[0].isOngoingProvider).to.equal(null);",
									"    pm.expect(jsonData[0].isReferringProvider).to.equal(null);",
									"",
									"",
									"",
									"",
									"  ",
									" ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "00376ab9-d384-45a4-9f63-0433ff489093",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{host}}/users/patients/patient-contact/{{patientId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients",
								"patient-contact",
								"{{patientId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c6f40441-e65d-4751-a247-2d4b0a435b85",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify id is generated\", function () {",
									"    pm.expect(jsonData.id).length.greaterThan(0);",
									"});",
									"",
									"pm.environment.set(\"patientId1\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "21cada27-f580-486c-922d-1b6210e72eac",
								"exec": [
									"let ld = require('lodash');",
									"",
									"let gendersList = [",
									"    \"Cis-gender male\",",
									"    \"Cis-gender female\",",
									"    \"Non-binary\",",
									"    \"Other\",",
									"    \"Unknown\",",
									"    \"Transgender male\",",
									"    \"Transgender female\"",
									"];",
									"",
									"let pronounsList = [",
									"    \"He/Him/His\",",
									"    \"She/Her/Hers\",",
									"    \"They/Them/Theirs\",",
									"    \"Other\"",
									"];",
									"",
									"let ethnicitiesList = [",
									"    \"Asian\",",
									"    \"Black/African American\",",
									"    \"White/Caucasian\",",
									"    \"Hispanic/Latinx\",",
									"    \"Native American, Indian American, or Alaska Native\",",
									"    \"Native Hawaiian or other Pacific Islander\",",
									"    \"Middle Eastern or North African\",",
									"    \"Prefer not to answer\",",
									"    \"Other\"",
									"];",
									"",
									"let languagesList = [",
									"    \"English\",",
									"    \"Spanish\",",
									"    \"Chinese\",",
									"    \"French\",",
									"    \"Tagalog\",",
									"    \"Vietnamese\",",
									"    \"Korean\",",
									"    \"German\",",
									"    \"Russian\",",
									"    \"Italian\",",
									"    \"Portuguese\",",
									"    \"Polish\",",
									"    \"Japanese\",",
									"    \"Persian\",",
									"    \"Greek\",",
									"    \"Serbo-Croatian\",",
									"    \"Armenian\",",
									"    \"Yiddish\",",
									"    \"American Sign Language (ASL)\"",
									"];",
									"",
									"let sexList = [",
									"    \"Male\",",
									"    \"Female\"",
									"];",
									"",
									"let timezonesList = [",
									"    \"Hawaii Standard Time\",",
									"    \"Hawaii-Aleutian Time\",",
									"    \"Alaska Time\",",
									"    \"Pacific Time\",",
									"    \"Arizona\",",
									"    \"Mountain Time\",",
									"    \"Central Time\",",
									"    \"Eastern Time\"",
									"];",
									"",
									"let contactPreferences = [\"Email\", \"No preference\", \"Phone\", \"Unknown\"];",
									"",
									"let statesList = [\"AK\", \"AL\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"DC\", \"FL\", \"GA\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"OH\", \"OK\", \"OR\", \"PA\", \"PR\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\", \"Outside US\", \"Unknown\"];",
									"",
									"let addressLine2List = [\"Apt 1\", \"Apt 2\", \"Apt 3\", \"Unit #1\", \"Unit #2\", \"Unit #3\", \"Apt 2L\", \"Apt 2R\"];",
									"",
									"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let lastName = pm.variables.replaceIn('{{$randomLastName}}');",
									"let chosenName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let email = \"qa\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
									"let zip = Math.floor(10000 + Math.random() * 90000);",
									"",
									"//Generate random Date of Birth in YYYY-MM-DD Format",
									"function randomDate(start, end) {",
									"    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));",
									"}",
									"let date = randomDate(new Date(1990, 00, 01), new Date());",
									"let dateOfBirth = date.getFullYear() + '-' + (\"0\" + (date.getMonth() + 1)).slice(-2) + '-' + (\"0\" + date.getDate()).slice(-2);",
									"",
									"//Save the variables to be used in next request for validation",
									"pm.environment.set(\"patientFirstName\", firstName);",
									"pm.environment.set(\"patientLastName\", lastName);",
									"pm.environment.set(\"patientEmail\", email);",
									"pm.environment.set(\"patientPhoneNumber\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));",
									"pm.environment.set(\"patientChosenName\", chosenName);",
									"pm.environment.set(\"patientDateOfBirth\", dateOfBirth);",
									"pm.environment.set(\"patientAddressLine1\", pm.variables.replaceIn('{{$randomStreetAddress}}'));",
									"pm.environment.set(\"patientAddressLine2\", ld.sample(addressLine2List));",
									"pm.environment.set(\"patientCity\", pm.variables.replaceIn('{{$randomCity}}'));",
									"pm.environment.set(\"patientState\", ld.sample(statesList));",
									"pm.environment.set(\"patientCountry\", \"US\");",
									"pm.environment.set(\"patientZip\", zip.toString());",
									"pm.environment.set(\"patientLatitude\", pm.variables.replaceIn('{{$randomLatitude}}'));",
									"pm.environment.set(\"patientLongitude\", pm.variables.replaceIn('{{$randomLongitude}}'));",
									"pm.environment.set(\"patientEthnicities\", JSON.stringify(ld.sampleSize(ethnicitiesList, 2).sort()));",
									"pm.environment.set(\"patientLanguages\", JSON.stringify(ld.sampleSize(languagesList, 2).sort()));",
									"pm.environment.set(\"patientGenderOnRecord\", ld.sample(gendersList));",
									"pm.environment.set(\"patientGenderOffRecord\", ld.sample(gendersList));",
									"pm.environment.set(\"patientPronounsOnRecord\", ld.sample(pronounsList));",
									"pm.environment.set(\"patientPronounsOffRecord\", ld.sample(pronounsList));",
									"pm.environment.set(\"patientSex\", ld.sample(sexList));",
									"pm.environment.set(\"patientTimezone\", ld.sample(timezonesList));",
									"pm.environment.set(\"patientContactPreferences\", JSON.stringify(ld.sampleSize(contactPreferences, 2).sort()));"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0be3e7b0-a1e0-44b6-8d64-79d60eb1382b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{patientFirstName}}\",\n    \"lastName\": \"{{patientLastName}}\",\n    \"dateOfBirth\": \"{{patientDateOfBirth}}\",\n    \"email\": \"{{patientEmail}}\",\n    \"contactPreferences\": {{patientContactPreferences}},\n    \"ethnicities\": {{patientEthnicities}},\n    \"phoneNumber\": \"{{patientPhoneNumber}}\",\n    \"chosenName\": \"{{patientChosenName}}\",\n    \"languages\": {{patientLanguages}},\n    \"genderOnRecord\": \"{{patientGenderOnRecord}}\",\n    \"genderOffRecord\": \"{{patientGenderOffRecord}}\",\n    \"pronounsOnRecord\": \"{{patientPronounsOnRecord}}\",\n    \"pronounsOffRecord\": \"{{patientPronounsOffRecord}}\",\n    \"sex\": \"{{patientSex}}\",\n    \"timezone\": \"{{patientTimezone}}\",\n    \"latitude\": \"{{patientLatitude}}\",\n    \"longitude\": \"{{patientLongitude}}\",\n    \"addressLine1\": \"{{patientAddressLine1}}\",\n    \"addressLine2\": \"{{patientAddressLine2}}\",\n    \"city\": \"{{patientCity}}\",\n    \"country\": \"{{patientCountry}}\",\n    \"state\": \"{{patientState}}\",\n    \"zip\": \"{{patientZip}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/patients",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add  General Support User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ff37ab8e-9b9f-441b-9be0-ea417a3a40df",
								"exec": [
									"let text = pm.response.text();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"",
									"",
									"pm.environment.set(\"supportId2\", text);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c02ed06f-c72d-47c0-aafb-d03d4bbb6757",
								"exec": [
									"let ld = require('lodash');",
									"",
									"const relation_to_patient = [",
									"  \"Adopted sibling\",",
									"  \"Adoptive father\",",
									"  \"Adoptive mother\",",
									"  \"Adoptive parent\",",
									"  \"Biological father\",",
									"  \"Biological mother\",",
									"  \"Biological parent\",",
									"  \"Biological sibling\",",
									"  \"Case Manager/Discharge Planner\",",
									"  \"Community org/non-profit\",",
									"  \"Community professional\",",
									"  \"Dietitian\",",
									"  \"Doctor\",",
									"  \"Eating disorder coach/advocate\",",
									"  \"Executive\",",
									"  \"Family member\",",
									"  \"Father\",",
									"  \"Foster father\",",
									"  \"Foster mother\",",
									"  \"Foster parent\",",
									"  \"Friend\",",
									"  \"Grandparent\",",
									"  \"Guardian\",",
									"  \"Half sibling\",",
									"  \"Hospital\",",
									"  \"Insurance company\",",
									"  \"Maternal grandfather\",",
									"  \"Maternal grandmother\",",
									"  \"Mother\",",
									"  \"Nurse\",",
									"  \"Nurse practitioner\",",
									"  \"Other\",",
									"  \"Outreach professional\",",
									"  \"Paternal grandfather\",",
									"  \"Paternal grandmother\",",
									"  \"Payor case manager\",",
									"  \"Physician Assistant\",",
									"  \"Physician: Adolescent Medicine/Eating Disorder Specialist\",",
									"  \"Physician: Endocrinologist\",",
									"  \"Physician: Family Medicine\",",
									"  \"Physician: Gastroenterologist\",",
									"  \"Physician: Other specialist\",",
									"  \"Physician: PCP (non-peds)\",",
									"  \"Physician: Pediatrician\",",
									"  \"Practice Manager\",",
									"  \"Psychiatrist\",",
									"  \"Psychologist\",",
									"  \"Referral Coordinator\",",
									"  \"School nurse\",",
									"  \"School therapist/counselor\",",
									"  \"Step sibling\",",
									"  \"Stepfather\",",
									"  \"Stepmother\",",
									"  \"Stepparent\",",
									"  \"Strategic Partner\",",
									"  \"Therapist\",",
									"  \"Treatment Center (eating disorder)\",",
									"  \"Treatment Center (non-ED)\",",
									"  \"University: Counseling Center\",",
									"  \"University: Student Health\"",
									"];",
									"",
									"let gendersList = [",
									"    \"Cis-gender male\",",
									"    \"Cis-gender female\",",
									"    \"Non-binary\",",
									"    \"Other\",",
									"    \"Unknown\",",
									"    \"Transgender male\",",
									"    \"Transgender female\"",
									"];",
									"",
									"let pronounsList = [",
									"    \"He/Him/His\",",
									"    \"She/Her/Hers\",",
									"    \"They/Them/Theirs\",",
									"    \"Other\"",
									"];",
									"",
									"let ethnicitiesList = [",
									"    \"Asian\",",
									"    \"Black/African American\",",
									"    \"White/Caucasian\",",
									"    \"Hispanic/Latinx\",",
									"    \"Native American, Indian American, or Alaska Native\",",
									"    \"Native Hawaiian or other Pacific Islander\",",
									"    \"Middle Eastern or North African\",",
									"    \"Prefer not to answer\",",
									"    \"Other\"",
									"];",
									"",
									"let languagesList = [",
									"    \"English\",",
									"    \"Spanish\",",
									"    \"Chinese\",",
									"    \"French\",",
									"    \"Tagalog\",",
									"    \"Vietnamese\",",
									"    \"Korean\",",
									"    \"German\",",
									"    \"Russian\",",
									"    \"Italian\",",
									"    \"Portuguese\",",
									"    \"Polish\",",
									"    \"Japanese\",",
									"    \"Persian\",",
									"    \"Greek\",",
									"    \"Serbo-Croatian\",",
									"    \"Armenian\",",
									"    \"Yiddish\",",
									"    \"American Sign Language (ASL)\"",
									"];",
									"",
									"let sexList = [",
									"    \"Male\",",
									"    \"Female\"",
									"];",
									"",
									"let timezonesList = [",
									"    \"Hawaii Standard Time\",",
									"    \"Hawaii-Aleutian Time\",",
									"    \"Alaska Time\",",
									"    \"Pacific Time\",",
									"    \"Arizona\",",
									"    \"Mountain Time\",",
									"    \"Central Time\",",
									"    \"Eastern Time\"",
									"];",
									"",
									"let contactPreferences = [\"Email\", \"No preference\", \"Phone\", \"Unknown\"];",
									"",
									"let statesList = [\"AK\", \"AL\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"DC\", \"FL\", \"GA\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"OH\", \"OK\", \"OR\", \"PA\", \"PR\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\", \"Outside US\", \"Unknown\"];",
									"",
									"let addressLine2List = [\"Apt 1\", \"Apt 2\", \"Apt 3\", \"Unit #1\", \"Unit #2\", \"Unit #3\", \"Apt 2L\", \"Apt 2R\"];",
									"",
									"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let lastName = pm.variables.replaceIn('{{$randomLastName}}');",
									"let chosenName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let email = \"sreedhar\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
									"let zip = Math.floor(10000 + Math.random() * 90000);",
									"",
									"//Generate random Date of Birth in YYYY-MM-DD Format",
									"function randomDate(start, end) {",
									"    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));",
									"}",
									"let date = randomDate(new Date(1990, 00, 01), new Date());",
									"let dateOfBirth = date.getFullYear() + '-' + (\"0\" + (date.getMonth() + 1)).slice(-2) + '-' + (\"0\" + date.getDate()).slice(-2);",
									"",
									"//Save the variables to be used in next request for validation",
									"pm.environment.set(\"supportFirstName\", firstName);",
									"pm.environment.set(\"supportLastName\", lastName);",
									"pm.environment.set(\"relationtopatient\", ld.sample(relation_to_patient));",
									"pm.environment.set(\"patientEmail\", email);",
									"pm.environment.set(\"patientPhoneNumber\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));",
									"pm.environment.set(\"patientChosenName\", chosenName);",
									"pm.environment.set(\"patientDateOfBirth\", dateOfBirth);",
									"pm.environment.set(\"patientAddressLine1\", pm.variables.replaceIn('{{$randomStreetAddress}}'));",
									"pm.environment.set(\"patientAddressLine2\", ld.sample(addressLine2List));",
									"pm.environment.set(\"patientCity\", pm.variables.replaceIn('{{$randomCity}}'));",
									"pm.environment.set(\"patientState\", ld.sample(statesList));",
									"pm.environment.set(\"patientCountry\", \"US\");",
									"pm.environment.set(\"patientZip\", zip.toString());",
									"pm.environment.set(\"patientLatitude\", pm.variables.replaceIn('{{$randomLatitude}}'));",
									"pm.environment.set(\"patientLongitude\", pm.variables.replaceIn('{{$randomLongitude}}'));",
									"pm.environment.set(\"patientEthnicities\", JSON.stringify(ld.sampleSize(ethnicitiesList, 2).sort()));",
									"pm.environment.set(\"patientLanguages\", JSON.stringify(ld.sampleSize(languagesList, 2).sort()));",
									"pm.environment.set(\"patientGenderOnRecord\", ld.sample(gendersList));",
									"pm.environment.set(\"patientGenderOffRecord\", ld.sample(gendersList));",
									"pm.environment.set(\"patientPronounsOnRecord\", ld.sample(pronounsList));",
									"pm.environment.set(\"patientPronounsOffRecord\", ld.sample(pronounsList));",
									"pm.environment.set(\"patientSex\", ld.sample(sexList));",
									"pm.environment.set(\"patientTimezone\", ld.sample(timezonesList));",
									"pm.environment.set(\"patientContactPreferences\", JSON.stringify(ld.sampleSize(contactPreferences, 2).sort()));"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4d5fe8c6-bad0-49d3-b6d6-e0b8ea0e3a3a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{supportFirstName}}\",\n    \"lastName\": \"{{supportLastName}}\",\n    \"email\": \"{{patientEmail}}\",\n    \"cellPhone\": \"{{patientPhoneNumber}}\",\n    \"gender\": \"{{patientGenderOnRecord}}\",\n    \"pronouns\": \"{{patientPronounsOnRecord}}\",\n    \"sex\": \"{{patientSex}}\",\n    \"timezone\": \"{{patientTimezone}}\",\n    \"latitude\": \"{{patientLatitude}}\",\n    \"longitude\": \"{{patientLongitude}}\",\n    \"affiliationName\": \"\",\n    \"addressLine1\": \"{{patientAddressLine1}}\",\n    \"addressLine2\": \"{{patientAddressLine2}}\",\n    \"city\": \"{{patientCity}}\",\n    \"state\": \"{{patientState}}\",\n    \"country\": \"{{patientCountry}}\",\n    \"zip\": \"{{patientZip}}\",\n    \"contactPreferences\": {{patientContactPreferences}},\n    \"languages\": {{patientLanguages}},\n    \"patientExternalId\": \"{{patientId1}}\",\n   \"relationToPatient\": \"{{relationtopatient}}\",\n    \"isProxy\": false,\n    \"isPrimaryContact\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/supports",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"supports"
							]
						}
					},
					"response": []
				},
				{
					"name": "get General Support User Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "292422a1-bfff-454b-9a79-d2c06da8297c",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Verify support details\", function () {",
									"   ",
									"",
									"    pm.expect(jsonData[0].supportExternalId).to.equal(pm.environment.get(\"supportId2\"));",
									"    pm.expect(jsonData[0].isProxy).to.equal(false);",
									"    pm.expect(jsonData[0].hasLoggedIn).to.equal(false);",
									"    pm.expect(jsonData[0].contactExternalId).to.equal(null);",
									"    pm.expect(jsonData[0].isOngoingProvider).to.equal(null);",
									"    pm.expect(jsonData[0].isReferringProvider).to.equal(null);",
									"",
									"",
									"",
									"",
									"  ",
									" ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "12954bb5-bcf4-44cd-ad98-ae8ddaf12fb4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{host}}/users/patients/patient-contact/{{patientId1}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients",
								"patient-contact",
								"{{patientId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Convert Genreal to Proxy User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bbd3c0fd-a2bb-475c-8197-8fd30691d5d9",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.environment.set(\"supportId2\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "65d849fa-816d-492e-ba3c-f7bdd9dbd512",
								"exec": [
									"let ld = require('lodash');",
									"",
									"const relation_to_patient = [",
									"  \"Adopted sibling\",",
									"  \"Adoptive father\",",
									"  \"Adoptive mother\",",
									"  \"Adoptive parent\",",
									"  \"Biological father\",",
									"  \"Biological mother\",",
									"  \"Biological parent\",",
									"  \"Biological sibling\",",
									"  \"Case Manager/Discharge Planner\",",
									"  \"Community org/non-profit\",",
									"  \"Community professional\",",
									"  \"Dietitian\",",
									"  \"Doctor\",",
									"  \"Eating disorder coach/advocate\",",
									"  \"Executive\",",
									"  \"Family member\",",
									"  \"Father\",",
									"  \"Foster father\",",
									"  \"Foster mother\",",
									"  \"Foster parent\",",
									"  \"Friend\",",
									"  \"Grandparent\",",
									"  \"Guardian\",",
									"  \"Half sibling\",",
									"  \"Hospital\",",
									"  \"Insurance company\",",
									"  \"Maternal grandfather\",",
									"  \"Maternal grandmother\",",
									"  \"Mother\",",
									"  \"Nurse\",",
									"  \"Nurse practitioner\",",
									"  \"Other\",",
									"  \"Outreach professional\",",
									"  \"Paternal grandfather\",",
									"  \"Paternal grandmother\",",
									"  \"Payor case manager\",",
									"  \"Physician Assistant\",",
									"  \"Physician: Adolescent Medicine/Eating Disorder Specialist\",",
									"  \"Physician: Endocrinologist\",",
									"  \"Physician: Family Medicine\",",
									"  \"Physician: Gastroenterologist\",",
									"  \"Physician: Other specialist\",",
									"  \"Physician: PCP (non-peds)\",",
									"  \"Physician: Pediatrician\",",
									"  \"Practice Manager\",",
									"  \"Psychiatrist\",",
									"  \"Psychologist\",",
									"  \"Referral Coordinator\",",
									"  \"School nurse\",",
									"  \"School therapist/counselor\",",
									"  \"Step sibling\",",
									"  \"Stepfather\",",
									"  \"Stepmother\",",
									"  \"Stepparent\",",
									"  \"Strategic Partner\",",
									"  \"Therapist\",",
									"  \"Treatment Center (eating disorder)\",",
									"  \"Treatment Center (non-ED)\",",
									"  \"University: Counseling Center\",",
									"  \"University: Student Health\"",
									"];",
									"",
									"let gendersList = [",
									"    \"Cis-gender male\",",
									"    \"Cis-gender female\",",
									"    \"Non-binary\",",
									"    \"Other\",",
									"    \"Unknown\",",
									"    \"Transgender male\",",
									"    \"Transgender female\"",
									"];",
									"",
									"let pronounsList = [",
									"    \"He/Him/His\",",
									"    \"She/Her/Hers\",",
									"    \"They/Them/Theirs\",",
									"    \"Other\"",
									"];",
									"",
									"let ethnicitiesList = [",
									"    \"Asian\",",
									"    \"Black/African American\",",
									"    \"White/Caucasian\",",
									"    \"Hispanic/Latinx\",",
									"    \"Native American, Indian American, or Alaska Native\",",
									"    \"Native Hawaiian or other Pacific Islander\",",
									"    \"Middle Eastern or North African\",",
									"    \"Prefer not to answer\",",
									"    \"Other\"",
									"];",
									"",
									"let languagesList = [",
									"    \"English\",",
									"    \"Spanish\",",
									"    \"Chinese\",",
									"    \"French\",",
									"    \"Tagalog\",",
									"    \"Vietnamese\",",
									"    \"Korean\",",
									"    \"German\",",
									"    \"Russian\",",
									"    \"Italian\",",
									"    \"Portuguese\",",
									"    \"Polish\",",
									"    \"Japanese\",",
									"    \"Persian\",",
									"    \"Greek\",",
									"    \"Serbo-Croatian\",",
									"    \"Armenian\",",
									"    \"Yiddish\",",
									"    \"American Sign Language (ASL)\"",
									"];",
									"",
									"let sexList = [",
									"    \"Male\",",
									"    \"Female\"",
									"];",
									"",
									"let timezonesList = [",
									"    \"Hawaii Standard Time\",",
									"    \"Hawaii-Aleutian Time\",",
									"    \"Alaska Time\",",
									"    \"Pacific Time\",",
									"    \"Arizona\",",
									"    \"Mountain Time\",",
									"    \"Central Time\",",
									"    \"Eastern Time\"",
									"];",
									"",
									"let contactPreferences = [\"Email\", \"No preference\", \"Phone\", \"Unknown\"];",
									"",
									"let statesList = [\"AK\", \"AL\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"DC\", \"FL\", \"GA\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"OH\", \"OK\", \"OR\", \"PA\", \"PR\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\", \"Outside US\", \"Unknown\"];",
									"",
									"let addressLine2List = [\"Apt 1\", \"Apt 2\", \"Apt 3\", \"Unit #1\", \"Unit #2\", \"Unit #3\", \"Apt 2L\", \"Apt 2R\"];",
									"",
									"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let lastName = pm.variables.replaceIn('{{$randomLastName}}');",
									"let chosenName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let email = \"sreedhar\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
									"let zip = Math.floor(10000 + Math.random() * 90000);",
									"",
									"//Generate random Date of Birth in YYYY-MM-DD Format",
									"function randomDate(start, end) {",
									"    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));",
									"}",
									"let date = randomDate(new Date(1990, 00, 01), new Date());",
									"let dateOfBirth = date.getFullYear() + '-' + (\"0\" + (date.getMonth() + 1)).slice(-2) + '-' + (\"0\" + date.getDate()).slice(-2);",
									"",
									"//Save the variables to be used in next request for validation",
									"pm.environment.set(\"supportFirstName\", firstName);",
									"pm.environment.set(\"supportLastName\", lastName);",
									"pm.environment.set(\"relationtopatient\", ld.sample(relation_to_patient));",
									"pm.environment.set(\"patientEmail\", email);",
									"pm.environment.set(\"patientPhoneNumber\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));",
									"pm.environment.set(\"patientChosenName\", chosenName);",
									"pm.environment.set(\"patientDateOfBirth\", dateOfBirth);",
									"pm.environment.set(\"patientAddressLine1\", pm.variables.replaceIn('{{$randomStreetAddress}}'));",
									"pm.environment.set(\"patientAddressLine2\", ld.sample(addressLine2List));",
									"pm.environment.set(\"patientCity\", pm.variables.replaceIn('{{$randomCity}}'));",
									"pm.environment.set(\"patientState\", ld.sample(statesList));",
									"pm.environment.set(\"patientCountry\", \"US\");",
									"pm.environment.set(\"patientZip\", zip.toString());",
									"pm.environment.set(\"patientLatitude\", pm.variables.replaceIn('{{$randomLatitude}}'));",
									"pm.environment.set(\"patientLongitude\", pm.variables.replaceIn('{{$randomLongitude}}'));",
									"pm.environment.set(\"patientEthnicities\", JSON.stringify(ld.sampleSize(ethnicitiesList, 2).sort()));",
									"pm.environment.set(\"patientLanguages\", JSON.stringify(ld.sampleSize(languagesList, 2).sort()));",
									"pm.environment.set(\"patientGenderOnRecord\", ld.sample(gendersList));",
									"pm.environment.set(\"patientGenderOffRecord\", ld.sample(gendersList));",
									"pm.environment.set(\"patientPronounsOnRecord\", ld.sample(pronounsList));",
									"pm.environment.set(\"patientPronounsOffRecord\", ld.sample(pronounsList));",
									"pm.environment.set(\"patientSex\", ld.sample(sexList));",
									"pm.environment.set(\"patientTimezone\", ld.sample(timezonesList));",
									"pm.environment.set(\"patientContactPreferences\", JSON.stringify(ld.sampleSize(contactPreferences, 2).sort()));"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ed70cf04-efe4-4139-8448-0c8a80dd4afe",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{supportFirstName}}\",\n    \"lastName\": \"{{supportLastName}}\",\n    \"email\": \"{{patientEmail}}\",\n    \"cellPhone\": \"{{patientPhoneNumber}}\",\n    \"gender\": \"{{patientGenderOnRecord}}\",\n    \"pronouns\": \"{{patientPronounsOnRecord}}\",\n    \"sex\": \"{{patientSex}}\",\n    \"timezone\": \"{{patientTimezone}}\",\n    \"latitude\": \"{{patientLatitude}}\",\n    \"longitude\": \"{{patientLongitude}}\",\n    \"affiliationName\": \"\",\n    \"addressLine1\": \"{{patientAddressLine1}}\",\n    \"addressLine2\": \"{{patientAddressLine2}}\",\n    \"city\": \"{{patientCity}}\",\n    \"state\": \"{{patientState}}\",\n    \"country\": \"{{patientCountry}}\",\n    \"zip\": \"{{patientZip}}\",\n    \"contactPreferences\": {{patientContactPreferences}},\n    \"languages\": {{patientLanguages}},\n    \"patientExternalId\": \"{{patientId1}}\",\n   \"relationToPatient\": \"{{relationtopatient}}\",\n    \"isProxy\": true,\n    \"isPrimaryContact\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/supports/{{supportId2}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"supports",
								"{{supportId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get Proxy Support User Details Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ba479c0-c2f4-455a-89b7-f51b81e02f7c",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Verify support details\", function () {",
									"   ",
									"",
									"    pm.expect(jsonData[0].supportExternalId).to.equal(pm.environment.get(\"supportId2\"));",
									"    pm.expect(jsonData[0].isProxy).to.equal(true);",
									"    pm.expect(jsonData[0].hasLoggedIn).to.equal(false);",
									"    pm.expect(jsonData[0].contactExternalId).to.equal(null);",
									"    pm.expect(jsonData[0].isOngoingProvider).to.equal(null);",
									"    pm.expect(jsonData[0].isReferringProvider).to.equal(null);",
									"",
									"",
									"",
									"",
									"  ",
									" ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "553c031d-4cd9-45a1-824c-e2da91a129f8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{host}}/users/patients/patient-contact/{{patientId1}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients",
								"patient-contact",
								"{{patientId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Revoke Support Access",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "178a4524-f710-4355-9f80-5b10aa5b643f",
								"exec": [
									"let jsonText = pm.response.text();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify response message\", function () {",
									"    pm.expect(jsonText).to.equal(\"Support account access revoked successfully.\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3e2d2d4c-4926-4579-97a5-3d433c49bbde",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5e2636c3-4639-4527-84b0-877de8118957",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/supports/{{supportId1}}/patient-link?patient-external-id={{patientId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"supports",
								"{{supportId1}}",
								"patient-link"
							],
							"query": [
								{
									"key": "patient-external-id",
									"value": "{{patientId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Patient First Heard",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e06bc312-05f1-4c8b-8e53-dfd5bc784a36",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify id is generated\", function () {",
									"    pm.expect(jsonData.id).length.greaterThan(0);",
									"});",
									"",
									"pm.environment.set(\"patientId\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "92dc87fb-8761-44ea-918b-a4ece6529bef",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "95685532-8885-4215-b89c-629d9539f32d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{patientFirstName}}\",\n    \"lastName\": \"{{patientLastName}}\",\n    \"dateOfBirth\": \"{{patientDateOfBirth}}\",\n    \"email\": \"{{patientEmail}}\",\n    \"contactPreferences\": {{patientContactPreferences}},\n    \"ethnicities\": {{patientEthnicities}},\n    \"phoneNumber\": \"{{patientPhoneNumber}}\",\n    \"chosenName\": \"{{patientChosenName}}\",\n    \"languages\": {{patientLanguages}},\n    \"genderOnRecord\": \"{{patientGenderOnRecord}}\",\n    \"genderOffRecord\": \"{{patientGenderOffRecord}}\",\n    \"pronounsOnRecord\": \"{{patientPronounsOnRecord}}\",\n    \"pronounsOffRecord\": \"{{patientPronounsOffRecord}}\",\n    \"sex\": \"{{patientSex}}\",\n    \"timezone\": \"{{patientTimezone}}\",\n    \"latitude\": \"{{patientLatitude}}\",\n    \"longitude\": \"{{patientLongitude}}\",\n    \"addressLine1\": \"{{patientAddressLine1}}\",\n    \"addressLine2\": \"{{patientAddressLine2}}\",\n    \"city\": \"{{patientCity}}\",\n    \"country\": \"{{patientCountry}}\",\n    \"state\": \"{{patientState}}\",\n    \"zip\": \"{{patientZip}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/patients",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Patient  First Heard",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0eaa5675-e9d6-4ede-b927-84c1892a6a6a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c8997808-b114-4533-925c-2ef41a2c4514",
								"exec": [
									"let jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 4000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a JSON body\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.environment.set(\"patientId\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1578f16c-6fac-4bc3-8a0c-7addd8b37442",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{patientFirstName}}\",\n    \"lastName\": \"{{patientLastName}}\",\n    \"dateOfBirth\": \"{{patientDateOfBirth}}\",\n    \"email\": \"{{patientEmail}}\",\n    \"contactPreferences\": {{patientContactPreferences}},\n    \"ethnicities\": {{patientEthnicities}},\n    \"phoneNumber\": \"{{patientPhoneNumber}}\",\n    \"chosenName\": \"{{patientChosenName}}\",\n    \"firstHeardAboutEquipExtId\": \"{{UUID}}\",\n    \"languages\": {{patientLanguages}},\n    \"genderOnRecord\": \"{{patientGenderOnRecord}}\",\n    \"genderOffRecord\": \"{{patientGenderOffRecord}}\",\n    \"pronounsOnRecord\": \"{{patientPronounsOnRecord}}\",\n    \"pronounsOffRecord\": \"{{patientPronounsOffRecord}}\",\n    \"sex\": \"{{patientSex}}\",\n    \"timezone\": \"{{patientTimezone}}\",\n    \"latitude\": \"{{patientLatitude}}\",\n    \"longitude\": \"{{patientLongitude}}\",\n    \"addressLine1\": \"{{patientAddressLine1}}\",\n    \"addressLine2\": \"{{patientAddressLine2}}\",\n    \"city\": \"{{patientCity}}\",\n    \"country\": \"{{patientCountry}}\",\n    \"state\": \"{{patientState}}\",\n    \"zip\": \"{{patientZip}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/patients/{{patientId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients",
								"{{patientId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Patient by ID  First Heard",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5863ec4-1e91-49b2-9178-f49b94920352",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Verify patient details\", function () {",
									"    pm.expect(jsonData.userId).to.eql(pm.environment.get(\"patientId\"));",
									"    pm.expect(jsonData.firstName).to.eql(pm.environment.get(\"patientFirstName\"));",
									"    pm.expect(jsonData.lastName).to.eql(pm.environment.get(\"patientLastName\"));",
									"    pm.expect(jsonData.email).to.eql(pm.environment.get(\"patientEmail\"));",
									"    pm.expect(jsonData.phoneNumber).to.eql(pm.environment.get(\"patientPhoneNumber\"));",
									"    pm.expect(jsonData.chosenName).to.eql(pm.environment.get(\"patientChosenName\"));",
									"    pm.expect(jsonData.dateOfBirth).to.eql(pm.environment.get(\"patientDateOfBirth\"));",
									"    pm.expect(jsonData.addressLine1).to.eql(pm.environment.get(\"patientAddressLine1\"));",
									"    pm.expect(jsonData.addressLine2).to.eql(pm.environment.get(\"patientAddressLine2\"));",
									"    pm.expect(jsonData.city).to.eql(pm.environment.get(\"patientCity\"));",
									"    pm.expect(jsonData.state).to.eql(pm.environment.get(\"patientState\"));",
									"    pm.expect(jsonData.country).to.eql(pm.environment.get(\"patientCountry\"));",
									"    pm.expect(jsonData.zip).to.eql(pm.environment.get(\"patientZip\"));",
									"    pm.expect(jsonData.latitude.toFixed(4)).to.eql(pm.environment.get(\"patientLatitude\"));",
									"    pm.expect(jsonData.longitude.toFixed(4)).to.include(pm.environment.get(\"patientLongitude\"));",
									"    pm.expect(JSON.stringify(jsonData.ethnicities.sort())).to.eql(pm.environment.get(\"patientEthnicities\").replaceAll(\"\\/\\\"\", \"'\"));",
									"    pm.expect(JSON.stringify(jsonData.languages.sort())).to.eql(pm.environment.get(\"patientLanguages\").replaceAll(\"\\/\\\"\", \"'\"));",
									"    pm.expect(jsonData.genderOnRecord).to.eql(pm.environment.get(\"patientGenderOnRecord\"));",
									"    pm.expect(jsonData.genderOffRecord).to.eql(pm.environment.get(\"patientGenderOffRecord\"));",
									"    pm.expect(jsonData.pronounsOnRecord[0]).to.eql(pm.environment.get(\"patientPronounsOnRecord\"));",
									"    pm.expect(jsonData.pronounsOffRecord[0]).to.eql(pm.environment.get(\"patientPronounsOffRecord\"));",
									"    pm.expect(jsonData.sex).to.eql(pm.environment.get(\"patientSex\"));",
									"    pm.expect(jsonData.timezone).to.eql(pm.environment.get(\"patientTimezone\"));",
									"    pm.expect(JSON.stringify(jsonData.contactPreferences.sort())).to.eql(pm.environment.get(\"patientContactPreferences\").replaceAll(\"\\/\\\"\", \"'\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d4f160b9-47e9-4d14-96f5-6a58eb852534",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/patients/{{patientId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients",
								"{{patientId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Support App by Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7b691d3b-5c85-4556-b7a8-2d4e8ddfc016",
								"exec": [
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 4000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a JSON body\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify support details\", function () {   \r",
									"    \r",
									"    pm.expect(jsonData.supportExternalId).to.equal(pm.environment.get(\"supportExternalIdEmail\"));\r",
									"    pm.expect(jsonData.isAccountDeactivated).to.equal(pm.environment.get(\"repeat\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "67bbde6b-fe14-4681-889c-015105cd098c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/supports?email={{supportemail}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"supports"
							],
							"query": [
								{
									"key": "email",
									"value": "{{supportemail}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "84b909b4-fd12-45e5-bff2-97fc656a2eb0"
		},
		{
			"name": "EQ-7022 BE: Migration to add new availability permissions to existing users",
			"item": [
				{
					"name": "Add Provider-AdminRole",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7889aef8-cf21-45d9-bae3-af7dfff4463d",
								"exec": [
									"let ld = require('lodash');",
									"let timezones = [\"Hawaii Standard Time\", \"Hawaii-Aleutian Time\", \"Alaska Time\", \"Pacific Time\", \"Arizona\", \"Mountain Time\", \"Central Time\", \"Eastern Time\", \"London/UK Time\"];",
									"let regions = [\"Northeast\", \"Southwest\", \"Southeast\", \"West\", \"Midwest\"];",
									"let providerTypes = [",
									"        \"Admissions Specialist\",",
									"        \"Analyst\",",
									"        \"Billing Specialist\",",
									"        \"Care Coordinator\",",
									"        \"Client Success\",",
									"        \"Clinical Ops\",",
									"        \"Clinical Supervisor\",",
									"        \"Dietitian\",",
									"        \"Family Experience Navigator\",",
									"        \"Family Mentor\",",
									"        \"Insurance Specialist\",",
									"        \"Nurse Practitioner\",",
									"        \"Patient Service Representative\",",
									"        \"Peer Mentor\",",
									"        \"Physician\",",
									"        \"Physician Assistant\",",
									"        \"Practice Coordinator\",",
									"        \"Product Support\",",
									"        \"Provider Partnerships\",",
									"        \"Psychiatrist\",",
									"        \"Therapist\"",
									"    ];",
									"let capacities = [\"full-time\", \"part-time\"];",
									"",
									"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let lastName = pm.variables.replaceIn('{{$randomLastName}}');",
									"let email = \"qa\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
									"let phoneNumber = pm.variables.replaceIn('{{$randomPhoneNumber}}');",
									"",
									"let supervisorId = \"\";",
									"",
									"let capacity = ld.sample(capacities);",
									"",
									"let hoursPerWeek;",
									"if (capacity == \"full-time\") {",
									"    hoursPerWeek = 40;",
									"} else {",
									"    hoursPerWeek = Math.floor(Math.random() * 90);",
									"}",
									"",
									"let accountStatus = \"active\";",
									"",
									"let permissions = [\"admin\"];",
									"let permission = ld.sample(permissions);",
									"",
									"let roles = [\"admin:role:manage-users\"];",
									"",
									"if (permission === \"admin\") {",
									"    roles = [\"\\\"admin:role:manage-users\\\"\"];",
									"}",
									"",
									"pm.environment.set(\"providerFirstName\", firstName);",
									"pm.environment.set(\"providerLastName\", lastName);",
									"pm.environment.set(\"providerEmail\", email);",
									"pm.environment.set(\"providerPhoneNumber\", phoneNumber);",
									"pm.environment.set(\"providerTimezone\", ld.sample(timezones));",
									"pm.environment.set(\"providerRegion\", ld.sample(regions));",
									"pm.environment.set(\"providerType\", ld.sample(providerTypes));",
									"pm.environment.set(\"providerCapacity\", capacity);",
									"pm.environment.set(\"providerHoursPerWeek\", hoursPerWeek);",
									"pm.environment.set(\"providerAccountStatus\", accountStatus);",
									"pm.environment.set(\"providerRoles\", roles);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fc4c9727-0a00-4bba-992e-82e78c59410c",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.environment.set(\"providerIdForAdmin\", jsonData.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ebdeb5da-c356-4eed-8713-ab40de407fd7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{providerFirstName}}\",\n    \"lastName\": \"{{providerLastName}}\",\n    \"email\": \"{{providerEmail}}\",\n    \"phoneNumber\": \"{{providerPhoneNumber}}\",\n    \"timezone\": \"{{providerTimezone}}\",\n    \"region\": \"{{providerRegion}}\",\n    \"providerType\": \"{{providerType}}\",\n    \"capacity\": \"{{providerCapacity}}\",\n    \"hoursPerWeek\": \"{{providerHoursPerWeek}}\",\n    \"accountStatus\": \"{{providerAccountStatus}}\",\n    \"roles\": [\n        {{providerRoles}}\n    ],\n    \"supervisorId\": \"\",\n    \"appAccess\": [\n        \"Admin\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/providers",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"providers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get AdminRole Provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "25683104-dd40-4807-86f3-9f4ad90f0165",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"//This varible fetches the provider's permissions",
									"let permissions = jsonData.permissions;",
									"//This varible fetches the provider's roles",
									"let roles = jsonData.roles[0];",
									"//This varible fetches the provider's app access",
									"let appAccess = jsonData.appAccess[0];",
									"",
									"",
									"pm.test(\"Verify provider permission array have zero value\", function () {",
									"    pm.expect(permissions).to.be.empty;",
									"});",
									"",
									"pm.test(\"Verify provider role should be admin: role:manage-users\", function () {",
									"    pm.expect(roles).to.be.eql(\"admin:role:manage-users\");",
									"",
									"});",
									"pm.test(\"Verify provider access should be Admin\", function () {",
									"    pm.expect(appAccess).to.be.eql(\"Admin\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "82d36627-0d85-4b93-8fdc-06d74cfec68a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/providers/{{providerIdForAdmin}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"providers",
								"{{providerIdForAdmin}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Provider-MaudGenralAccess",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4c9575c8-098b-4506-993b-bbb38297c891",
								"exec": [
									"let ld = require('lodash');",
									"let timezones = [\"Hawaii Standard Time\", \"Hawaii-Aleutian Time\", \"Alaska Time\", \"Pacific Time\", \"Arizona\", \"Mountain Time\", \"Central Time\", \"Eastern Time\", \"London/UK Time\"];",
									"let regions = [\"Northeast\", \"Southwest\", \"Southeast\", \"West\", \"Midwest\"];",
									"let providerTypes = [",
									"        \"Admissions Specialist\",",
									"        \"Analyst\",",
									"        \"Billing Specialist\",",
									"        \"Care Coordinator\",",
									"        \"Client Success\",",
									"        \"Clinical Ops\",",
									"        \"Clinical Supervisor\",",
									"        \"Dietitian\",",
									"        \"Family Experience Navigator\",",
									"        \"Family Mentor\",",
									"        \"Insurance Specialist\",",
									"        \"Nurse Practitioner\",",
									"        \"Patient Service Representative\",",
									"        \"Peer Mentor\",",
									"        \"Physician\",",
									"        \"Physician Assistant\",",
									"        \"Practice Coordinator\",",
									"        \"Product Support\",",
									"        \"Provider Partnerships\",",
									"        \"Psychiatrist\",",
									"        \"Therapist\"",
									"    ];",
									"let capacities = [\"full-time\", \"part-time\"];",
									"",
									"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let lastName = pm.variables.replaceIn('{{$randomLastName}}');",
									"let email = \"qa\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
									"let phoneNumber = pm.variables.replaceIn('{{$randomPhoneNumber}}');",
									"",
									"let supervisorId = \"\";",
									"",
									"let capacity = ld.sample(capacities);",
									"",
									"let hoursPerWeek;",
									"if (capacity == \"full-time\") {",
									"    hoursPerWeek = 40;",
									"} else {",
									"    hoursPerWeek = Math.floor(Math.random() * 90);",
									"}",
									"",
									"let accountStatus = \"active\";",
									"",
									"let permissions = [\"maud\"];",
									"let permission = ld.sample(permissions);",
									"",
									"let roles = [",
									"    \"maud:role:general-access\"];",
									"",
									"if (permission === \"maud\") {",
									"    roles = [\"\\\"maud:role:general-access\\\"\"];",
									"}",
									"",
									"pm.environment.set(\"providerFirstName\", firstName);",
									"pm.environment.set(\"providerLastName\", lastName);",
									"pm.environment.set(\"providerEmail\", email);",
									"pm.environment.set(\"providerPhoneNumber\", phoneNumber);",
									"pm.environment.set(\"providerTimezone\", ld.sample(timezones));",
									"pm.environment.set(\"providerRegion\", ld.sample(regions));",
									"pm.environment.set(\"providerType\", ld.sample(providerTypes));",
									"pm.environment.set(\"providerCapacity\", capacity);",
									"pm.environment.set(\"providerHoursPerWeek\", hoursPerWeek);",
									"pm.environment.set(\"providerAccountStatus\", accountStatus);",
									"pm.environment.set(\"providerRoles\", roles);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3fb1c9cc-bf7a-4295-914c-52a88402393d",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.environment.set(\"providerIdForGenralAccess\", jsonData.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "beab3fb7-91b7-48be-8bdf-1bd7991f9e48",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{providerFirstName}}\",\n    \"lastName\": \"{{providerLastName}}\",\n    \"email\": \"{{providerEmail}}\",\n    \"phoneNumber\": \"{{providerPhoneNumber}}\",\n    \"timezone\": \"{{providerTimezone}}\",\n    \"region\": \"{{providerRegion}}\",\n    \"providerType\": \"{{providerType}}\",\n    \"capacity\": \"{{providerCapacity}}\",\n    \"hoursPerWeek\": \"{{providerHoursPerWeek}}\",\n    \"accountStatus\": \"{{providerAccountStatus}}\",\n    \"roles\": [\n        {{providerRoles}}\n    ],\n    \"supervisorId\": \"\",\n    \"appAccess\": [\n        \"Maud\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/providers",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"providers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get MaudGenralAccess Provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "82e6dd33-8833-4fe4-a934-4b3db7779826",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"//This varible fetches the provider's permissions",
									"let permissions = jsonData.permissions;",
									"//This varible fetches the provider's roles",
									"let roles = jsonData.roles[0];",
									"//This varible fetches the provider's app access",
									"let appAccess = jsonData.appAccess[0];",
									"",
									"",
									"pm.test(\"Verify provider permission array have zero value\", function () {",
									"    pm.expect(permissions).to.be.empty;",
									"});",
									"",
									"pm.test(\"Verify provider role should be maud:role:general-access\", function () {",
									"    pm.expect(roles).to.be.eql(\"maud:role:general-access\");",
									"",
									"});",
									"pm.test(\"Verify provider access should be Maud\", function () {",
									"    pm.expect(appAccess).to.be.eql(\"Maud\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4bc8d737-845b-4137-81cc-1b8a378dc090",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/providers/{{providerIdForGenralAccess}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"providers",
								"{{providerIdForGenralAccess}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Provider-MaudAdvancedAccess",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "24ac6f17-2f2a-4aa4-85fa-437acf5f4f9d",
								"exec": [
									"let ld = require('lodash');",
									"let timezones = [\"Hawaii Standard Time\", \"Hawaii-Aleutian Time\", \"Alaska Time\", \"Pacific Time\", \"Arizona\", \"Mountain Time\", \"Central Time\", \"Eastern Time\", \"London/UK Time\"];",
									"let regions = [\"Northeast\", \"Southwest\", \"Southeast\", \"West\", \"Midwest\"];",
									"let providerTypes = [",
									"        \"Admissions Specialist\",",
									"        \"Analyst\",",
									"        \"Billing Specialist\",",
									"        \"Care Coordinator\",",
									"        \"Client Success\",",
									"        \"Clinical Ops\",",
									"        \"Clinical Supervisor\",",
									"        \"Dietitian\",",
									"        \"Family Experience Navigator\",",
									"        \"Family Mentor\",",
									"        \"Insurance Specialist\",",
									"        \"Nurse Practitioner\",",
									"        \"Patient Service Representative\",",
									"        \"Peer Mentor\",",
									"        \"Physician\",",
									"        \"Physician Assistant\",",
									"        \"Practice Coordinator\",",
									"        \"Product Support\",",
									"        \"Provider Partnerships\",",
									"        \"Psychiatrist\",",
									"        \"Therapist\"",
									"    ];",
									"let capacities = [\"full-time\", \"part-time\"];",
									"",
									"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let lastName = pm.variables.replaceIn('{{$randomLastName}}');",
									"let email = \"qa\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
									"let phoneNumber = pm.variables.replaceIn('{{$randomPhoneNumber}}');",
									"",
									"let supervisorId = \"\";",
									"",
									"let capacity = ld.sample(capacities);",
									"",
									"let hoursPerWeek;",
									"if (capacity == \"full-time\") {",
									"    hoursPerWeek = 40;",
									"} else {",
									"    hoursPerWeek = Math.floor(Math.random() * 90);",
									"}",
									"",
									"let accountStatus = \"active\";",
									"",
									"let permissions = [\"maud\"];",
									"let permission = ld.sample(permissions);",
									"",
									"let roles = [\"maud:role:advanced-access\"];",
									"",
									" if (permission === \"maud\") {",
									"    roles = [\"\\\"maud:role:advanced-access\\\"\"];",
									"} ",
									"",
									"pm.environment.set(\"providerFirstName\", firstName);",
									"pm.environment.set(\"providerLastName\", lastName);",
									"pm.environment.set(\"providerEmail\", email);",
									"pm.environment.set(\"providerPhoneNumber\", phoneNumber);",
									"pm.environment.set(\"providerTimezone\", ld.sample(timezones));",
									"pm.environment.set(\"providerRegion\", ld.sample(regions));",
									"pm.environment.set(\"providerType\", ld.sample(providerTypes));",
									"pm.environment.set(\"providerCapacity\", capacity);",
									"pm.environment.set(\"providerHoursPerWeek\", hoursPerWeek);",
									"pm.environment.set(\"providerAccountStatus\", accountStatus);",
									"pm.environment.set(\"providerRoles\", roles);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "aeb174b8-b013-461e-b370-5bd226872ebd",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.environment.set(\"providerIdForAdvanceAccess\", jsonData.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "612b13a0-39e5-4b06-885d-a4cbeed18f15",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{providerFirstName}}\",\n    \"lastName\": \"{{providerLastName}}\",\n    \"email\": \"{{providerEmail}}\",\n    \"phoneNumber\": \"{{providerPhoneNumber}}\",\n    \"timezone\": \"{{providerTimezone}}\",\n    \"region\": \"{{providerRegion}}\",\n    \"providerType\": \"{{providerType}}\",\n    \"capacity\": \"{{providerCapacity}}\",\n    \"hoursPerWeek\": \"{{providerHoursPerWeek}}\",\n    \"accountStatus\": \"{{providerAccountStatus}}\",\n    \"roles\": [\n        {{providerRoles}}\n    ],\n    \"supervisorId\": \"\",\n    \"appAccess\": [\n        \"Maud\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/providers",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"providers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get MaudAdvancedAccess Provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "85fbb920-3892-4c42-9140-b6f237da1bac",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"//This varible fetches the provider's permissions",
									"let permissions = jsonData.permissions;",
									"//The value of this valadation will be true only if we have both permissions (\"maud:permission:availability\" and \"maud:permission:availability-proxy\")  avilible in the permissions array.",
									"",
									"",
									"",
									"//This varible fetches the provider's roles",
									"let roles = jsonData.roles[0];",
									"//This varible fetches the provider's app access",
									"let appAccess = jsonData.appAccess[0];",
									"let permissionValadation;",
									"",
									"// This loop, loops through the permissions array and if found \"maud:permission:availability\" and or \"maud:permission:availability-proxy\", it change the value of permissionValadation to true.  ",
									"for (let key in permissions ) {",
									"    if (permissions[key] == \"maud:permission:availability\" || permissions[key] == \"maud:permission:availability-proxy\") {",
									"       permissionValadation = true;",
									"    }",
									"}",
									"",
									"console.log(permissionValadation);",
									"",
									"pm.test(\"Verify provider permissions include \\\"maud:permission:availability\\\" and \\\"maud:permission:availability-proxy\\\"\", function () {",
									"    pm.expect(permissionValadation).to.be.true;",
									"});",
									"",
									"pm.test(\"Verify provider role should be maud:role:advanced-access\", function () {",
									"    pm.expect(roles).to.be.eql(\"maud:role:advanced-access\");",
									"",
									"});",
									"pm.test(\"Verify provider access should be Maud\", function () {",
									"    pm.expect(appAccess).to.be.eql(\"Maud\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2d3e63d1-6f08-4a59-8213-bbf93022ab06",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/providers/{{providerIdForAdvanceAccess}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"providers",
								"{{providerIdForAdvanceAccess}}"
							]
						}
					},
					"response": []
				}
			],
			"id": "3abb0fec-5e93-4cb6-a8c3-1b1bd0cee60c"
		},
		{
			"name": "Patient_ActivityLog",
			"item": [
				{
					"name": "Add Patient for Activities",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7fe922c0-ab79-4e13-8258-c743db016530",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify id is generated\", function () {",
									"    pm.expect(jsonData.id).length.greaterThan(0);",
									"});",
									"",
									"pm.environment.set(\"patientId\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2f146938-e5fa-40ff-b405-8435eda5c719",
								"exec": [
									"let ld = require('lodash');",
									"",
									"let gendersList = [",
									"    \"Cis-gender male\",",
									"    \"Cis-gender female\",",
									"    \"Non-binary\",",
									"    \"Other\",",
									"    \"Unknown\",",
									"    \"Transgender male\",",
									"    \"Transgender female\"",
									"];",
									"",
									"let pronounsList = [",
									"    \"He/Him/His\",",
									"    \"She/Her/Hers\",",
									"    \"They/Them/Theirs\",",
									"    \"Other\"",
									"];",
									"",
									"let ethnicitiesList = [",
									"    \"Asian\",",
									"    \"Black/African American\",",
									"    \"White/Caucasian\",",
									"    \"Hispanic/Latinx\",",
									"    \"Native American, Indian American, or Alaska Native\",",
									"    \"Native Hawaiian or other Pacific Islander\",",
									"    \"Middle Eastern or North African\",",
									"    \"Prefer not to answer\",",
									"    \"Other\"",
									"];",
									"",
									"let languagesList = [",
									"    \"English\",",
									"    \"Spanish\",",
									"    \"Chinese\",",
									"    \"French\",",
									"    \"Tagalog\",",
									"    \"Vietnamese\",",
									"    \"Korean\",",
									"    \"German\",",
									"    \"Russian\",",
									"    \"Italian\",",
									"    \"Portuguese\",",
									"    \"Polish\",",
									"    \"Japanese\",",
									"    \"Persian\",",
									"    \"Greek\",",
									"    \"Serbo-Croatian\",",
									"    \"Armenian\",",
									"    \"Yiddish\",",
									"    \"American Sign Language (ASL)\"",
									"];",
									"",
									"let sexList = [",
									"    \"Male\",",
									"    \"Female\"",
									"];",
									"",
									"let timezonesList = [",
									"    \"Hawaii Standard Time\",",
									"    \"Hawaii-Aleutian Time\",",
									"    \"Alaska Time\",",
									"    \"Pacific Time\",",
									"    \"Arizona\",",
									"    \"Mountain Time\",",
									"    \"Central Time\",",
									"    \"Eastern Time\"",
									"];",
									"",
									"let contactPreferences = [\"Email\", \"No preference\", \"Phone\", \"Unknown\"];",
									"",
									"let statesList = [\"AK\", \"AL\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"DC\", \"FL\", \"GA\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"OH\", \"OK\", \"OR\", \"PA\", \"PR\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\", \"Outside US\", \"Unknown\"];",
									"",
									"let addressLine2List = [\"Apt 1\", \"Apt 2\", \"Apt 3\", \"Unit #1\", \"Unit #2\", \"Unit #3\", \"Apt 2L\", \"Apt 2R\"];",
									"",
									"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let lastName = pm.variables.replaceIn('{{$randomLastName}}');",
									"let chosenName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let email = \"qa\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
									"let zip = Math.floor(10000 + Math.random() * 90000);",
									"",
									"//Generate random Date of Birth in YYYY-MM-DD Format",
									"function randomDate(start, end) {",
									"    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));",
									"}",
									"let date = randomDate(new Date(1990, 00, 01), new Date());",
									"let dateOfBirth = date.getFullYear() + '-' + (\"0\" + (date.getMonth() + 1)).slice(-2) + '-' + (\"0\" + date.getDate()).slice(-2);",
									"",
									"//Save the variables to be used in next request for validation",
									"pm.environment.set(\"patientFirstName\", firstName);",
									"pm.environment.set(\"patientLastName\", lastName);",
									"pm.environment.set(\"patientEmail\", email);",
									"pm.environment.set(\"patientPhoneNumber\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));",
									"pm.environment.set(\"patientChosenName\", chosenName);",
									"pm.environment.set(\"patientDateOfBirth\", dateOfBirth);",
									"pm.environment.set(\"patientAddressLine1\", pm.variables.replaceIn('{{$randomStreetAddress}}'));",
									"pm.environment.set(\"patientAddressLine2\", ld.sample(addressLine2List));",
									"pm.environment.set(\"patientCity\", pm.variables.replaceIn('{{$randomCity}}'));",
									"pm.environment.set(\"patientState\", ld.sample(statesList));",
									"pm.environment.set(\"patientCountry\", \"US\");",
									"pm.environment.set(\"patientZip\", zip.toString());",
									"pm.environment.set(\"patientLatitude\", pm.variables.replaceIn('{{$randomLatitude}}'));",
									"pm.environment.set(\"patientLongitude\", pm.variables.replaceIn('{{$randomLongitude}}'));",
									"pm.environment.set(\"patientEthnicities\", JSON.stringify(ld.sampleSize(ethnicitiesList, 2).sort()));",
									"pm.environment.set(\"patientLanguages\", JSON.stringify(ld.sampleSize(languagesList, 2).sort()));",
									"pm.environment.set(\"patientGenderOnRecord\", ld.sample(gendersList));",
									"pm.environment.set(\"patientGenderOffRecord\", ld.sample(gendersList));",
									"pm.environment.set(\"patientPronounsOnRecord\", ld.sample(pronounsList));",
									"pm.environment.set(\"patientPronounsOffRecord\", ld.sample(pronounsList));",
									"pm.environment.set(\"patientSex\", ld.sample(sexList));",
									"pm.environment.set(\"patientTimezone\", ld.sample(timezonesList));",
									"pm.environment.set(\"patientContactPreferences\", JSON.stringify(ld.sampleSize(contactPreferences, 2).sort()));"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3bb6beca-759e-412d-8ee3-796eaed69969",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{patientFirstName}}\",\n    \"lastName\": \"{{patientLastName}}\",\n    \"dateOfBirth\": \"{{patientDateOfBirth}}\",\n    \"email\": \"{{patientEmail}}\",\n    \"contactPreferences\": {{patientContactPreferences}},\n    \"ethnicities\": {{patientEthnicities}},\n    \"phoneNumber\": \"{{patientPhoneNumber}}\",\n    \"chosenName\": \"{{patientChosenName}}\",\n    \"languages\": {{patientLanguages}},\n    \"genderOnRecord\": \"{{patientGenderOnRecord}}\",\n    \"genderOffRecord\": \"{{patientGenderOffRecord}}\",\n    \"pronounsOnRecord\": \"{{patientPronounsOnRecord}}\",\n    \"pronounsOffRecord\": \"{{patientPronounsOffRecord}}\",\n    \"sex\": \"{{patientSex}}\",\n    \"timezone\": \"{{patientTimezone}}\",\n    \"latitude\": \"{{patientLatitude}}\",\n    \"longitude\": \"{{patientLongitude}}\",\n    \"addressLine1\": \"{{patientAddressLine1}}\",\n    \"addressLine2\": \"{{patientAddressLine2}}\",\n    \"city\": \"{{patientCity}}\",\n    \"country\": \"{{patientCountry}}\",\n    \"state\": \"{{patientState}}\",\n    \"zip\": \"{{patientZip}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/patients",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Add patient Activity log",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "881a457e-2bfd-4273-b1f3-334e48733e21",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"let languagesList = [",
									"    \"English\",",
									"    \"Spanish\",",
									"    \"Chinese\",",
									"    \"French\",",
									"    \"Tagalog\",",
									"    \"Vietnamese\",",
									"    \"Korean\",",
									"    \"German\",",
									"    \"Russian\",",
									"    \"Italian\",",
									"    \"Portuguese\",",
									"    \"Polish\",",
									"    \"Japanese\",",
									"    \"Persian\",",
									"    \"Greek\",",
									"    \"Serbo-Croatian\",",
									"    \"Armenian\",",
									"    \"Yiddish\",",
									"    \"American Sign Language (ASL)\"",
									"];",
									"",
									"let ethnicitiesList = [",
									"    \"Asian\",",
									"    \"Black/African American\",",
									"    \"White/Caucasian\",",
									"    \"Hispanic/Latinx\",",
									"    \"Native American, Indian American, or Alaska Native\",",
									"    \"Native Hawaiian or other Pacific Islander\",",
									"    \"Middle Eastern or North African\",",
									"    \"Prefer not to answer\",",
									"    \"Other\"",
									"];",
									"",
									"let pronounsList = [",
									"    \"He/Him/His\",",
									"    \"She/Her/Hers\",",
									"    \"They/Them/Theirs\",",
									"    \"Other\"",
									"];",
									"",
									"let gendersList = [",
									"    \"Cis-gender male\",",
									"    \"Cis-gender female\",",
									"    \"Non-binary\",",
									"    \"Other\",",
									"    \"Unknown\",",
									"    \"Transgender male\",",
									"    \"Transgender female\"",
									"];",
									"",
									"let timezonesList = [",
									"    \"Hawaii Standard Time\",",
									"    \"Hawaii-Aleutian Time\",",
									"    \"Alaska Time\",",
									"    \"Pacific Time\",",
									"    \"Arizona\",",
									"    \"Mountain Time\",",
									"    \"Central Time\",",
									"    \"Eastern Time\"",
									"];",
									"",
									"let contactPreferences = [\"Email\", \"No preference\", \"Phone\", \"Unknown\"];",
									"",
									"pm.test(\"Verify Patient's Basic Info details in Activity log\", function () {",
									"    for (i = 0; i < jsonData.length; i++) {",
									"        pm.expect(jsonData[i][\"filterType\"]).to.be.eql(\"PATIENT_BASIC_INFO\");",
									"        pm.expect(jsonData[i][\"operator\"]).to.be.oneOf([\"UPDATED\",\"CREATED\",\"NEW_FEATURE\"]);",
									"        ",
									"        if(jsonData[i].type=='PATIENT_ETHNICITY'){",
									"            pm.expect(jsonData[i].after.ethnicity_name).to.be.oneOf(ethnicitiesList);",
									"        }         ",
									"        if(jsonData[i].type=='PATIENT_LANGUAGE'){",
									"            pm.expect(jsonData[i].after.language_name).to.be.oneOf(languagesList);",
									"        } ",
									"        if(jsonData[i].type=='PATIENT_PRONOUNS_ON_RECORD'){",
									"            pm.expect(jsonData[i].after.pronoun_name).to.be.oneOf(pronounsList);",
									"        } ",
									"",
									"        if(jsonData[i].type=='PATIENT_PRONOUNS_OFF_RECORD'){",
									"            pm.expect(jsonData[i].after.pronoun_name).to.be.oneOf(pronounsList);",
									"        } ",
									"",
									"        if(jsonData[i].type=='PATIENT_CONTACT_PREFERENCES'){",
									"            pm.expect(jsonData[i].after.contact_preference_name).to.be.oneOf(contactPreferences);",
									"        }       ",
									"        ",
									"        if(jsonData[i].type=='PATIENT_BASIC_INFO'){",
									"            pm.expect(jsonData[i].after.first_name).to.be.eql(pm.environment.get(\"patientFirstName\"));",
									"            pm.expect(jsonData[i].after.last_name).to.be.eql(pm.environment.get(\"patientLastName\"));",
									"            pm.expect(jsonData[i].after.chosen_name).to.be.eql(pm.environment.get(\"patientChosenName\"));",
									"            pm.expect(jsonData[i].after.phone_number).to.be.eql(pm.environment.get(\"patientPhoneNumber\"));",
									"            pm.expect(jsonData[i].after.date_of_birth).to.be.eql(pm.environment.get(\"patientDateOfBirth\"));",
									"            pm.expect(jsonData[i].after.email).to.be.eql(pm.environment.get(\"patientEmail\"));",
									"            pm.expect(jsonData[i].after.timezone_name).to.be.oneOf(timezonesList);",
									"            pm.expect(jsonData[i].after.gender_on_record).to.be.oneOf(gendersList);",
									"            pm.expect(jsonData[i].after.gender_off_record).to.be.oneOf(gendersList);",
									"            break;",
									"        }",
									"",
									"         if(jsonData[i].type=='PATIENT_ADDRESS'){",
									"            pm.expect(jsonData[i].after.address_line1).to.be.eql(pm.environment.get(\"patientAddressLine1\"));",
									"            pm.expect(jsonData[i].after.address_line2).to.be.eql(pm.environment.get(\"patientAddressLine2\"));",
									"            pm.expect(jsonData[i].after.city).to.be.eql(pm.environment.get(\"patientCity\"));",
									"            pm.expect(jsonData[i].after.state).to.be.eql(pm.environment.get(\"patientState\"));",
									"            pm.expect(jsonData[i].after.zip_code).to.be.eql(pm.environment.get(\"patientZip\"));",
									"        } ",
									"        ",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8baea9da-e9cc-4171-b5b5-6746e8ecf3be",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/patients/{{patientId}}/activities",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients",
								"{{patientId}}",
								"activities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add  Proxy Support User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5574f90-c6c2-446f-ab60-ed7c153296b5",
								"exec": [
									"let text = pm.response.text();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"",
									"",
									"pm.environment.set(\"supportId1\", text);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3a021868-e4b5-4f4f-a957-322575680374",
								"exec": [
									"let ld = require('lodash');",
									"",
									"const relation_to_patient = [",
									"  \"Adopted sibling\",",
									"  \"Adoptive father\",",
									"  \"Adoptive mother\",",
									"  \"Adoptive parent\",",
									"  \"Biological father\",",
									"  \"Biological mother\",",
									"  \"Biological parent\",",
									"  \"Biological sibling\",",
									"  \"Case Manager/Discharge Planner\",",
									"  \"Community org/non-profit\",",
									"  \"Community professional\",",
									"  \"Dietitian\",",
									"  \"Doctor\",",
									"  \"Eating disorder coach/advocate\",",
									"  \"Executive\",",
									"  \"Family member\",",
									"  \"Father\",",
									"  \"Foster father\",",
									"  \"Foster mother\",",
									"  \"Foster parent\",",
									"  \"Friend\",",
									"  \"Grandparent\",",
									"  \"Guardian\",",
									"  \"Half sibling\",",
									"  \"Hospital\",",
									"  \"Insurance company\",",
									"  \"Maternal grandfather\",",
									"  \"Maternal grandmother\",",
									"  \"Mother\",",
									"  \"Nurse\",",
									"  \"Nurse practitioner\",",
									"  \"Other\",",
									"  \"Outreach professional\",",
									"  \"Paternal grandfather\",",
									"  \"Paternal grandmother\",",
									"  \"Payor case manager\",",
									"  \"Physician Assistant\",",
									"  \"Physician: Adolescent Medicine/Eating Disorder Specialist\",",
									"  \"Physician: Endocrinologist\",",
									"  \"Physician: Family Medicine\",",
									"  \"Physician: Gastroenterologist\",",
									"  \"Physician: Other specialist\",",
									"  \"Physician: PCP (non-peds)\",",
									"  \"Physician: Pediatrician\",",
									"  \"Practice Manager\",",
									"  \"Psychiatrist\",",
									"  \"Psychologist\",",
									"  \"Referral Coordinator\",",
									"  \"School nurse\",",
									"  \"School therapist/counselor\",",
									"  \"Step sibling\",",
									"  \"Stepfather\",",
									"  \"Stepmother\",",
									"  \"Stepparent\",",
									"  \"Strategic Partner\",",
									"  \"Therapist\",",
									"  \"Treatment Center (eating disorder)\",",
									"  \"Treatment Center (non-ED)\",",
									"  \"University: Counseling Center\",",
									"  \"University: Student Health\"",
									"];",
									"",
									"let gendersList = [",
									"    \"Cis-gender male\",",
									"    \"Cis-gender female\",",
									"    \"Non-binary\",",
									"    \"Other\",",
									"    \"Unknown\",",
									"    \"Transgender male\",",
									"    \"Transgender female\"",
									"];",
									"",
									"let pronounsList = [",
									"    \"He/Him/His\",",
									"    \"She/Her/Hers\",",
									"    \"They/Them/Theirs\",",
									"    \"Other\"",
									"];",
									"",
									"let ethnicitiesList = [",
									"    \"Asian\",",
									"    \"Black/African American\",",
									"    \"White/Caucasian\",",
									"    \"Hispanic/Latinx\",",
									"    \"Native American, Indian American, or Alaska Native\",",
									"    \"Native Hawaiian or other Pacific Islander\",",
									"    \"Middle Eastern or North African\",",
									"    \"Prefer not to answer\",",
									"    \"Other\"",
									"];",
									"",
									"let languagesList = [",
									"    \"English\",",
									"    \"Spanish\",",
									"    \"Chinese\",",
									"    \"French\",",
									"    \"Tagalog\",",
									"    \"Vietnamese\",",
									"    \"Korean\",",
									"    \"German\",",
									"    \"Russian\",",
									"    \"Italian\",",
									"    \"Portuguese\",",
									"    \"Polish\",",
									"    \"Japanese\",",
									"    \"Persian\",",
									"    \"Greek\",",
									"    \"Serbo-Croatian\",",
									"    \"Armenian\",",
									"    \"Yiddish\",",
									"    \"American Sign Language (ASL)\"",
									"];",
									"",
									"let sexList = [",
									"    \"Male\",",
									"    \"Female\"",
									"];",
									"",
									"let timezonesList = [",
									"    \"Hawaii Standard Time\",",
									"    \"Hawaii-Aleutian Time\",",
									"    \"Alaska Time\",",
									"    \"Pacific Time\",",
									"    \"Arizona\",",
									"    \"Mountain Time\",",
									"    \"Central Time\",",
									"    \"Eastern Time\"",
									"];",
									"",
									"let contactPreferences = [\"Email\", \"No preference\", \"Phone\", \"Unknown\"];",
									"",
									"let statesList = [\"AK\", \"AL\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"DC\", \"FL\", \"GA\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"OH\", \"OK\", \"OR\", \"PA\", \"PR\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\", \"Outside US\", \"Unknown\"];",
									"",
									"let addressLine2List = [\"Apt 1\", \"Apt 2\", \"Apt 3\", \"Unit #1\", \"Unit #2\", \"Unit #3\", \"Apt 2L\", \"Apt 2R\"];",
									"",
									"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let lastName = pm.variables.replaceIn('{{$randomLastName}}');",
									"let chosenName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let email = \"sreedhar\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
									"let zip = Math.floor(10000 + Math.random() * 90000);",
									"",
									"//Generate random Date of Birth in YYYY-MM-DD Format",
									"function randomDate(start, end) {",
									"    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));",
									"}",
									"let date = randomDate(new Date(1990, 00, 01), new Date());",
									"let dateOfBirth = date.getFullYear() + '-' + (\"0\" + (date.getMonth() + 1)).slice(-2) + '-' + (\"0\" + date.getDate()).slice(-2);",
									"",
									"//Save the variables to be used in next request for validation",
									"pm.environment.set(\"supportFirstName\", firstName);",
									"pm.environment.set(\"supportLastName\", lastName);",
									"pm.environment.set(\"relationtopatient\", ld.sample(relation_to_patient));",
									"pm.environment.set(\"patientEmail\", email);",
									"pm.environment.set(\"patientPhoneNumber\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));",
									"pm.environment.set(\"patientChosenName\", chosenName);",
									"pm.environment.set(\"patientDateOfBirth\", dateOfBirth);",
									"pm.environment.set(\"patientAddressLine1\", pm.variables.replaceIn('{{$randomStreetAddress}}'));",
									"pm.environment.set(\"patientAddressLine2\", ld.sample(addressLine2List));",
									"pm.environment.set(\"patientCity\", pm.variables.replaceIn('{{$randomCity}}'));",
									"pm.environment.set(\"patientState\", ld.sample(statesList));",
									"pm.environment.set(\"patientCountry\", \"US\");",
									"pm.environment.set(\"patientZip\", zip.toString());",
									"pm.environment.set(\"patientLatitude\", pm.variables.replaceIn('{{$randomLatitude}}'));",
									"pm.environment.set(\"patientLongitude\", pm.variables.replaceIn('{{$randomLongitude}}'));",
									"pm.environment.set(\"patientEthnicities\", JSON.stringify(ld.sampleSize(ethnicitiesList, 2).sort()));",
									"pm.environment.set(\"patientLanguages\", JSON.stringify(ld.sampleSize(languagesList, 2).sort()));",
									"pm.environment.set(\"patientGenderOnRecord\", ld.sample(gendersList));",
									"pm.environment.set(\"patientGenderOffRecord\", ld.sample(gendersList));",
									"pm.environment.set(\"patientPronounsOnRecord\", ld.sample(pronounsList));",
									"pm.environment.set(\"patientPronounsOffRecord\", ld.sample(pronounsList));",
									"pm.environment.set(\"patientSex\", ld.sample(sexList));",
									"pm.environment.set(\"patientTimezone\", ld.sample(timezonesList));",
									"pm.environment.set(\"patientContactPreferences\", JSON.stringify(ld.sampleSize(contactPreferences, 2).sort()));"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9609e6c0-bcc1-4de4-a903-d9a9f3472ae9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{supportFirstName}}\",\n    \"lastName\": \"{{supportLastName}}\",\n    \"email\": \"{{patientEmail}}\",\n    \"cellPhone\": \"{{patientPhoneNumber}}\",\n    \"gender\": \"{{patientGenderOnRecord}}\",\n    \"pronouns\": \"{{patientPronounsOnRecord}}\",\n    \"sex\": \"{{patientSex}}\",\n    \"timezone\": \"{{patientTimezone}}\",\n    \"latitude\": \"{{patientLatitude}}\",\n    \"longitude\": \"{{patientLongitude}}\",\n    \"affiliationName\": \"\",\n    \"addressLine1\": \"{{patientAddressLine1}}\",\n    \"addressLine2\": \"{{patientAddressLine2}}\",\n    \"city\": \"{{patientCity}}\",\n    \"state\": \"{{patientState}}\",\n    \"country\": \"{{patientCountry}}\",\n    \"zip\": \"{{patientZip}}\",\n    \"contactPreferences\": {{patientContactPreferences}},\n    \"languages\": {{patientLanguages}},\n    \"patientExternalId\": \"{{patientId}}\",\n    \"relationToPatient\": \"{{relationtopatient}}\",\n    \"isProxy\": true,\n    \"isPrimaryContact\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/supports",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"supports"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Activity log for Support Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ffda851-0603-4a74-8b69-485261f3a127",
								"exec": [
									"let ld = require('lodash');",
									"",
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"let languagesList = [",
									"    \"English\",",
									"    \"Spanish\",",
									"    \"Chinese\",",
									"    \"French\",",
									"    \"Tagalog\",",
									"    \"Vietnamese\",",
									"    \"Korean\",",
									"    \"German\",",
									"    \"Russian\",",
									"    \"Italian\",",
									"    \"Portuguese\",",
									"    \"Polish\",",
									"    \"Japanese\",",
									"    \"Persian\",",
									"    \"Greek\",",
									"    \"Serbo-Croatian\",",
									"    \"Armenian\",",
									"    \"Yiddish\",",
									"    \"American Sign Language (ASL)\"",
									"];",
									"",
									"let ethnicitiesList = [",
									"    \"Asian\",",
									"    \"Black/African American\",",
									"    \"White/Caucasian\",",
									"    \"Hispanic/Latinx\",",
									"    \"Native American, Indian American, or Alaska Native\",",
									"    \"Native Hawaiian or other Pacific Islander\",",
									"    \"Middle Eastern or North African\",",
									"    \"Prefer not to answer\",",
									"    \"Other\"",
									"];",
									"",
									"let pronounsList = [",
									"    \"He/Him/His\",",
									"    \"She/Her/Hers\",",
									"    \"They/Them/Theirs\",",
									"    \"Other\"",
									"];",
									"",
									"let gendersList = [",
									"    \"Cis-gender male\",",
									"    \"Cis-gender female\",",
									"    \"Non-binary\",",
									"    \"Other\",",
									"    \"Unknown\",",
									"    \"Transgender male\",",
									"    \"Transgender female\"",
									"];",
									"",
									"let timezonesList = [",
									"    \"Hawaii Standard Time\",",
									"    \"Hawaii-Aleutian Time\",",
									"    \"Alaska Time\",",
									"    \"Pacific Time\",",
									"    \"Arizona\",",
									"    \"Mountain Time\",",
									"    \"Central Time\",",
									"    \"Eastern Time\"",
									"];",
									"",
									"let contactPreferences = [\"Email\", \"No preference\", \"Phone\", \"Unknown\"];",
									"",
									"let status_name = [\"inactive\", \"active\"];",
									"",
									"pm.test(\"Verify Patient's Basic Info details in Activity log\", function () {",
									"    for (i = 0; i < jsonData.length; i++) {",
									"",
									"        pm.expect(jsonData[i][\"operator\"]).to.be.oneOf([\"UPDATED\",\"CREATED\",\"NEW_FEATURE\",\"DELETED\"]);",
									"        ",
									"        if(jsonData[i].type=='SUPPORT_CONTACT_PREFERENCES'){",
									"            pm.expect(jsonData[i].after.contact_preference_name).to.be.oneOf(contactPreferences);",
									"        }   ",
									"        if(jsonData[i].type=='SUPPORT_LANGUAGE'){",
									"            pm.expect(jsonData[i].after.language_name).to.be.oneOf(languagesList);",
									"        }      ",
									"        if(jsonData[i].type=='SUPPORT_PRONOUNS'){",
									"            pm.expect(jsonData[i].after.pronoun_name).to.be.oneOf(pronounsList);",
									"        } ",
									"        if(jsonData[i].type=='SUPPORT_ETHNICITY'){",
									"            pm.expect(jsonData[i].after.pronoun_name).to.be.oneOf(ethnicitiesList);            ",
									"        } ",
									"        if(jsonData[i].type=='SUPPORT_ACCOUNT'){",
									"            pm.expect(jsonData[i].after.status_name).to.be.oneOf(status_name);            ",
									"        }",
									"        ",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "73ace69c-e327-4b8b-87bd-1c3221b17197",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/patients/{{patientId}}/activities?filter-by=",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients",
								"{{patientId}}",
								"activities"
							],
							"query": [
								{
									"key": "filter-by",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "98bce59a-3892-4574-a3cf-62de15c580c2"
		},
		{
			"name": "get Timezones",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "060053aa-5621-421c-aeb3-a57e0c7a1ed7",
						"exec": [
							"let jsonData = pm.response.json();",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response time is less than 4000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(4000);",
							"});",
							"pm.test(\"Response has a JSON body\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Content-Type header is application/json\", () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
							"});",
							"let timeZones = [",
							"    \"Hawaii Standard Time\",",
							"    \"Hawaii-Aleutian Time\",",
							"    \"Alaska Time\",",
							"    \"Pacific Time\",",
							"    \"Arizona\",",
							"    \"Mountain Time\",",
							"    \"Central Time\",",
							"    \"Eastern Time\",",
							"    \"London/UK Time\"",
							"];",
							"",
							"pm.test(\"Verify data type\", function () {",
							"    for (i = 0; i < jsonData.length; i++) {",
							"        pm.expect(jsonData[i].label).to.be.a('string');",
							"        pm.expect(jsonData[i].id).to.be.a('string');",
							"    }",
							"});",
							"",
							"pm.test(\"Verify time zone values\", function () {",
							"    timeZones.sort();",
							"    let ld = require('lodash');",
							"    let sortedJsonData = ld.orderBy(jsonData, ['label'], ['asc']);",
							"",
							"    for (i = 0; i < timeZones.length; i++) {",
							"        tests[\"Time zone value: \" + timeZones[i] + \" exists\"] = pm.expect(sortedJsonData[i].label).eql(timeZones[i]);",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "18a7cd4e-19ae-4843-a3f9-957442c5d0b3",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "2245c704-fd53-4cbc-8bd1-1e5bb3fd518b",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{test-token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{host}}/users/enums/timezones",
					"host": [
						"{{host}}"
					],
					"path": [
						"users",
						"enums",
						"timezones"
					]
				}
			},
			"response": []
		},
		{
			"name": "get regions",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 4000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(4000);",
							"});",
							"",
							"pm.test(\"Response has a JSON body\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Content-Type header is application/json\", () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
							"});",
							"",
							"let regions = [\"Northeast\", \"Southwest\", \"Southeast\", \"West\", \"Midwest\"];",
							"",
							"pm.test(\"Verify data type\", function () {",
							"    for (i = 0; i < jsonData.length; i++) {",
							"        pm.expect(jsonData[i].label).to.be.a('string');",
							"        pm.expect(jsonData[i].id).to.be.a('string');",
							"    }",
							"});",
							"",
							"pm.test(\"Verify region values\", function () {",
							"    regions.sort();",
							"    let ld = require('lodash');",
							"    let sortedJsonData = ld.orderBy(jsonData, ['label'], ['asc']);",
							"",
							"    for (i = 0; i < regions.length; i++) {",
							"        tests[\"Region: \" + regions[i] + \" exists\"] = pm.expect(sortedJsonData[i].label).eql(regions[i]);",
							"    }",
							"});"
						],
						"type": "text/javascript",
						"id": "ef34de1a-8800-40fb-af66-93c16b39ee2c"
					}
				}
			],
			"id": "144c3a26-c678-4c18-ba2f-cb7eca63a513",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{test-token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/users/enums/regions",
					"host": [
						"{{host}}"
					],
					"path": [
						"users",
						"enums",
						"regions"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "a6412f06-6fb5-47cd-a618-10953ac7ed6b",
				"type": "text/javascript",
				"exec": [
					"collectionMethods = {",
					"    //Return random date value by passing start and end date",
					"    randomDate: function (start, end) {",
					"        return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));",
					"    },",
					"    getRandomListofValuesFromList: function (list) {",
					"        let output_list = [];",
					"        const random = Math.floor(Math.random() * list.length) + 1;",
					"        for (var i = 0; i < random; i++) {",
					"            console.log(\"list value: \" + list[i]);",
					"            output_list.push(list[i]);",
					"            output_list.sort();",
					"        }",
					"        return output_list.map(item => \"\\\"\" + item + \"\\\"\").join();",
					"    }",
					"}",
					"",
					"// Refresh the OAuth token if necessary",
					"console.log('Current environment: ' + pm.environment.name);",
					"",
					"if (pm.environment.name === \"qa\") {",
					"    pm.environment.set(\"vesta_audience\", \"https://equip-qa.us.auth0.com/api/v2/\");",
					"    pm.environment.set(\"token_tenant\", \"equip-qa\");",
					"    pm.environment.set(\"coookieURL\", \"https://equip-qa.us.auth0.com\");",
					"    pm.environment.set(\"vesta_client_id\", \"octk74sRPfVm7zJz314cMMzFHnGO3B2s\")",
					"    pm.environment.set(\"token_host\", \"https://equip-qa.us.auth0.com\")",
					"} else if (pm.environment.name === \"dev\") {",
					"    pm.environment.set(\"vesta_audience\", \"https://equip-dev.us.auth0.com/api/v2/\");",
					"    pm.environment.set(\"token_tenant\", \"equip-dev\");",
					"    pm.environment.set(\"coookieURL\", \"https://equip-dev.us.auth0.com\");",
					"    pm.environment.set(\"vesta_client_id\", \"hh9fZVGIShbS2xXdr7B0glheYEKOFFdw\")",
					"    pm.environment.set(\"token_host\", \"https://equip-dev.us.auth0.com\")",
					"}",
					"",
					"var tokenDate = new Date(2010, 1, 1);",
					"var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");",
					"if (tokenTimestamp) {",
					"    tokenDate = Date.parse(tokenTimestamp);",
					"}",
					"var expiresInTime = pm.environment.get(\"ExpiresInTime\");",
					"if (!expiresInTime) {",
					"    expiresInTime = 86400000; // Set default expiration time to 24 hours (in ms)",
					"}",
					"",
					"if ((new Date() - tokenDate) >= expiresInTime || pm.environment.get(\"test-token\") === \"\") {",
					"    // clearCookies();",
					"    getToken();",
					"}",
					"",
					"var tokenAuthorizationCode1;",
					"var tokenAuthorizationCode2;",
					"//Function to generate token",
					"function getToken() {",
					"    //Clear cookies",
					"    const cookieJar = pm.cookies.jar();",
					"    cookieJar.clear(pm.environment.get(\"coookieURL\"), () => {",
					"        console.log(\"Cookies cleared!\");",
					"        cookieJar.clear(pm.environment.get(\"coookieURL\") + '/usernamepassword/login', () => {",
					"            console.log(\"CSRF cookies cleared!\");",
					"",
					"            console.log(\"Generating token...\")",
					"            //GET authorization code",
					"            pm.sendRequest({",
					"                url: pm.environment.get(\"token_host\") + '/authorize?audience=' + pm.environment.get(\"vesta_audience\")",
					"                    + '&response_type=code&client_id=' + pm.environment.get(\"vesta_client_id\")",
					"                    + '&redirect_uri=https://*.equip.health',",
					"                method: 'GET',",
					"                header: {",
					"                    'Accept': '*/*'",
					"                }",
					"            }, (err, res) => {",
					"                let responseHeaderData = res.headers.get('Location').split('=');",
					"                let token = responseHeaderData[1].split('&');",
					"                tokenAuthorizationCode1 = token[0];",
					"                console.log(tokenAuthorizationCode1);",
					"",
					"                //POST request to login to vesta",
					"                let url = pm.environment.get(\"token_host\") + '/usernamepassword/login';",
					"                pm.sendRequest({",
					"                    url: url,",
					"                    method: 'POST',",
					"                    header: {",
					"                        'Accept': '*/*',",
					"                        'Content-Type': 'application/x-www-form-urlencoded',",
					"                    },",
					"                    body: {",
					"                        mode: 'urlencoded',",
					"                        urlencoded: [",
					"                            { key: \"username\", value: pm.environment.get(\"vesta_username\") },",
					"                            { key: \"password\", value: pm.environment.get(\"vesta_password\") },",
					"                            { key: \"state\", value: tokenAuthorizationCode1 },",
					"                            { key: \"tenant\", value: pm.environment.get(\"token_tenant\") },",
					"                            { key: \"client_id\", value: pm.environment.get(\"vesta_client_id\") },",
					"                            { key: \"redirect_uri\", value: \"https://*.equip.health\" },",
					"                            { key: \"response_type\", value: \"code\" },",
					"                            { key: \"connection\", value: \"Username-Password-Authentication\" }",
					"                        ]",
					"                    }",
					"                }, (err, res) => {",
					"                    const $ = cheerio.load(res.text());",
					"                    var wresult = ($(\"input\")[1])['attribs'].value; // get wresult",
					"                    var wctx = ($(\"input\")[2])['attribs'].value; // get wctx",
					"",
					"                    //POST request to get resume state",
					"                    let url = pm.environment.get(\"token_host\") + '/login/callback';",
					"                    pm.sendRequest({",
					"                        url: url,",
					"                        method: 'POST',",
					"                        header: {",
					"                            'Accept': '*/*',",
					"                            'Content-Type': 'application/x-www-form-urlencoded',",
					"                        },",
					"                        body: {",
					"                            mode: 'urlencoded',",
					"                            urlencoded: [",
					"                                { key: \"wa\", value: \"wsignin1.0\" },",
					"                                { key: \"wresult\", value: wresult },",
					"                                { key: \"wctx\", value: wctx }",
					"                            ]",
					"                        }",
					"                    }, (err, res) => {",
					"                        //GET authorization code",
					"                        pm.sendRequest({",
					"                            url: pm.environment.get(\"token_host\")",
					"                                + '/authorize?audience=' + pm.environment.get(\"vesta_audience\")",
					"                                + '&response_type=code&client_id=' + pm.environment.get(\"vesta_client_id\")",
					"                                + '&redirect_uri=https://*.equip.health',",
					"                            method: 'GET',",
					"                            header: {",
					"                                'Accept': '*/*'",
					"                            }",
					"                        }, (err, res) => {",
					"                            console.log(res);",
					"                            let responseHeaderData = res.headers.get('Location').split('=');",
					"                            let token = responseHeaderData[1].split('&');",
					"                            // console.log(token[0]);",
					"                            tokenAuthorizationCode2 = token[0];",
					"                            // Get token using POST request",
					"                            let url = pm.environment.get(\"token_host\") + '/oauth/token';",
					"                            pm.sendRequest({",
					"                                url: url,",
					"                                method: 'POST',",
					"                                header: {",
					"                                    'Accept': '*/*',",
					"                                    'Content-Type': 'application/x-www-form-urlencoded',",
					"                                },",
					"                                body: {",
					"                                    mode: 'urlencoded',",
					"                                    urlencoded: [",
					"                                        { key: \"client_id\", value: pm.environment.get(\"vesta_client_id\") },",
					"                                        { key: \"code\", value: tokenAuthorizationCode2 },",
					"                                        { key: \"audience\", value: pm.environment.get(\"vesta_audience\") },",
					"                                        { key: \"grant_type\", value: \"authorization_code\" },",
					"                                        { key: \"redirect_uri\", value: \"https://*.equip.health\" }]",
					"                                }",
					"                            }, (err, res) => {",
					"                                console.log(res.json().access_token)",
					"                                pm.environment.set(\"test-token\", res.json().access_token)",
					"                                pm.environment.set(\"OAuth_Timestamp\", new Date());",
					"",
					"                                // Set the ExpiresInTime variable to the time given in the response if it exists",
					"                                if (res.json().expires_in) {",
					"                                    expiresInTime = res.json().expires_in * 1000;",
					"                                }",
					"                                pm.environment.set(\"ExpiresInTime\", expiresInTime);",
					"                            })",
					"                        });",
					"                    });",
					"",
					"                });",
					"            });",
					"        });",
					"    });",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "989e6f10-e98c-4d55-8fc5-2dfd13aee38c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}