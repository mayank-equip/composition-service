{
	"info": {
		"_postman_id": "4f350760-9709-43af-8f74-c26ff3eb54e8",
		"name": "composition-service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "19609580-4f350760-9709-43af-8f74-c26ff3eb54e8"
	},
	"item": [
		{
			"name": "Task Filters",
			"item": [
				{
					"name": "Get Tasks by page size and page number",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f46ec4cf-0165-445a-9bf8-8fa44bccb913",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify response has atlease one assignee_ext_id\", function () {",
									"    pm.expect(jsonData.data[0].taskExternalId).length.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Verify page size and page number\", () => {",
									"    var page_size = pm.request.url.query.get(\"page-size\").toString();",
									"    var page_number = pm.request.url.query.get(\"page-number\").toString();",
									"",
									"    pm.expect(jsonData.pageSize.toString()).to.eql(page_size);",
									"    pm.expect(jsonData.pageNumber.toString()).to.eql(page_number);",
									"    pm.expect(jsonData.totalCount).greaterThan(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a840c4e7-045c-4ad4-8373-09ca9a43d536",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/tasks?page-number=1&page-size=50",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"tasks"
							],
							"query": [
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "page-size",
									"value": "50"
								},
								{
									"key": "filter-by",
									"value": "assignee-external-id::f64a7075-a2bb-4c6c-8d2d-b8ac9a7f1ffc",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllTasks Filter by Assignee",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eefb2399-7e95-4ea5-a32c-f012715ca2ae",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify response has atlease one assignee_ext_id\", function () {",
									"    pm.expect(jsonData.data[0].taskExternalId).length.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Verify each task in the response have the expected assignee external id\", () => {",
									"    var assignee_ext_id = pm.request.url.query.get(\"filter-by\").toString().substring(22);",
									"    for (let i = 0; i < jsonData.data.length; i++) {",
									"        console.log(jsonData.data[i].assignee.externalId);",
									"        pm.expect(jsonData.data[i].assignee.externalId).to.eql(assignee_ext_id);",
									"    }",
									"});",
									"",
									"pm.test(\"Verify pageNumber count\", function () {",
									"    // pm.expect(jsonData.pageNumber.length).to.be.greaterThan(0);",
									"    pm.expect(jsonData.totalCount).to.be.eql(jsonData['data'].length);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1a1611bd-24b0-489c-a6d3-57c8cde71adf",
								"exec": [
									"",
									"if(pm.environment.name === \"qa\"){",
									"    pm.environment.set(\"task_assigned_userid\", \"87a6b43f-1e22-4ff6-93ae-dc003fc9c0c5\");",
									"}else if(pm.environment.name === \"dev\"){",
									"    pm.environment.set(\"task_assigned_userid\", \"8ff50537-55ae-420d-9f4a-1e6a04bd4c8c\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "56358e8c-a16c-4868-9473-57b6de5ff20d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/tasks?filter-by=assignee-external-id::{{task_assigned_userid}}&page-size=500",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"tasks"
							],
							"query": [
								{
									"key": "filter-by",
									"value": "start-date::01/17/2022%2000:00:00%26end-date::01/17/2022%2023:59:59",
									"description": "filter by date",
									"disabled": true
								},
								{
									"key": "filter-by",
									"value": "task-category-external-id::yd16e9b1-394c-470d-b03e-aa577f6fce2z",
									"disabled": true
								},
								{
									"key": "filter-by",
									"value": "assignee-external-id::{{task_assigned_userid}}"
								},
								{
									"key": null,
									"value": "assignee_external_id::961e1047-924f-401c-bd76-926a74f2c888%26assignee_external_id::5418e4cb-40cf-4ece-bbe5-d5eca2599c39%26assignee_external_id::f8505e8d-61cd-4487-a5e9-db957576e063%26status::Void%26status::To do",
									"disabled": true
								},
								{
									"key": "page-size",
									"value": "500"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllTasks Filter by Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8eebea9b-6734-4996-aaab-98a2d3857645",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify response has atlease one patient_ext_id\", function () {",
									"    pm.expect(jsonData.data[0].taskExternalId).length.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Verify each task in the response have the expected patient external id\", () => {",
									"    var patient_ext_id = pm.request.url.query.get(\"filter-by\").toString().substring(21);",
									"    console.log(\"patient_ext_id: \" + patient_ext_id);",
									"    for (let i = 0; i < jsonData.data.length; i++) {",
									"        console.log(jsonData.data[i].patient.externalId);",
									"        pm.expect(jsonData.data[i].patient.externalId).to.eql(patient_ext_id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b2430e6d-624f-4591-8a3e-9f3eeeabbdef",
								"exec": [
									"",
									"",
									"if(pm.environment.name === \"qa\"){",
									"    pm.environment.set(\"patient_id\", \"c734c310-2be9-430d-8cea-4932f8e79dd1\");",
									"}else if(pm.environment.name === \"dev\"){",
									"    pm.environment.set(\"patient_id\", \"a254abca-f1a6-4ae8-90d4-b537d579f285\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b3c0ddca-5a20-4be6-ad88-b8aa585f2805",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/tasks?filter-by=patient-external-id::{{patient_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"tasks"
							],
							"query": [
								{
									"key": "filter-by",
									"value": "assignee_external_id::961e1047-924f-401c-bd76-926a74f2c888%26assignee_external_id::5418e4cb-40cf-4ece-bbe5-d5eca2599c39%26assignee_external_id::f8505e8d-61cd-4487-a5e9-db957576e063%26status::Void%26status::To do",
									"description": "combination of multiple assignee and status",
									"disabled": true
								},
								{
									"key": "filter-by",
									"value": "start-date::01/17/2022%2000:00:00%26end-date::01/17/2022%2023:59:59",
									"description": "filter by date",
									"disabled": true
								},
								{
									"key": "filter-by",
									"value": "task-category-external-id::yd16e9b1-394c-470d-b03e-aa577f6fce2z",
									"disabled": true
								},
								{
									"key": "filter-by",
									"value": "patient-external-id::{{patient_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Details by Task ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa792f0a-b44e-4a80-8a65-a6b93ac444f8",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify response has atlease one patient_ext_id\", function () {",
									"    pm.expect(jsonData.data[0].taskExternalId).length.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Verify each task in the response have the expected patient external id\", () => {",
									"    var patient_ext_id = pm.request.url.query.get(\"filter-by\").toString().substring(18);",
									"    console.log(\"patient_ext_id: \" + patient_ext_id);",
									"    for (let i = 0; i < jsonData.data.length; i++) {",
									"        pm.expect(jsonData.data[i].taskExternalId).to.eql(patient_ext_id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "89862a83-3580-435b-9a5e-6a7c27cef3ed",
								"exec": [
									"",
									"if(pm.environment.name === \"qa\"){",
									"    pm.environment.set(\"taxt_ext_id\", \"53dc4b12-3790-4069-89fb-ace794546bb6\");",
									"}else if(pm.environment.name === \"dev\"){",
									"    pm.environment.set(\"taxt_ext_id\", \"4598a261-afce-4485-aeb0-594bba71ee42\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b945cbfd-9882-410e-8489-80960bcdc367",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/tasks?filter-by=task-external-id::{{taxt_ext_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"tasks"
							],
							"query": [
								{
									"key": "filter-by",
									"value": "assignee_external_id::961e1047-924f-401c-bd76-926a74f2c888%26assignee_external_id::5418e4cb-40cf-4ece-bbe5-d5eca2599c39%26assignee_external_id::f8505e8d-61cd-4487-a5e9-db957576e063%26status::Void%26status::To do",
									"description": "combination of multiple assignee and status",
									"disabled": true
								},
								{
									"key": "filter-by",
									"value": "start-date::01/17/2022%2000:00:00%26end-date::01/17/2022%2023:59:59",
									"description": "filter by date",
									"disabled": true
								},
								{
									"key": "filter-by",
									"value": "task-category-external-id::yd16e9b1-394c-470d-b03e-aa577f6fce2z",
									"disabled": true
								},
								{
									"key": "filter-by",
									"value": "task-external-id::{{taxt_ext_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllTasks Filter by Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "620cb1da-40dd-4d6e-92d4-82c1730cf220",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify response has atlease one category_ext_id\", function () {",
									"    pm.expect(jsonData.data[0].taskExternalId).length.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Verify each task in the response have the expected Category external id\", () => {",
									"    var category_ext_id = pm.request.url.query.get(\"filter-by\").toString().substring(27);",
									"    console.log(\"category_ext_id: \" + category_ext_id);",
									"    for (let i = 0; i < jsonData.length; i++) {",
									"        pm.expect(jsonData.data[i].category.categoryExternalId).to.eql(category_ext_id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4ab44f25-d9a9-4e38-b117-6168d2871b63",
								"exec": [
									"",
									"const category_ids = [",
									"        \"bd12e9b1-394c-470d-b03e-aa577f6fce65\",",
									"        \"yd16e9b1-394c-470d-b03e-aa577f6fce2z\",",
									"        \"35e121e9-bba2-4bf6-a1a9-8e401e93f2b8\",",
									"        \"td1259b1-394c-470d-b03e-aa577f6fce2y\",",
									"        \"rd12e9b1-394c-470d-b03e-aa577f6fce21\",",
									"        \"bd12e9b1-394c-470d-b03e-aa577f6fce22\",",
									"        \"bd12e9b1-394c-470d-b03e-aa577f6fce13\"",
									"    ];",
									"",
									"pm.environment.set(\"task_category_id\", category_ids[Math.floor(Math.random() * category_ids.length)]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1ec83a0f-cbe0-43b4-ba9d-e234173843b0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/tasks?filter-by=task-category-external-id::{{task_category_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"tasks"
							],
							"query": [
								{
									"key": "filter-by",
									"value": "assignee_external_id::961e1047-924f-401c-bd76-926a74f2c888%26assignee_external_id::5418e4cb-40cf-4ece-bbe5-d5eca2599c39%26assignee_external_id::f8505e8d-61cd-4487-a5e9-db957576e063%26status::Void%26status::To do",
									"description": "combination of multiple assignee and status",
									"disabled": true
								},
								{
									"key": "filter-by",
									"value": "start-date::01/17/2022%2000:00:00%26end-date::01/17/2022%2023:59:59",
									"description": "filter by date",
									"disabled": true
								},
								{
									"key": "filter-by",
									"value": "patient-external-id::1c8021b7-43c3-47ac-a958-657a08e15613",
									"disabled": true
								},
								{
									"key": "filter-by",
									"value": "task-category-external-id::{{task_category_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllTasks Filter by Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a7718032-a466-4bac-a03d-f266caf96b85",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify response has atlease one exp_status\", function () {",
									"    pm.expect(jsonData.data[0].taskExternalId).length.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Verify each task in the response have the expected task status\", () => {",
									"    var exp_status = pm.request.url.query.get(\"filter-by\").toString().substring(8);",
									"    console.log(\"act_status: \" + jsonData.data[0].status.taskStatusName);",
									"    console.log(\"exp_status: \" + exp_status.replace(/%20/g, \" \"));",
									"    for (let i = 0; i < jsonData.data.length; i++) {",
									"        pm.expect(jsonData.data[i].status.taskStatusName).to.eql(exp_status.replace(/%20/g, \" \"));",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f09155dc-f29a-4d83-90f0-dee8b679c33d",
								"exec": [
									"const status = [\"To do\", \"In progress\", \"Done\", \"Void\"];",
									"",
									"pm.environment.set(\"task_status\", status[Math.floor(Math.random() * status.length)]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "62600b7b-dcaf-42dd-80c6-d0d1ab10c8aa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/tasks?filter-by=status::{{task_status}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"tasks"
							],
							"query": [
								{
									"key": "filter-by",
									"value": "status::{{task_status}}",
									"description": "combination of multiple assignee and status"
								},
								{
									"key": "filter-by",
									"value": "start-date::01/17/2022%2000:00:00%26end-date::01/17/2022%2023:59:59",
									"description": "filter by date",
									"disabled": true
								},
								{
									"key": "filter-by",
									"value": "task-category-external-id::35e121e9-bba2-4bf6-a1a9-8e401e93f2b8",
									"disabled": true
								},
								{
									"key": "filter-by",
									"value": "patient-external-id::1c8021b7-43c3-47ac-a958-657a08e15613",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllTasks Filter by Priority",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "29ab20d1-1766-477e-b896-97cc6761d3f9",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify response has atlease one exp_priority\", function () {",
									"    pm.expect(jsonData.data[0].taskExternalId).length.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Verify assignee_ext_id for all tasks\", () => {",
									"    var exp_priority = pm.request.url.query.get(\"filter-by\").toString().substring(10);",
									"    console.log(\"exp_priority: \" + exp_priority);",
									"    if (exp_priority === \"Low\") {",
									"        exp_priority = 1;",
									"    } else if (exp_priority === \"Medium\") {",
									"        exp_priority = 2;",
									"    } else {",
									"        exp_priority = 3;",
									"    }",
									"    console.log(\"exp_priority: \" + exp_priority);",
									"    for (let i = 0; i < jsonData.data.length; i++) {",
									"        pm.expect(jsonData.data[i].taskPriorityId).to.eql(exp_priority);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2e96fc0b-0258-4af8-b4fd-d25c0f7b23ce",
								"exec": [
									"const task_priority_ids = [\"Low\", \"Medium\", \"High\"];",
									"",
									"pm.environment.set(\"task_priority_id\", task_priority_ids[Math.floor(Math.random() * task_priority_ids.length)]);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6c781121-317a-4849-8558-2a09b6448060",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/tasks?filter-by=priority::{{task_priority_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"tasks"
							],
							"query": [
								{
									"key": "filter-by",
									"value": "priority::{{task_priority_id}}",
									"description": "combination of multiple assignee and status"
								},
								{
									"key": "filter-by",
									"value": "start-date::01/17/2022%2000:00:00%26end-date::01/17/2022%2023:59:59",
									"description": "filter by date",
									"disabled": true
								},
								{
									"key": "filter-by",
									"value": "task-category-external-id::35e121e9-bba2-4bf6-a1a9-8e401e93f2b8",
									"disabled": true
								},
								{
									"key": "filter-by",
									"value": "patient-external-id::1c8021b7-43c3-47ac-a958-657a08e15613",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllTasks Filter by Due Date",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30e52467-bf5f-4677-949e-4828e6f9711e",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify due date for all tasks\", () => {",
									"    var dateFrom = pm.request.url.query.get(\"filter-by\").toString().substring(12, 41);",
									"    var dateTo = pm.request.url.query.get(\"filter-by\").toString().substring(54);",
									"    console.log(\"dateFrom: \" + dateFrom);",
									"    console.log(\"dateTo: \" + dateTo);",
									"",
									"    for (let i = 0; i < jsonData.data.length; i++) {",
									"        // console.log(i);",
									"        var dateCheck = jsonData.data[i].taskDueDate;",
									"        var from = Date.parse(dateFrom);",
									"        var to = Date.parse(dateTo);",
									"        var check = Date.parse(dateCheck);",
									"        if ((from <= check && to >= check))",
									"            continue;",
									"        else",
									"            pm.expect.fail(\"The due date is not in the given range\");",
									"",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "02eae19b-c0d8-43be-af7d-77403041aa07",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/tasks?filter-by=start-date::2022-05-01T00:00:00.000-04:00%26end-date::2022-06-20T23:59:59.999-04:00",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"tasks"
							],
							"query": [
								{
									"key": "filter-by",
									"value": "priority::Low",
									"description": "combination of multiple assignee and status",
									"disabled": true
								},
								{
									"key": "filter-by",
									"value": "task-category-external-id::35e121e9-bba2-4bf6-a1a9-8e401e93f2b8",
									"disabled": true
								},
								{
									"key": "filter-by",
									"value": "patient-external-id::1c8021b7-43c3-47ac-a958-657a08e15613",
									"disabled": true
								},
								{
									"key": "filter-by",
									"value": "start-date::2022-05-01T00:00:00.000-04:00%26end-date::2022-06-20T23:59:59.999-04:00"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllTasks Filter by Creator",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4f86096b-259f-40d8-8c3a-c8b10565e387",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify response has atlease one taskExternalId\", function () {",
									"    pm.expect(jsonData.data[0].taskExternalId).length.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Verify creator_ext_id for all tasks\", () => {",
									"    var creator_ext_id = pm.request.url.query.get(\"filter-by\").toString().substring(21);",
									"    console.log(\"creator_ext_id: \" + creator_ext_id);",
									"    for (let i = 0; i < jsonData.data.length; i++) {",
									"        pm.expect(jsonData.data[i].createdBy.externalId).to.eql(creator_ext_id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "52da9a3a-0911-4885-acfa-9b0e4531984e",
								"exec": [
									"",
									"if(pm.environment.name === \"qa\"){",
									"    pm.environment.set(\"task_createdby_userid\", \"acaffc36-7057-4b3a-91e1-75554e7581dd\");",
									"}else if(pm.environment.name === \"dev\"){",
									"    pm.environment.set(\"task_createdby_userid\", \"42bd1c96-995d-45c0-bd0b-cee0e167b864\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "00d71769-fa50-4b73-b63d-ed4ff339a137",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/tasks?filter-by=creator-external-id::{{task_createdby_userid}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"tasks"
							],
							"query": [
								{
									"key": "filter-by",
									"value": "priority::Low",
									"description": "combination of multiple assignee and status",
									"disabled": true
								},
								{
									"key": "filter-by",
									"value": "creator-external-id::{{task_createdby_userid}}",
									"description": "filter by date"
								},
								{
									"key": "filter-by",
									"value": "task-category-external-id::35e121e9-bba2-4bf6-a1a9-8e401e93f2b8",
									"disabled": true
								},
								{
									"key": "filter-by",
									"value": "patient-external-id::1c8021b7-43c3-47ac-a958-657a08e15613",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllTasks Order by Due Date",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4df1f8a5-9763-4580-9169-07be1887a787",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"let ld = require('lodash');",
									"",
									"pm.test(\"Verify order by patient\", () => {",
									"    let expectedSortedOrder = ld.orderBy(jsonData.data, ['taskDueDate'], ['asc']);",
									"    console.log(expectedSortedOrder);",
									"    pm.expect(jsonData.data).to.eql(expectedSortedOrder);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "13b771dc-054c-4f74-b5ed-835258ed7095",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c51f31ad-22c2-4e7d-b34b-65e9fce9b374",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/tasks?order-by=due-date&page-size=100",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"tasks"
							],
							"query": [
								{
									"key": "order-by",
									"value": "due-date"
								},
								{
									"key": "page-size",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllTasks Order by Created Date",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "14f0a880-f811-4f5d-b5bb-65c9a8b43b16",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"let ld = require('lodash');",
									"",
									"pm.test(\"Verify order by created date\", () => {",
									"    let expectedSortedOrder = ld.orderBy(jsonData.data, ['taskCreatedDate'], ['desc']);",
									"    console.log(expectedSortedOrder);",
									"    pm.expect(jsonData.data).to.eql(expectedSortedOrder);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "75f0c193-0ac3-4162-abba-0fa6b5f3e773",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5bf34f3a-dee5-4b98-948b-fa1d2b4ea4b0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/tasks?order-by=created-date&page-size=500",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"tasks"
							],
							"query": [
								{
									"key": "order-by",
									"value": "created-date"
								},
								{
									"key": "page-size",
									"value": "500"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllTasks Order by Priority Score",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b78ef0ad-3d17-46f1-9042-1e40c0477bcf",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"let ld = require('lodash');",
									"",
									"pm.test(\"Verify order by priority score\", () => {",
									"    let expectedSortedOrder = ld.orderBy(jsonData.data, ['taskPriorityScore'], ['desc']);",
									"    console.log(expectedSortedOrder);",
									"    pm.expect(jsonData.data).to.eql(expectedSortedOrder);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "dfeb3af5-fd3f-4da3-8056-75d98a1416da",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "19df5343-1f85-493b-a3be-43e785976a67",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/tasks?order-by=priority-score&page-size=500",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"tasks"
							],
							"query": [
								{
									"key": "order-by",
									"value": "priority-score"
								},
								{
									"key": "page-size",
									"value": "500"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllTasks Order by Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "20a071aa-5985-4f46-b756-44db8dba324d",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"let ld = require('lodash');",
									"",
									"pm.test(\"Verify order by category name\", () => {",
									"    let expectedSortedOrder = ld.orderBy(jsonData.data, ['category.categoryName'], ['asc']);",
									"    // console.log(expectedSortedOrder);",
									"    pm.expect(jsonData.data).to.eql(expectedSortedOrder);",
									"});",
									"",
									"/*pm.test(\"Verify order by category name - due date\", () => {",
									"    let expectedSortedOrder = ld.orderBy(jsonData.data, ['taskDueDate'], ['asc']);",
									"    console.log(expectedSortedOrder);",
									"    pm.expect(jsonData.data).to.eql(expectedSortedOrder);",
									"});*/",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2b6334be-66e0-4053-9d52-b901f20d5713",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ff772300-1013-4634-bfbd-f34210a1090b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/tasks?page-number=1&page-size=100&order-by=category",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"tasks"
							],
							"query": [
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "page-size",
									"value": "100"
								},
								{
									"key": "order-by",
									"value": "category"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllTasks Order by Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9a51140f-8be2-4d5d-b8db-9b26df9368d7",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"let ld = require('lodash');",
									"",
									"pm.test(\"Verify order by patient\", () => {",
									"    let expectedSortedOrder = ld.orderBy(jsonData.data, ['patient.lastName'], ['asc']);",
									"    console.log(expectedSortedOrder);",
									"    pm.expect(jsonData.data).to.eql(expectedSortedOrder);",
									"});",
									"",
									"/*pm.test(\"Verify order by patient name - due date\", () => {",
									"    let expectedSortedOrder = ld.orderBy(jsonData.data, ['taskDueDate'], ['asc']);",
									"    //console.log(expectedSortedOrder);",
									"    pm.expect(jsonData.data).to.eql(expectedSortedOrder);",
									"});*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3e5da20d-3422-4024-beb5-2d31b43d7d17",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "dfb0fc6e-eaeb-4d53-898b-df17b8b7a8ad",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/tasks?order-by=patient&page-size=100",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"tasks"
							],
							"query": [
								{
									"key": "order-by",
									"value": "patient"
								},
								{
									"key": "page-size",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllTasks Filter by Created Date range",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f3965e1e-b622-4492-8b2a-9f6e48122cba",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify created date for all tasks\", () => {",
									"    var filterString = pm.request.url.query.get(\"filter-by\").toString();",
									"    var filterObj = filterString.split('%26')",
									"        .reduce((obj, filter) => {",
									"            const [key, val] = filter.split('::');",
									"            return {...obj, [key]: val };",
									"        }, {});",
									"",
									"    var dateFrom = filterObj[\"task-created-start-date\"];",
									"    var dateTo = filterObj[\"task-created-end-date\"];",
									"    console.log(\"dateFrom: \" + dateFrom);",
									"    console.log(\"dateTo: \" + dateTo);",
									"",
									"    var from = Date.parse(dateFrom);",
									"    var to = Date.parse(dateTo);",
									"",
									"    for (let i = 0; i < jsonData.data.length; i++) {",
									"        var dateCheck = jsonData.data[i].taskCreatedDate;",
									"        var check = Date.parse(dateCheck);",
									"        console.log(\"i: \"+i);",
									"        console.log(\"taskExternalId: \"+jsonData.data[i].taskExternalId);",
									"        console.log(\"check: \"+check);",
									"        if ((from <= check && to >= check))",
									"            continue;",
									"        else",
									"            pm.expect.fail(\"The created date is not in the given range\");",
									"",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9ca3316f-af93-4b89-96ed-e80a7de333d8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/tasks?page-size=500&filter-by=task-created-start-date::2022-07-31T00:00:00.000%26task-created-end-date::2022-08-11T23:59:59.999",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"tasks"
							],
							"query": [
								{
									"key": "page-size",
									"value": "500"
								},
								{
									"key": "filter-by",
									"value": "task-created-start-date::2022-07-31T00:00:00.000%26task-created-end-date::2022-08-11T23:59:59.999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllTasks Filter by Created start date",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e77e103b-a460-444a-95eb-021b231c01b2",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify created date for all tasks\", () => {",
									"    var dateFrom = pm.request.url.query.get(\"filter-by\").toString().substring(25);",
									"    console.log(\"dateFrom: \" + dateFrom);",
									"    var from = Date.parse(dateFrom);",
									"",
									"    for (let i = 0; i < jsonData.data.length; i++) {",
									"        var dateCheck = jsonData.data[i].taskCreatedDate;",
									"        var check = Date.parse(dateCheck);",
									"        if (from <= check)",
									"            continue;",
									"        else",
									"            pm.expect.fail(\"The created date is not in the given range\");",
									"",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2e5821de-5bfa-414e-839c-6c5c7a89e35c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/tasks?page-size=500&page-number=1&filter-by=task-created-start-date::2022-05-01T00:00:00.000",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"tasks"
							],
							"query": [
								{
									"key": "page-size",
									"value": "500"
								},
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "filter-by",
									"value": "task-created-start-date::2022-05-01T00:00:00.000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllTasks Filter by Created end date",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6294d9f7-b006-42d5-9190-bb9a069460b5",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify created date for all tasks\", () => {",
									"    var dateTo = pm.request.url.query.get(\"filter-by\").toString().substring(23);",
									"    console.log(\"dateFrom: \" + dateTo);",
									"    var to = Date.parse(dateTo);",
									"",
									"    for (let i = 0; i < jsonData.data.length; i++) {",
									"        var dateCheck = jsonData.data[i].taskCreatedDate;",
									"        var check = Date.parse(dateCheck);",
									"        if (to >= check)",
									"            continue;",
									"        else",
									"            pm.expect.fail(\"The created date is not in the given range\");",
									"",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ebe78b65-93d1-4a93-8558-7a05a0a245d0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/tasks?page-size=500&page-number=1&filter-by=task-created-end-date::2022-05-01T23:59:59.999",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"tasks"
							],
							"query": [
								{
									"key": "page-size",
									"value": "500"
								},
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "filter-by",
									"value": "task-created-end-date::2022-05-01T23:59:59.999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllTasks Filter by Created and due date",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "307924dc-fb77-404e-8d84-d349bd11a952",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify created date and due date in the response falls under the given range\", () => {",
									"    var filterString = pm.request.url.query.get(\"filter-by\").toString();",
									"    var filterObj = filterString.split('%26')",
									"        .reduce((obj, filter) => {",
									"            const [key, val] = filter.split('::');",
									"            return {...obj, [key]: val };",
									"        }, {});",
									"",
									"    var createdFrom = Date.parse(filterObj[\"task-created-start-date\"]);",
									"    var createdTo = Date.parse(filterObj[\"task-created-end-date\"]);",
									"    var dueFrom = Date.parse(filterObj[\"start-date\"]);",
									"    var dueTo = Date.parse(filterObj[\"end-date\"]);",
									"",
									"    for (let i = 0; i < jsonData.data.length; i++) {",
									"        var createdDateCheck = Date.parse(jsonData.data[i].taskCreatedDate);",
									"        var dueDateCheck = Date.parse(jsonData.data[i].taskDueDate);",
									"        if ((createdTo >= createdDateCheck) && (dueFrom <= dueDateCheck && dueTo >= dueDateCheck))",
									"            continue;",
									"        else",
									"            pm.expect.fail(\"The created and due dates are not in the range of provided task created and due date\");",
									"",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1acfe4f9-54e9-47c0-bf57-90d26c49516d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/tasks?page-size=500&page-number=1&filter-by=task-created-start-date::2022-08-01T00:00:00.000%26task-created-end-date::2022-08-31T23:59:59.999%26start-date::2022-08-03T00:00:00.000-04:00%26end-date::2022-09-30T23:59:59.999-04:00",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"tasks"
							],
							"query": [
								{
									"key": "page-size",
									"value": "500"
								},
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "filter-by",
									"value": "task-created-start-date::2022-08-01T00:00:00.000%26task-created-end-date::2022-08-31T23:59:59.999%26start-date::2022-08-03T00:00:00.000-04:00%26end-date::2022-09-30T23:59:59.999-04:00"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "c54ce839-8ae5-4fd5-b6c1-ff3e779c8130",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4fd59a98-76bc-4aaa-b7c0-2b80b756f830",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "17bf7bb5-eb88-4b68-be5a-dfff59ec4028",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response time is less than 4000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(4000);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Task Activity Log",
			"item": [
				{
					"name": "Add Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fe067e37-2846-4372-9b56-762dea68d86c",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify id is generated\", function () {",
									"    pm.expect(jsonData.id).length.greaterThan(0);",
									"});",
									"",
									"pm.environment.set(\"patientId\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9ddded40-0470-4fd6-b264-f6526cf2bc2e",
								"exec": [
									"let ld = require('lodash');",
									"",
									"let gendersList = [",
									"    \"Cis-gender male\",",
									"    \"Cis-gender female\",",
									"    \"Non-binary\",",
									"    \"Other\",",
									"    \"Unknown\",",
									"    \"Transgender male\",",
									"    \"Transgender female\"",
									"];",
									"",
									"let pronounsList = [",
									"    \"He/Him/His\",",
									"    \"She/Her/Hers\",",
									"    \"They/Them/Theirs\",",
									"    \"Other\"",
									"];",
									"",
									"let ethnicitiesList = [",
									"    \"Asian\",",
									"    \"Black/African American\",",
									"    \"White/Caucasian\",",
									"    \"Hispanic/Latinx\",",
									"    \"Native American, Indian American, or Alaska Native\",",
									"    \"Native Hawaiian or other Pacific Islander\",",
									"    \"Middle Eastern or North African\",",
									"    \"Prefer not to answer\",",
									"    \"Other\"",
									"];",
									"",
									"let languagesList = [",
									"    \"English\",",
									"    \"Spanish\",",
									"    \"Chinese\",",
									"    \"French\",",
									"    \"Tagalog\",",
									"    \"Vietnamese\",",
									"    \"Korean\",",
									"    \"German\",",
									"    \"Russian\",",
									"    \"Italian\",",
									"    \"Portuguese\",",
									"    \"Polish\",",
									"    \"Japanese\",",
									"    \"Persian\",",
									"    \"Greek\",",
									"    \"Serbo-Croatian\",",
									"    \"Armenian\",",
									"    \"Yiddish\",",
									"    \"American Sign Language (ASL)\"",
									"];",
									"",
									"let sexList = [",
									"    \"Male\",",
									"    \"Female\"",
									"];",
									"",
									"let timezonesList = [",
									"    \"Hawaii Standard Time\",",
									"    \"Hawaii-Aleutian Time\",",
									"    \"Alaska Time\",",
									"    \"Pacific Time\",",
									"    \"Arizona\",",
									"    \"Mountain Time\",",
									"    \"Central Time\",",
									"    \"Eastern Time\"",
									"];",
									"",
									"let contactPreferences = [\"Email\", \"No preference\", \"Phone\", \"Unknown\"];",
									"",
									"let statesList = [\"AK\", \"AL\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"DC\", \"FL\", \"GA\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"OH\", \"OK\", \"OR\", \"PA\", \"PR\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\", \"Outside US\", \"Unknown\"];",
									"",
									"let addressLine2List = [\"Apt 1\", \"Apt 2\", \"Apt 3\", \"Unit #1\", \"Unit #2\", \"Unit #3\", \"Apt 2L\", \"Apt 2R\"];",
									"",
									"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let lastName = pm.variables.replaceIn('{{$randomLastName}}');",
									"let chosenName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let email = \"qa\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
									"let zip = Math.floor(10000 + Math.random() * 90000);",
									"",
									"//Generate random Date of Birth in YYYY-MM-DD Format",
									"function randomDate(start, end) {",
									"    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));",
									"}",
									"let date = randomDate(new Date(1990, 00, 01), new Date());",
									"let dateOfBirth = date.getFullYear() + '-' + (\"0\" + (date.getMonth() + 1)).slice(-2) + '-' + (\"0\" + date.getDate()).slice(-2);",
									"",
									"//Save the variables to be used in next request for validation",
									"pm.environment.set(\"patientFirstName\", firstName);",
									"pm.environment.set(\"patientLastName\", lastName);",
									"pm.environment.set(\"patientEmail\", email);",
									"pm.environment.set(\"patientPhoneNumber\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));",
									"//pm.environment.set(\"patientChosenName\", chosenName);",
									"pm.environment.set(\"patientDateOfBirth\", dateOfBirth);",
									"pm.environment.set(\"patientAddressLine1\", pm.variables.replaceIn('{{$randomStreetAddress}}'));",
									"pm.environment.set(\"patientAddressLine2\", ld.sample(addressLine2List));",
									"pm.environment.set(\"patientCity\", pm.variables.replaceIn('{{$randomCity}}'));",
									"pm.environment.set(\"patientState\", ld.sample(statesList));",
									"pm.environment.set(\"patientCountry\", \"US\");",
									"pm.environment.set(\"patientZip\", zip.toString());",
									"pm.environment.set(\"patientLatitude\", pm.variables.replaceIn('{{$randomLatitude}}'));",
									"pm.environment.set(\"patientLongitude\", pm.variables.replaceIn('{{$randomLongitude}}'));",
									"pm.environment.set(\"patientEthnicities\", JSON.stringify(ld.sampleSize(ethnicitiesList, 2).sort()));",
									"pm.environment.set(\"patientLanguages\", JSON.stringify(ld.sampleSize(languagesList, 2).sort()));",
									"pm.environment.set(\"patientGenderOnRecord\", ld.sample(gendersList));",
									"pm.environment.set(\"patientGenderOffRecord\", ld.sample(gendersList));",
									"pm.environment.set(\"patientPronounsOnRecord\", ld.sample(pronounsList));",
									"pm.environment.set(\"patientPronounsOffRecord\", ld.sample(pronounsList));",
									"pm.environment.set(\"patientSex\", ld.sample(sexList));",
									"pm.environment.set(\"patientTimezone\", ld.sample(timezonesList));",
									"pm.environment.set(\"patientContactPreferences\", JSON.stringify(ld.sampleSize(contactPreferences, 2).sort()));"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "61a4d4d3-19c6-43b4-a483-fab30ce107be",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{patientFirstName}}\",\n    \"lastName\": \"{{patientLastName}}\",\n    \"dateOfBirth\": \"{{patientDateOfBirth}}\",\n    \"email\": \"{{patientEmail}}\",\n    \"contactPreferences\": {{patientContactPreferences}},\n    \"ethnicities\": {{patientEthnicities}},\n    \"phoneNumber\": \"{{patientPhoneNumber}}\",\n    \"languages\": {{patientLanguages}},\n    \"genderOnRecord\": \"{{patientGenderOnRecord}}\",\n    \"genderOffRecord\": \"{{patientGenderOffRecord}}\",\n    \"pronounsOnRecord\": \"{{patientPronounsOnRecord}}\",\n    \"pronounsOffRecord\": \"{{patientPronounsOffRecord}}\",\n    \"sex\": \"{{patientSex}}\",\n    \"timezone\": \"{{patientTimezone}}\",\n    \"latitude\": \"{{patientLatitude}}\",\n    \"longitude\": \"{{patientLongitude}}\",\n    \"addressLine1\": \"{{patientAddressLine1}}\",\n    \"addressLine2\": \"{{patientAddressLine2}}\",\n    \"city\": \"{{patientCity}}\",\n    \"country\": \"{{patientCountry}}\",\n    \"state\": \"{{patientState}}\",\n    \"zip\": \"{{patientZip}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/patients",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Patient2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7d7d4098-8aa5-4074-9b69-b0fae7c2c5a6",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify id is generated\", function () {",
									"    pm.expect(jsonData.id).length.greaterThan(0);",
									"});",
									"",
									"pm.environment.set(\"patientId2\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "37f1a7aa-b3e4-4e5e-a3d4-d3484d969951",
								"exec": [
									"let ld = require('lodash');",
									"",
									"let gendersList = [",
									"    \"Cis-gender male\",",
									"    \"Cis-gender female\",",
									"    \"Non-binary\",",
									"    \"Other\",",
									"    \"Unknown\",",
									"    \"Transgender male\",",
									"    \"Transgender female\"",
									"];",
									"",
									"let pronounsList = [",
									"    \"He/Him/His\",",
									"    \"She/Her/Hers\",",
									"    \"They/Them/Theirs\",",
									"    \"Other\"",
									"];",
									"",
									"let ethnicitiesList = [",
									"    \"Asian\",",
									"    \"Black/African American\",",
									"    \"White/Caucasian\",",
									"    \"Hispanic/Latinx\",",
									"    \"Native American, Indian American, or Alaska Native\",",
									"    \"Native Hawaiian or other Pacific Islander\",",
									"    \"Middle Eastern or North African\",",
									"    \"Prefer not to answer\",",
									"    \"Other\"",
									"];",
									"",
									"let languagesList = [",
									"    \"English\",",
									"    \"Spanish\",",
									"    \"Chinese\",",
									"    \"French\",",
									"    \"Tagalog\",",
									"    \"Vietnamese\",",
									"    \"Korean\",",
									"    \"German\",",
									"    \"Russian\",",
									"    \"Italian\",",
									"    \"Portuguese\",",
									"    \"Polish\",",
									"    \"Japanese\",",
									"    \"Persian\",",
									"    \"Greek\",",
									"    \"Serbo-Croatian\",",
									"    \"Armenian\",",
									"    \"Yiddish\",",
									"    \"American Sign Language (ASL)\"",
									"];",
									"",
									"let sexList = [",
									"    \"Male\",",
									"    \"Female\"",
									"];",
									"",
									"let timezonesList = [",
									"    \"Hawaii Standard Time\",",
									"    \"Hawaii-Aleutian Time\",",
									"    \"Alaska Time\",",
									"    \"Pacific Time\",",
									"    \"Arizona\",",
									"    \"Mountain Time\",",
									"    \"Central Time\",",
									"    \"Eastern Time\"",
									"];",
									"",
									"let contactPreferences = [\"Email\", \"No preference\", \"Phone\", \"Unknown\"];",
									"",
									"let statesList = [\"AK\", \"AL\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"DC\", \"FL\", \"GA\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"OH\", \"OK\", \"OR\", \"PA\", \"PR\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\", \"Outside US\", \"Unknown\"];",
									"",
									"let addressLine2List = [\"Apt 1\", \"Apt 2\", \"Apt 3\", \"Unit #1\", \"Unit #2\", \"Unit #3\", \"Apt 2L\", \"Apt 2R\"];",
									"",
									"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let lastName = pm.variables.replaceIn('{{$randomLastName}}');",
									"let chosenName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let email = \"qa\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
									"let zip = Math.floor(10000 + Math.random() * 90000);",
									"",
									"//Generate random Date of Birth in YYYY-MM-DD Format",
									"function randomDate(start, end) {",
									"    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));",
									"}",
									"let date = randomDate(new Date(1990, 00, 01), new Date());",
									"let dateOfBirth = date.getFullYear() + '-' + (\"0\" + (date.getMonth() + 1)).slice(-2) + '-' + (\"0\" + date.getDate()).slice(-2);",
									"",
									"//Save the variables to be used in next request for validation",
									"pm.environment.set(\"patientFirstName2\", firstName);",
									"pm.environment.set(\"patientLastName2\", lastName);",
									"pm.environment.set(\"patientEmail\", email);",
									"pm.environment.set(\"patientPhoneNumber\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));",
									"//pm.environment.set(\"patientChosenName2\", chosenName);",
									"pm.environment.set(\"patientDateOfBirth\", dateOfBirth);",
									"pm.environment.set(\"patientAddressLine1\", pm.variables.replaceIn('{{$randomStreetAddress}}'));",
									"pm.environment.set(\"patientAddressLine2\", ld.sample(addressLine2List));",
									"pm.environment.set(\"patientCity\", pm.variables.replaceIn('{{$randomCity}}'));",
									"pm.environment.set(\"patientState\", ld.sample(statesList));",
									"pm.environment.set(\"patientCountry\", \"US\");",
									"pm.environment.set(\"patientZip\", zip.toString());",
									"pm.environment.set(\"patientLatitude\", pm.variables.replaceIn('{{$randomLatitude}}'));",
									"pm.environment.set(\"patientLongitude\", pm.variables.replaceIn('{{$randomLongitude}}'));",
									"pm.environment.set(\"patientEthnicities\", JSON.stringify(ld.sampleSize(ethnicitiesList, 2).sort()));",
									"pm.environment.set(\"patientLanguages\", JSON.stringify(ld.sampleSize(languagesList, 2).sort()));",
									"pm.environment.set(\"patientGenderOnRecord\", ld.sample(gendersList));",
									"pm.environment.set(\"patientGenderOffRecord\", ld.sample(gendersList));",
									"pm.environment.set(\"patientPronounsOnRecord\", ld.sample(pronounsList));",
									"pm.environment.set(\"patientPronounsOffRecord\", ld.sample(pronounsList));",
									"pm.environment.set(\"patientSex\", ld.sample(sexList));",
									"pm.environment.set(\"patientTimezone\", ld.sample(timezonesList));",
									"pm.environment.set(\"patientContactPreferences\", JSON.stringify(ld.sampleSize(contactPreferences, 2).sort()));"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8b876a63-a5e5-4e46-8c71-8505b1c69cf6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{patientFirstName2}}\",\n    \"lastName\": \"{{patientLastName2}}\",\n    \"dateOfBirth\": \"{{patientDateOfBirth}}\",\n    \"email\": \"{{patientEmail}}\",\n    \"contactPreferences\": {{patientContactPreferences}},\n    \"ethnicities\": {{patientEthnicities}},\n    \"phoneNumber\": \"{{patientPhoneNumber}}\",\n    \"languages\": {{patientLanguages}},\n    \"genderOnRecord\": \"{{patientGenderOnRecord}}\",\n    \"genderOffRecord\": \"{{patientGenderOffRecord}}\",\n    \"pronounsOnRecord\": \"{{patientPronounsOnRecord}}\",\n    \"pronounsOffRecord\": \"{{patientPronounsOffRecord}}\",\n    \"sex\": \"{{patientSex}}\",\n    \"timezone\": \"{{patientTimezone}}\",\n    \"latitude\": \"{{patientLatitude}}\",\n    \"longitude\": \"{{patientLongitude}}\",\n    \"addressLine1\": \"{{patientAddressLine1}}\",\n    \"addressLine2\": \"{{patientAddressLine2}}\",\n    \"city\": \"{{patientCity}}\",\n    \"country\": \"{{patientCountry}}\",\n    \"state\": \"{{patientState}}\",\n    \"zip\": \"{{patientZip}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/patients",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Provider",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6d188af9-cb7c-4ce9-a7f5-8c1baa3d085a",
								"exec": [
									"let ld = require('lodash');",
									"let timezones = [\"Hawaii Standard Time\", \"Hawaii-Aleutian Time\", \"Alaska Time\", \"Pacific Time\", \"Arizona\", \"Mountain Time\", \"Central Time\", \"Eastern Time\", \"London/UK Time\"];",
									"let regions = [\"Northeast\", \"Southwest\", \"Southeast\", \"West\", \"Midwest\"];",
									"let providerTypes = [",
									"        \"Admissions Specialist\",",
									"        \"Analyst\",",
									"        \"Billing Specialist\",",
									"        \"Care Coordinator\",",
									"        \"Client Success\",",
									"        \"Clinical Ops\",",
									"        \"Clinical Supervisor\",",
									"        \"Dietitian\",",
									"        \"Family Experience Navigator\",",
									"        \"Family Mentor\",",
									"        \"Insurance Specialist\",",
									"        \"Nurse Practitioner\",",
									"        \"Patient Service Representative\",",
									"        \"Peer Mentor\",",
									"        \"Physician\",",
									"        \"Physician Assistant\",",
									"        \"Practice Coordinator\",",
									"        \"Product Support\",",
									"        \"Provider Partnerships\",",
									"        \"Psychiatrist\",",
									"        \"Therapist\"",
									"    ];",
									"let capacities = [\"full-time\", \"part-time\"];",
									"",
									"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let lastName = pm.variables.replaceIn('{{$randomLastName}}')",
									"let email = \"qa\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
									"let phoneNumber = pm.variables.replaceIn('{{$randomPhoneNumber}}');",
									"",
									"let supervisorId = \"\";",
									"",
									"let capacity = ld.sample(capacities);",
									"",
									"let hoursPerWeek;",
									"if (capacity == \"full-time\") {",
									"    hoursPerWeek = 40;",
									"} else {",
									"    hoursPerWeek = Math.floor(Math.random() * 90);",
									"}",
									"",
									"let accountStatus = \"active\";",
									"",
									"let permissions = [\"admin\", \"maud\", \"both\"];",
									"let permission = ld.sample(permissions);",
									"",
									"let roles = [\"admin:role:manage-users\",",
									"    \"maud:role:general-access\",",
									"    \"maud:role:advanced-access\"];",
									"",
									"if (permission === \"admin\") {",
									"    roles = [\"\\\"admin:role:manage-users\\\"\"];",
									"} else if (permission === \"maud\") {",
									"    roles = [\"\\\"maud:role:general-access\\\"\", \"\\\"maud:role:advanced-access\\\"\"];",
									"} else if (permission === \"both\") {",
									"    roles = [\"\\\"admin:role:manage-users\\\"\", \"\\\"maud:role:general-access\\\"\", \"\\\"maud:role:advanced-access\\\"\"];",
									"}",
									"",
									"pm.environment.set(\"providerFirstName\", firstName);",
									"pm.environment.set(\"providerLastName\", lastName);",
									"pm.environment.set(\"providerEmail\", email);",
									"pm.environment.set(\"providerPhoneNumber\", phoneNumber);",
									"pm.environment.set(\"providerTimezone\", ld.sample(timezones));",
									"pm.environment.set(\"providerRegion\", ld.sample(regions));",
									"pm.environment.set(\"providerType\", ld.sample(providerTypes));",
									"pm.environment.set(\"providerCapacity\", capacity);",
									"pm.environment.set(\"providerHoursPerWeek\", hoursPerWeek);",
									"pm.environment.set(\"providerAccountStatus\", accountStatus);",
									"pm.environment.set(\"providerRoles\", roles);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cd87b070-1d75-4204-986a-5dd2da10abd9",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify id is generated\", function () {",
									"    pm.expect(jsonData.id).length.greaterThan(0);",
									"});",
									"",
									"pm.environment.set(\"providerId\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8fb70fae-f5e1-45e9-9bb2-3e9b4aaf2184",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{providerFirstName}}\",\n    \"lastName\": \"{{providerLastName}}\",\n    \"email\": \"{{providerEmail}}\",\n    \"phoneNumber\": \"{{providerPhoneNumber}}\",\n    \"timezone\": \"{{providerTimezone}}\",\n    \"region\": \"{{providerRegion}}\",\n    \"providerType\": \"{{providerType}}\",\n    \"capacity\": \"{{providerCapacity}}\",\n    \"hoursPerWeek\": \"{{providerHoursPerWeek}}\",\n    \"accountStatus\": \"{{providerAccountStatus}}\",\n    \"roles\": [\n        {{providerRoles}}\n    ],\n    \"supervisorId\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/providers",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"providers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Provider2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "600c57b7-91e3-4b34-9153-218008c2c032",
								"exec": [
									"let ld = require('lodash');",
									"let timezones = [\"Hawaii Standard Time\", \"Hawaii-Aleutian Time\", \"Alaska Time\", \"Pacific Time\", \"Arizona\", \"Mountain Time\", \"Central Time\", \"Eastern Time\", \"London/UK Time\"];",
									"let regions = [\"Northeast\", \"Southwest\", \"Southeast\", \"West\", \"Midwest\"];",
									"let providerTypes = [",
									"        \"Admissions Specialist\",",
									"        \"Analyst\",",
									"        \"Billing Specialist\",",
									"        \"Care Coordinator\",",
									"        \"Client Success\",",
									"        \"Clinical Ops\",",
									"        \"Clinical Supervisor\",",
									"        \"Dietitian\",",
									"        \"Family Experience Navigator\",",
									"        \"Family Mentor\",",
									"        \"Insurance Specialist\",",
									"        \"Nurse Practitioner\",",
									"        \"Patient Service Representative\",",
									"        \"Peer Mentor\",",
									"        \"Physician\",",
									"        \"Physician Assistant\",",
									"        \"Practice Coordinator\",",
									"        \"Product Support\",",
									"        \"Provider Partnerships\",",
									"        \"Psychiatrist\",",
									"        \"Therapist\"",
									"    ];",
									"let capacities = [\"full-time\", \"part-time\"];",
									"",
									"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let lastName = pm.variables.replaceIn('{{$randomLastName}}')",
									"let email = \"qa\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
									"let phoneNumber = pm.variables.replaceIn('{{$randomPhoneNumber}}');",
									"",
									"let supervisorId = \"\";",
									"",
									"let capacity = ld.sample(capacities);",
									"",
									"let hoursPerWeek;",
									"if (capacity == \"full-time\") {",
									"    hoursPerWeek = 40;",
									"} else {",
									"    hoursPerWeek = Math.floor(Math.random() * 90);",
									"}",
									"",
									"let accountStatus = \"active\";",
									"",
									"let permissions = [\"admin\", \"maud\", \"both\"];",
									"let permission = ld.sample(permissions);",
									"",
									"let roles = [\"admin:role:manage-users\",",
									"    \"maud:role:general-access\",",
									"    \"maud:role:advanced-access\"];",
									"",
									"if (permission === \"admin\") {",
									"    roles = [\"\\\"admin:role:manage-users\\\"\"];",
									"} else if (permission === \"maud\") {",
									"    roles = [\"\\\"maud:role:general-access\\\"\", \"\\\"maud:role:advanced-access\\\"\"];",
									"} else if (permission === \"both\") {",
									"    roles = [\"\\\"admin:role:manage-users\\\"\", \"\\\"maud:role:general-access\\\"\", \"\\\"maud:role:advanced-access\\\"\"];",
									"}",
									"",
									"pm.environment.set(\"providerFirstName2\", firstName);",
									"pm.environment.set(\"providerLastName2\", lastName);",
									"pm.environment.set(\"providerEmail\", email);",
									"pm.environment.set(\"providerPhoneNumber\", phoneNumber);",
									"pm.environment.set(\"providerTimezone\", ld.sample(timezones));",
									"pm.environment.set(\"providerRegion\", ld.sample(regions));",
									"pm.environment.set(\"providerType\", ld.sample(providerTypes));",
									"pm.environment.set(\"providerCapacity\", capacity);",
									"pm.environment.set(\"providerHoursPerWeek\", hoursPerWeek);",
									"pm.environment.set(\"providerAccountStatus\", accountStatus);",
									"pm.environment.set(\"providerRoles\", roles);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dcd65df1-5e91-44fd-8153-55aafc6d3886",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify id is generated\", function () {",
									"    pm.expect(jsonData.id).length.greaterThan(0);",
									"});",
									"",
									"pm.environment.set(\"providerId2\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "71758377-46f7-416b-9d4c-99b3e24c02f1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{providerFirstName2}}\",\n    \"lastName\": \"{{providerLastName2}}\",\n    \"email\": \"{{providerEmail}}\",\n    \"phoneNumber\": \"{{providerPhoneNumber}}\",\n    \"timezone\": \"{{providerTimezone}}\",\n    \"region\": \"{{providerRegion}}\",\n    \"providerType\": \"{{providerType}}\",\n    \"capacity\": \"{{providerCapacity}}\",\n    \"hoursPerWeek\": \"{{providerHoursPerWeek}}\",\n    \"accountStatus\": \"{{providerAccountStatus}}\",\n    \"roles\": [\n        {{providerRoles}}\n    ],\n    \"supervisorId\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/providers",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"providers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Task",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "82c0afbf-a6e9-4ca1-a2e4-764156cf4193",
								"exec": [
									"\r",
									"  var date_timestamp = new Date().toISOString();\r",
									"  const task_priority_ids = [1, 2, 3];\r",
									"  \r",
									"  ///// get random due date (today or future date) /////\r",
									"  var start = new Date();\r",
									"  var end = new Date(start.getFullYear()+1, 1, 1);\r",
									"  var task_due_date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"  var month = (task_due_date.getMonth() + 1) >= 10 ? task_due_date.getMonth() + 1 : \"0\" + (task_due_date.getMonth() + 1);\r",
									"  console.log(\"month: \" + month);\r",
									"  var day = (task_due_date.getDate() + 1) > 10 ? task_due_date.getDate() : \"0\" + task_due_date.getDate();\r",
									"  var task_due_date = task_due_date.getFullYear() + '-' + month + '-' + day;\r",
									"  task_due_date = task_due_date + \"T23:59:59.999Z\";\r",
									"  ///// end - get random due date (today or future date) /////\r",
									"  \r",
									"  ///// get random category and its sub_category\r",
									"  var category_id;\r",
									"  var sub_category_id;\r",
									"  \r",
									"  const category_names = [\r",
									"      \"Admissions\",\r",
									"      \"Billing\",\r",
									"      \"Inquiry\",\r",
									"      \"Outreach\",\r",
									"      \"Referral\",\r",
									"      \"Review\",\r",
									"      \"Treatment team\"\r",
									"  ];\r",
									"  \r",
									"  const category_ids = [\r",
									"      \"bd12e9b1-394c-470d-b03e-aa577f6fce65\",\r",
									"      \"yd16e9b1-394c-470d-b03e-aa577f6fce2z\",\r",
									"      \"35e121e9-bba2-4bf6-a1a9-8e401e93f2b8\",\r",
									"      \"td1259b1-394c-470d-b03e-aa577f6fce2y\",\r",
									"      \"rd12e9b1-394c-470d-b03e-aa577f6fce21\",\r",
									"      \"bd12e9b1-394c-470d-b03e-aa577f6fce22\",\r",
									"      \"bd12e9b1-394c-470d-b03e-aa577f6fce13\"\r",
									"  ];\r",
									"  \r",
									"  var subcategories_names_map = {\r",
									"      \"Admissions\": [\r",
									"          \"Assessment\",\r",
									"          \"Enroll\",\r",
									"          \"General\",\r",
									"          \"Insurance verification\",\r",
									"          \"Medical clearance\",\r",
									"          \"Medical records coordination\",\r",
									"          \"Onboard\",\r",
									"          \"Patient correspondence\",\r",
									"          \"Phone screen\",\r",
									"          \"Provider assignment\"\r",
									"      ],\r",
									"      \"Inquiry\": [\r",
									"          \"Correspondence\",\r",
									"          \"General\",\r",
									"          \"Inbound outreach\",\r",
									"          \"Initial outreach\",\r",
									"          \"Insurance verification\",\r",
									"          \"Phone screen\"\r",
									"      ],\r",
									"      \"Referral\": [\r",
									"          \"Correspondence\",\r",
									"          \"General\",\r",
									"          \"Inbound outreach\",\r",
									"          \"Initial outreach\",\r",
									"          \"Phone screen\"\r",
									"      ],\r",
									"      \"Review\": [\r",
									"          \"Consult\",\r",
									"          \"Supervise\"\r",
									"      ],\r",
									"      \"Treatment Team\": [\r",
									"          \"Assess\",\r",
									"          \"Care plan\",\r",
									"          \"Discharge\",\r",
									"          \"Follow-up\",\r",
									"          \"Order labs\",\r",
									"          \"Prescribe meds\",\r",
									"          \"Reminder\",\r",
									"          \"Schedule appointment\"\r",
									"      ]\r",
									"  }\r",
									"  \r",
									"  var subcategories_map = {\r",
									"      \"Admissions\": [\r",
									"          \"txe121e9-bba2-4bf6-a1a9-8e401e93f2b8\",\r",
									"          \"9xe121e9-bba2-4bf6-a1a9-8e401e93f2b5\",\r",
									"          \"txe121e9-bba2-4bf6-a1a9-8e401e93f210\",\r",
									"          \"11e121e9-bba2-4bf6-a1a9-8e401e93f2b5\",\r",
									"          \"txe121e9-bba2-4bf6-a1a9-8e401e93f212\",\r",
									"          \"rd12e9b1-394c-470d-b43e-aa577f6fce22\",\r",
									"          \"rd12e9b1-394c-470d-b43e-aa577f6fce23\",\r",
									"          \"rd12e9b1-394c-470d-b43e-aa577f6fce24\",\r",
									"          \"07f3014e-4dc9-4f9b-8c1a-5a66c03562a1\",\r",
									"          \"rd12e9b1-394c-470d-b43e-aa577f6fce25\"\r",
									"      ],\r",
									"      \"Inquiry\": [\r",
									"          \"txe121e9-bba2-4bf6-a1a9-8e401e93f2b5\",\r",
									"          \"45e121e9-bba2-4bf6-a1a9-8e401e93f2b2\",\r",
									"          \"3xe121e9-bba3-4bf6-a1a9-8e401e93f2be\",\r",
									"          \"dxe121e9-bba4-4bf6-a1a9-8e401e93f2bp\",\r",
									"          \"9621e600-7048-4c4b-8eae-942848bb5985\",\r",
									"          \"rxe121e9-bba2-4bf6-a1a9-8e401e93f2b5\"\r",
									"      ],\r",
									"      \"Referral\": [\r",
									"          \"rd12e9b1-394c-470d-b43e-aa577f6fce21\",\r",
									"          \"rd12e9b1-394c-480d-b03e-aa577f6fce21\",\r",
									"          \"rd12e9b1-394c-490d-b03e-aa577f6fce21\",\r",
									"          \"rd12e9b1-394c-470d-b13e-aa577f6fce21\",\r",
									"          \"rd12e9b1-394c-470d-b23e-aa577f6fce21\"\r",
									"      ],\r",
									"      \"Review\": [\r",
									"          \"kd12e9b1-394c-470d-b03e-aa577f6fce2w\",\r",
									"          \"md24e9b1-394c-470d-b03e-aa577f6fce2x\"\r",
									"      ],\r",
									"      \"Treatment Team\": [\r",
									"          \"bd12e9b1-384c-470d-b03e-aa577f6fce15\",\r",
									"          \"gd12e9b1-394c-470d-c23e-aa577f6fce19\",\r",
									"          \"7d12e9b1-364c-i70d-b03e-aa577f6fce1u\",\r",
									"          \"1412e9b1-394c-470d-b03e-aa577f6fce09\",\r",
									"          \"bd12e9b2-394c-470d-b13e-aa577f6fce17\",\r",
									"          \"cd12e9b1-394c-480d-b04e-aa577f6fce16\",\r",
									"          \"7d12e9b1-364c-i70d-b03e-aa578f6fce1u\",\r",
									"          \"qd12e9b1-494c-470d-b03e-aa578f6fce18\"\r",
									"      ]\r",
									"  }\r",
									"  const category_index = Math.floor(Math.random() * category_names.length);\r",
									"  category_id = category_ids[category_index];\r",
									"  \r",
									"  let category_name = category_names[category_index];\r",
									" \r",
									"  if (category_names[category_index] === \"Outreach\" || category_names[category_index] === \"Billing\") {\r",
									"      sub_category_id = \"\";\r",
									"  } else {\r",
									"      var subcategories_list = subcategories_map[category_names[category_index]];\r",
									"      subcategory_list_index = Math.floor(Math.random() * subcategories_list.length);\r",
									"      sub_category_id = subcategories_list[subcategory_list_index];\r",
									"  }\r",
									"  ///// end - get random category and its sub_category ////////////////////\r",
									"  \r",
									"  pm.environment.set(\"task_name\", \"From Postman task name \" + date_timestamp + \" Equip Health\");\r",
									"  pm.environment.set(\"task_description\", \"task description \" + date_timestamp + \" Equip Health\");\r",
									"  pm.environment.set(\"category_id\", category_id);\r",
									"  \r",
									"  pm.environment.set(\"category_name\", category_name);\r",
									"  \r",
									"  pm.environment.set(\"sub_category_id\", sub_category_id);\r",
									"  pm.environment.set(\"patient_id\", pm.environment.get(\"patientId\"));\r",
									"  pm.environment.set(\"task_assigned_userid\", pm.environment.get(\"providerId\"));\r",
									"  pm.environment.set(\"task_assigned_username\", pm.environment.get(\"providerFirstName\")+\" \"+pm.environment.get(\"providerLastName\"));\r",
									"  pm.environment.set(\"task_createdby_userid\", pm.environment.get(\"providerId\"));\r",
									"  pm.environment.set(\"task_createdby_username\", pm.environment.get(\"providerFirstName\")+\" \"+pm.environment.get(\"providerLastName\"));\r",
									"  \r",
									"  pm.environment.set(\"task_due_date\", task_due_date);\r",
									"  pm.environment.set(\"task_priority_id\", task_priority_ids[Math.floor(Math.random() * task_priority_ids.length)]);\r",
									"  pm.environment.set(\"task_status_id\", \"1\");\r",
									"  pm.environment.set(\"task_comment_1\", \"task_comment_1\");\r",
									"  pm.environment.set(\"repeat\", false);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "99ab352d-0435-47cc-9380-888717e978c3",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify taskExternalId is generated\", function () {\r",
									"    pm.expect(jsonData.taskExternalId).length.greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 4000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"taskExternalId\", jsonData.taskExternalId);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "cfbd324d-917c-44b0-b3fa-93faf0c2541b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"taskName\": \"{{task_name}}\",\n    \"taskDescription\": \"{{task_description}}\",\n    \"taskCategoryExternalId\": \"{{category_id}}\",\n    \"taskSubCategoryExternalId\": \"{{sub_category_id}}\",\n    \"taskAssignedUserId\": \"{{task_assigned_userid}}\",\n    \"taskAssignedUserName\": \"{{task_assigned_username}}\",\n    \"taskCreatedByUserId\":\"{{task_createdby_userid}}\",\n    \"taskCreatedByUserName\":\"{{task_createdby_username}}\",\n    \"patientId\":\"{{patientId}}\",\n    \"taskDueDate\": \"{{task_due_date}}\",\n    \"taskPriorityId\": \"{{task_priority_id}}\",\n    \"taskStatusId\": \"{{task_status_id}}\"\n}"
						},
						"url": {
							"raw": "{{host}}/tasks",
							"host": [
								"{{host}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Activity log1 - Create task",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "341376bd-12f8-4878-a809-6ce360c291e8",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify Activity log1: Create task\", function () {",
									"    pm.expect(jsonData[0].activityExternalId).length.greaterThan(0);",
									"",
									"    //log date",
									"    var d = new Date();",
									"    console.log(d);",
									"    d = d.toISOString().slice(0, 10);",
									"    d = d.split(\"T\")[0];",
									"    pm.expect(jsonData[0].updatedDate).contains(d);",
									"",
									"    //updatedByUserId",
									"    pm.expect(jsonData[0].updatedByUserId).to.eql(pm.variables.get(\"task_createdby_userid\"));",
									"",
									"    //updatedByUserName",
									"    pm.expect(jsonData[0].updatedByUserName).to.eql(pm.variables.get(\"task_createdby_username\"));",
									"",
									"    //taskName",
									"    pm.expect(jsonData[0].taskName).to.eql(pm.variables.get(\"task_name\"));",
									"",
									"    //categoryExternalId",
									"    pm.expect(jsonData[0].categoryExternalId).to.eql(pm.variables.get(\"category_id\"));",
									"",
									"    //categoryName",
									"    pm.expect(jsonData[0].categoryName).to.eql(pm.variables.get(\"category_name\"));",
									"",
									"    //subCategoryExternalId and subCategoryName",
									"    if (pm.variables.get(\"sub_category_name\") == \" \") {",
									"        pm.expect(jsonData[0].subCategoryExternalId).to.eql(pm.variables.get(\"sub_category_id\"));",
									"        pm.expect(jsonData[0].subCategoryName).to.eql(pm.variables.get(\"sub_category_name\"));",
									"    }",
									"",
									"    //priorityId",
									"    pm.expect(jsonData[0].priorityId).to.eql(pm.variables.get(\"task_priority_id\"));",
									"",
									"    //statusId",
									"    pm.expect(jsonData[0].statusId).to.eql(1);",
									"",
									"    //dueDate",
									"    var exp_duedate = pm.variables.get(\"task_due_date\");",
									"    exp_duedate = exp_duedate.replace(\" \", \"T\");",
									"    pm.expect(jsonData[0].dueDate).to.eql(exp_duedate);",
									"",
									"    //assigneeId",
									"    pm.expect(jsonData[0].assigneeId).to.eql(pm.variables.get(\"task_assigned_userid\"));",
									"",
									"    //assigneeName",
									"    pm.expect(jsonData[0].assigneeName).to.eql(pm.variables.get(\"task_assigned_username\"));",
									"",
									"    //patientId",
									"    pm.expect(jsonData[0].patientId).to.eql(pm.variables.get(\"patient_id\"));",
									"",
									"    //patientName",
									"    pm.expect(jsonData[0].patientName).to.eql(pm.environment.get(\"patientFirstName\") + \" \" + pm.environment.get(\"patientLastName\"));",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "58b7087d-415d-4b8b-bd86-17a0bc7ba5e3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/tasks/activity/{{taskExternalId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"tasks",
								"activity",
								"{{taskExternalId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Task title",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e7886b6b-c834-41fa-a352-455baf6f918e",
								"exec": [
									"",
									"",
									"pm.environment.set(\"task_updatedby_userid\", pm.environment.get(\"providerId2\"));",
									"pm.environment.set(\"task_updatedby_username\", pm.environment.get(\"providerFirstName2\")+\" \"+pm.environment.get(\"providerLastName2\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "591eb75b-2f3a-4bce-95f9-a8f0f544157b",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//console.log(pm.response.body.toString);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 4000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify updated task details\", function () {\r",
									"    pm.expect(jsonData.taskName).to.eql(pm.variables.get(\"task_name\") + \"_updated\");\r",
									"});\r",
									"\r",
									"pm.environment.set(\"task_name2\", jsonData.taskName);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "737d1300-9d2f-4565-b95d-506d7a81d1c8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"taskExternalId\": \"{{taskExternalId}}\",\n    \"taskName\": \"{{task_name}}_updated\",\n    \"taskDescription\": \"{{task_description}}\",\n    \"taskCategoryExternalId\": \"{{category_id}}\",\n    \"taskSubCategoryExternalId\": \"{{sub_category_id}}\",\n    \"taskAssignedUserId\": \"{{task_assigned_userid}}\",\n    \"taskAssignedUserName\": \"{{task_assigned_username}}\",\n    \"taskCreatedByUserId\":\"{{task_createdby_userid}}\",\n    \"taskUpdatedByUserId\":\"{{task_updatedby_userid}}\",\n    \"taskUpdatedByUserName\": \"{{task_updatedby_username}}\",\n    \"patientId\":\"{{patient_id}}\",\n    \"taskDueDate\": \"{{task_due_date}}\",\n    \"taskPriorityId\": \"{{task_priority_id}}\",\n    \"taskStatusId\": \"{{task_status_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/tasks",
							"host": [
								"{{host}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Activity log2 - update title",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "98122dc1-6a65-4239-848e-13b1664c3464",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify Activity log1: Create task\", function () {",
									"    pm.expect(jsonData[0].activityExternalId).length.greaterThan(0);",
									"",
									"    //log date",
									"    var d = new Date();",
									"    console.log(d);",
									"    d = d.toISOString().slice(0, 10);",
									"    d = d.split(\"T\")[0];",
									"    pm.expect(jsonData[0].updatedDate).contains(d);",
									"",
									"    //updatedByUserId",
									"    pm.expect(jsonData[0].updatedByUserId).to.eql(pm.variables.get(\"task_createdby_userid\"));",
									"",
									"    //updatedByUserName",
									"    pm.expect(jsonData[0].updatedByUserName).to.eql(pm.variables.get(\"task_createdby_username\"));",
									"",
									"    //taskName",
									"    pm.expect(jsonData[0].taskName).to.eql(pm.variables.get(\"task_name\"));",
									"",
									"    //categoryExternalId",
									"    pm.expect(jsonData[0].categoryExternalId).to.eql(pm.variables.get(\"category_id\"));",
									"",
									"    //categoryName",
									"    pm.expect(jsonData[0].categoryName).to.eql(pm.variables.get(\"category_name\"));",
									"",
									"    //subCategoryExternalId and subCategoryName",
									"    if (pm.variables.get(\"sub_category_name\") == \" \") {",
									"        pm.expect(jsonData[0].subCategoryExternalId).to.eql(pm.variables.get(\"sub_category_id\"));",
									"        pm.expect(jsonData[0].subCategoryName).to.eql(pm.variables.get(\"sub_category_name\"));",
									"    }",
									"",
									"    //priorityId",
									"    pm.expect(jsonData[0].priorityId).to.eql(pm.variables.get(\"task_priority_id\"));",
									"",
									"    //statusId",
									"    pm.expect(jsonData[0].statusId).to.eql(1);",
									"",
									"    //dueDate",
									"    var exp_duedate = pm.variables.get(\"task_due_date\");",
									"    exp_duedate = exp_duedate.replace(\" \", \"T\");",
									"    pm.expect(jsonData[0].dueDate).to.eql(exp_duedate);",
									"",
									"    //assigneeId",
									"    pm.expect(jsonData[0].assigneeId).to.eql(pm.variables.get(\"task_assigned_userid\"));",
									"",
									"    //assigneeName",
									"    pm.expect(jsonData[0].assigneeName).to.eql(pm.variables.get(\"task_assigned_username\"));",
									"",
									"    //patientId",
									"    pm.expect(jsonData[0].patientId).to.eql(pm.variables.get(\"patient_id\"));",
									"",
									"    //patientName",
									"    pm.expect(jsonData[0].patientName).to.eql(pm.variables.get(\"patientFirstName\") + \" \" + pm.variables.get(\"patientLastName\"));",
									"});",
									"",
									"pm.test(\"Verify Activity log2: Task title update\", function () {",
									"    pm.expect(jsonData[0].activityExternalId).length.greaterThan(0);",
									"",
									"    //log date",
									"    var d = new Date();",
									"    console.log(d);",
									"    d = d.toISOString().slice(0, 10);",
									"    d = d.split(\"T\")[0];",
									"    pm.expect(jsonData[1].updatedDate).contains(d);",
									"",
									"    //updatedByUserId",
									"    pm.expect(jsonData[1].updatedByUserId).to.eql(pm.variables.get(\"task_updatedby_userid\"));",
									"",
									"    //updatedByUserName",
									"    pm.expect(jsonData[1].updatedByUserName).to.eql(pm.variables.get(\"task_updatedby_username\"));",
									"",
									"    //taskName",
									"    pm.expect(jsonData[1].taskName).to.eql(pm.variables.get(\"task_name2\"));",
									"",
									"    //categoryExternalId",
									"    pm.expect(jsonData[1].categoryExternalId).to.eql(pm.variables.get(\"category_id\"));",
									"",
									"    //categoryName",
									"    pm.expect(jsonData[1].categoryName).to.eql(pm.variables.get(\"category_name\"));",
									"",
									"    //subCategoryExternalId and subCategoryName",
									"    if (pm.variables.get(\"sub_category_name\") == \" \") {",
									"        pm.expect(jsonData[1].subCategoryExternalId).to.eql(pm.variables.get(\"sub_category_id\"));",
									"        pm.expect(jsonData[1].subCategoryName).to.eql(pm.variables.get(\"sub_category_name\"));",
									"    }",
									"",
									"    //priorityId",
									"    pm.expect(jsonData[1].priorityId).to.eql(pm.variables.get(\"task_priority_id\"));",
									"",
									"    //statusId",
									"    pm.expect(jsonData[1].statusId).to.eql(1);",
									"",
									"    //dueDate",
									"    var exp_duedate = pm.variables.get(\"task_due_date\");",
									"    exp_duedate = exp_duedate.replace(\" \", \"T\");",
									"    pm.expect(jsonData[1].dueDate).to.eql(exp_duedate);",
									"",
									"    //assigneeId",
									"    pm.expect(jsonData[1].assigneeId).to.eql(pm.variables.get(\"task_assigned_userid\"));",
									"",
									"    //assigneeName",
									"    pm.expect(jsonData[1].assigneeName).to.eql(pm.variables.get(\"task_assigned_username\"));",
									"",
									"    //patientId",
									"    pm.expect(jsonData[1].patientId).to.eql(pm.variables.get(\"patient_id\"));",
									"",
									"    //patientName",
									"    pm.expect(jsonData[1].patientName).to.eql(pm.environment.get(\"patientFirstName\") + \" \" + pm.environment.get(\"patientLastName\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b0594ac7-2543-4e8a-aeab-1492d0ae2f08",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/tasks/activity/{{taskExternalId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"tasks",
								"activity",
								"{{taskExternalId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Task Duedate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"",
									"///// get random due date (today or future date) /////",
									"var start = new Date();",
									"var end = new Date(2023, 1, 1);",
									"var task_due_date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));",
									"var month = (task_due_date.getMonth() + 1) >= 10 ? task_due_date.getMonth() + 1 : \"0\" + (task_due_date.getMonth() + 1);",
									"console.log(\"month: \" + month);",
									"var day = (task_due_date.getDate() + 1) > 10 ? task_due_date.getDate() : \"0\" + task_due_date.getDate();",
									"var task_due_date = task_due_date.getFullYear() + '-' + month + '-' + day;",
									"task_due_date = task_due_date + \"T23:59:59.999Z\";",
									"///// end - get random due date (today or future date) /////",
									"",
									"pm.environment.set(\"task_due_date2\", task_due_date);"
								],
								"type": "text/javascript",
								"id": "4a638072-2a45-4772-9063-bedbf518f5eb"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//console.log(pm.response.body.toString);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 4000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"//pm.environment.set(\"task_due_date2\", jsonData.dueDate);"
								],
								"type": "text/javascript",
								"id": "8ace9f74-c4e6-475a-9ccd-a57c6f8b92c5"
							}
						}
					],
					"id": "ad04a907-596f-4205-ad84-c381701354be",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"taskExternalId\": \"{{taskExternalId}}\",\n    \"taskName\": \"{{task_name2}}\",\n    \"taskDescription\": \"{{task_description}}\",\n    \"taskCategoryExternalId\": \"{{category_id}}\",\n    \"taskSubCategoryExternalId\": \"{{sub_category_id}}\",\n    \"taskAssignedUserId\": \"{{task_assigned_userid}}\",\n    \"taskAssignedUserName\": \"{{task_assigned_username}}\",\n    \"taskCreatedByUserId\":\"{{task_createdby_userid}}\",\n    \"taskUpdatedByUserId\":\"{{task_updatedby_userid}}\",\n    \"taskUpdatedByUserName\": \"{{task_updatedby_username}}\",\n    \"patientId\":\"{{patient_id}}\",\n    \"taskDueDate\": \"{{task_due_date2}}\",\n    \"taskPriorityId\": \"{{task_priority_id}}\",\n    \"taskStatusId\": \"{{task_status_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/tasks",
							"host": [
								"{{host}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Activity log3 - update Duedate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4eefe70e-1815-4557-a897-b1beca4c81bf",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify Activity log1: Create task\", function () {",
									"    pm.expect(jsonData[0].activityExternalId).length.greaterThan(0);",
									"",
									"    //log date",
									"    var d = new Date();",
									"    console.log(d);",
									"    d = d.toISOString().slice(0, 10);",
									"    d = d.split(\"T\")[0];",
									"    pm.expect(jsonData[0].updatedDate).contains(d);",
									"",
									"    //updatedByUserId",
									"    pm.expect(jsonData[0].updatedByUserId).to.eql(pm.variables.get(\"task_createdby_userid\"));",
									"",
									"    //updatedByUserName",
									"    pm.expect(jsonData[0].updatedByUserName).to.eql(pm.variables.get(\"task_createdby_username\"));",
									"",
									"    //taskName",
									"    pm.expect(jsonData[0].taskName).to.eql(pm.variables.get(\"task_name\"));",
									"",
									"    //categoryExternalId",
									"    pm.expect(jsonData[0].categoryExternalId).to.eql(pm.variables.get(\"category_id\"));",
									"",
									"    //categoryName",
									"    pm.expect(jsonData[0].categoryName).to.eql(pm.variables.get(\"category_name\"));",
									"",
									"    //subCategoryExternalId and subCategoryName",
									"    if (pm.variables.get(\"sub_category_name\") == \" \") {",
									"        pm.expect(jsonData[0].subCategoryExternalId).to.eql(pm.variables.get(\"sub_category_id\"));",
									"        pm.expect(jsonData[0].subCategoryName).to.eql(pm.variables.get(\"sub_category_name\"));",
									"    }",
									"",
									"    //priorityId",
									"    pm.expect(jsonData[0].priorityId).to.eql(pm.variables.get(\"task_priority_id\"));",
									"",
									"    //statusId",
									"    pm.expect(jsonData[0].statusId).to.eql(1);",
									"",
									"    //dueDate",
									"    var exp_duedate = pm.variables.get(\"task_due_date\");",
									"    exp_duedate = exp_duedate.replace(\" \", \"T\");",
									"    pm.expect(jsonData[0].dueDate).to.eql(exp_duedate);",
									"",
									"    //assigneeId",
									"    pm.expect(jsonData[0].assigneeId).to.eql(pm.variables.get(\"task_assigned_userid\"));",
									"",
									"    //assigneeName",
									"    pm.expect(jsonData[0].assigneeName).to.eql(pm.variables.get(\"task_assigned_username\"));",
									"",
									"    //patientId",
									"    pm.expect(jsonData[0].patientId).to.eql(pm.variables.get(\"patient_id\"));",
									"",
									"    //patientName",
									"    pm.expect(jsonData[0].patientName).to.eql(pm.variables.get(\"patientFirstName\") + \" \" + pm.variables.get(\"patientLastName\"));",
									"});",
									"",
									"pm.test(\"Verify Activity log2: Task title update\", function () {",
									"    pm.expect(jsonData[0].activityExternalId).length.greaterThan(0);",
									"",
									"    //log date",
									"    var d = new Date();",
									"    console.log(d);",
									"    d = d.toISOString().slice(0, 10);",
									"    d = d.split(\"T\")[0];",
									"    pm.expect(jsonData[1].updatedDate).contains(d);",
									"",
									"    //updatedByUserId",
									"    pm.expect(jsonData[1].updatedByUserId).to.eql(pm.variables.get(\"task_updatedby_userid\"));",
									"",
									"    //updatedByUserName",
									"    pm.expect(jsonData[1].updatedByUserName).to.eql(pm.variables.get(\"task_updatedby_username\"));",
									"",
									"    //taskName",
									"    pm.expect(jsonData[1].taskName).to.eql(pm.variables.get(\"task_name2\"));",
									"",
									"    //categoryExternalId",
									"    pm.expect(jsonData[1].categoryExternalId).to.eql(pm.variables.get(\"category_id\"));",
									"",
									"    //categoryName",
									"    pm.expect(jsonData[1].categoryName).to.eql(pm.variables.get(\"category_name\"));",
									"",
									"    //subCategoryExternalId and subCategoryName",
									"    if (pm.variables.get(\"sub_category_name\") == \" \") {",
									"        pm.expect(jsonData[1].subCategoryExternalId).to.eql(pm.variables.get(\"sub_category_id\"));",
									"        pm.expect(jsonData[1].subCategoryName).to.eql(pm.variables.get(\"sub_category_name\"));",
									"    }",
									"",
									"    //priorityId",
									"    pm.expect(jsonData[1].priorityId).to.eql(pm.variables.get(\"task_priority_id\"));",
									"",
									"    //statusId",
									"    pm.expect(jsonData[1].statusId).to.eql(1);",
									"",
									"    //dueDate",
									"    var exp_duedate = pm.variables.get(\"task_due_date\");",
									"    exp_duedate = exp_duedate.replace(\" \", \"T\");",
									"    pm.expect(jsonData[1].dueDate).to.eql(exp_duedate);",
									"",
									"    //assigneeId",
									"    pm.expect(jsonData[1].assigneeId).to.eql(pm.variables.get(\"task_assigned_userid\"));",
									"",
									"    //assigneeName",
									"    pm.expect(jsonData[1].assigneeName).to.eql(pm.variables.get(\"task_assigned_username\"));",
									"",
									"    //patientId",
									"    pm.expect(jsonData[1].patientId).to.eql(pm.variables.get(\"patient_id\"));",
									"",
									"    //patientName",
									"    pm.expect(jsonData[1].patientName).to.eql(pm.variables.get(\"patientFirstName\") + \" \" + pm.variables.get(\"patientLastName\"));",
									"});",
									"",
									"pm.test(\"Verify Activity log3: Task Duedate update\", function () {",
									"    pm.expect(jsonData[2].activityExternalId).length.greaterThan(0);",
									"",
									"    //log date",
									"    var d = new Date();",
									"    console.log(d);",
									"    d = d.toISOString().slice(0, 10);",
									"    d = d.split(\"T\")[0];",
									"    pm.expect(jsonData[2].updatedDate).contains(d);",
									"",
									"    //updatedByUserId",
									"    pm.expect(jsonData[2].updatedByUserId).to.eql(pm.variables.get(\"task_updatedby_userid\"));",
									"",
									"    //updatedByUserName",
									"    pm.expect(jsonData[2].updatedByUserName).to.eql(pm.variables.get(\"task_updatedby_username\"));",
									"",
									"    //taskName",
									"    pm.expect(jsonData[2].taskName).to.eql(pm.variables.get(\"task_name2\"));",
									"",
									"    //categoryExternalId",
									"    pm.expect(jsonData[2].categoryExternalId).to.eql(pm.variables.get(\"category_id\"));",
									"",
									"    //categoryName",
									"    pm.expect(jsonData[2].categoryName).to.eql(pm.variables.get(\"category_name\"));",
									"",
									"    //subCategoryExternalId and subCategoryName",
									"    if (pm.variables.get(\"sub_category_name\") == \" \") {",
									"        pm.expect(jsonData[2].subCategoryExternalId).to.eql(pm.variables.get(\"sub_category_id\"));",
									"        pm.expect(jsonData[2].subCategoryName).to.eql(pm.variables.get(\"sub_category_name\"));",
									"    }",
									"",
									"    //priorityId",
									"    pm.expect(jsonData[2].priorityId).to.eql(pm.variables.get(\"task_priority_id\"));",
									"",
									"    //statusId",
									"    pm.expect(jsonData[2].statusId).to.eql(1);",
									"",
									"    //dueDate",
									"    var exp_duedate = pm.variables.get(\"task_due_date2\");",
									"    exp_duedate = exp_duedate.replace(\" \", \"T\");",
									"    pm.expect(jsonData[2].dueDate).to.eql(exp_duedate);",
									"",
									"    //assigneeId",
									"    pm.expect(jsonData[2].assigneeId).to.eql(pm.variables.get(\"task_assigned_userid\"));",
									"",
									"    //assigneeName",
									"    pm.expect(jsonData[2].assigneeName).to.eql(pm.variables.get(\"task_assigned_username\"));",
									"",
									"    //patientId",
									"    pm.expect(jsonData[2].patientId).to.eql(pm.variables.get(\"patient_id\"));",
									"",
									"    //patientName",
									"    pm.expect(jsonData[2].patientName).to.eql(pm.environment.get(\"patientFirstName\") + \" \" + pm.environment.get(\"patientLastName\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "311207df-75bc-4afd-b3cc-34e627c473d8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/tasks/activity/{{taskExternalId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"tasks",
								"activity",
								"{{taskExternalId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Task priority",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"",
									"pm.environment.set(\"task_priority_id2\", 1);"
								],
								"type": "text/javascript",
								"id": "08edd5c7-274a-43b5-9fb9-89592b54ff6d"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//console.log(pm.response.body.toString);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 4000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"//pm.environment.set(\"task_due_date2\", jsonData.dueDate);"
								],
								"type": "text/javascript",
								"id": "c5fc2041-8afe-4f24-a798-1f3a77fcbd7e"
							}
						}
					],
					"id": "fec79fc8-5c45-45b4-82bd-8caa189b1eda",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"taskExternalId\": \"{{taskExternalId}}\",\n    \"taskName\": \"{{task_name2}}\",\n    \"taskDescription\": \"{{task_description}}\",\n    \"taskCategoryExternalId\": \"{{category_id}}\",\n    \"taskSubCategoryExternalId\": \"{{sub_category_id}}\",\n    \"taskAssignedUserId\": \"{{task_assigned_userid}}\",\n    \"taskAssignedUserName\": \"{{task_assigned_username}}\",\n    \"taskCreatedByUserId\":\"{{task_createdby_userid}}\",\n    \"taskUpdatedByUserId\":\"{{task_updatedby_userid}}\",\n    \"taskUpdatedByUserName\": \"{{task_updatedby_username}}\",\n    \"patientId\":\"{{patient_id}}\",\n    \"taskDueDate\": \"{{task_due_date2}}\",\n    \"taskPriorityId\": \"{{task_priority_id2}}\",\n    \"taskStatusId\": \"{{task_status_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/tasks",
							"host": [
								"{{host}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Activity log4 - update priority",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fdfd9ba2-5fc4-49f3-8765-021897ee81e3",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify Activity log1: Create task\", function () {",
									"    pm.expect(jsonData[0].activityExternalId).length.greaterThan(0);",
									"",
									"    //log date",
									"    var d = new Date();",
									"    console.log(d);",
									"    d = d.toISOString().slice(0, 10);",
									"    d = d.split(\"T\")[0];",
									"    pm.expect(jsonData[0].updatedDate).contains(d);",
									"",
									"    //updatedByUserId",
									"    pm.expect(jsonData[0].updatedByUserId).to.eql(pm.variables.get(\"task_createdby_userid\"));",
									"",
									"    //updatedByUserName",
									"    pm.expect(jsonData[0].updatedByUserName).to.eql(pm.variables.get(\"task_createdby_username\"));",
									"",
									"    //taskName",
									"    pm.expect(jsonData[0].taskName).to.eql(pm.variables.get(\"task_name\"));",
									"",
									"    //categoryExternalId",
									"    pm.expect(jsonData[0].categoryExternalId).to.eql(pm.variables.get(\"category_id\"));",
									"",
									"    //categoryName",
									"    pm.expect(jsonData[0].categoryName).to.eql(pm.variables.get(\"category_name\"));",
									"",
									"    //subCategoryExternalId and subCategoryName",
									"    if (pm.variables.get(\"sub_category_name\") == \" \") {",
									"        pm.expect(jsonData[0].subCategoryExternalId).to.eql(pm.variables.get(\"sub_category_id\"));",
									"        pm.expect(jsonData[0].subCategoryName).to.eql(pm.variables.get(\"sub_category_name\"));",
									"    }",
									"",
									"    //priorityId",
									"    pm.expect(jsonData[0].priorityId).to.eql(pm.variables.get(\"task_priority_id\"));",
									"",
									"    //statusId",
									"    pm.expect(jsonData[0].statusId).to.eql(1);",
									"",
									"    //dueDate",
									"    var exp_duedate = pm.variables.get(\"task_due_date\");",
									"    exp_duedate = exp_duedate.replace(\" \", \"T\");",
									"    pm.expect(jsonData[0].dueDate).to.eql(exp_duedate);",
									"",
									"    //assigneeId",
									"    pm.expect(jsonData[0].assigneeId).to.eql(pm.variables.get(\"task_assigned_userid\"));",
									"",
									"    //assigneeName",
									"    pm.expect(jsonData[0].assigneeName).to.eql(pm.variables.get(\"task_assigned_username\"));",
									"",
									"    //patientId",
									"    pm.expect(jsonData[0].patientId).to.eql(pm.variables.get(\"patient_id\"));",
									"",
									"    //patientName",
									"    pm.expect(jsonData[0].patientName).to.eql(pm.variables.get(\"patientFirstName\") + \" \" + pm.variables.get(\"patientLastName\"));",
									"});",
									"",
									"pm.test(\"Verify Activity log2: Task title update\", function () {",
									"    pm.expect(jsonData[0].activityExternalId).length.greaterThan(0);",
									"",
									"    //log date",
									"    var d = new Date();",
									"    console.log(d);",
									"    d = d.toISOString().slice(0, 10);",
									"    d = d.split(\"T\")[0];",
									"    pm.expect(jsonData[1].updatedDate).contains(d);",
									"",
									"    //updatedByUserId",
									"    pm.expect(jsonData[1].updatedByUserId).to.eql(pm.variables.get(\"task_updatedby_userid\"));",
									"",
									"    //updatedByUserName",
									"    pm.expect(jsonData[1].updatedByUserName).to.eql(pm.variables.get(\"task_updatedby_username\"));",
									"",
									"    //taskName",
									"    pm.expect(jsonData[1].taskName).to.eql(pm.variables.get(\"task_name2\"));",
									"",
									"    //categoryExternalId",
									"    pm.expect(jsonData[1].categoryExternalId).to.eql(pm.variables.get(\"category_id\"));",
									"",
									"    //categoryName",
									"    pm.expect(jsonData[1].categoryName).to.eql(pm.variables.get(\"category_name\"));",
									"",
									"    //subCategoryExternalId and subCategoryName",
									"    if (pm.variables.get(\"sub_category_name\") == \" \") {",
									"        pm.expect(jsonData[1].subCategoryExternalId).to.eql(pm.variables.get(\"sub_category_id\"));",
									"        pm.expect(jsonData[1].subCategoryName).to.eql(pm.variables.get(\"sub_category_name\"));",
									"    }",
									"",
									"    //priorityId",
									"    pm.expect(jsonData[1].priorityId).to.eql(pm.variables.get(\"task_priority_id\"));",
									"",
									"    //statusId",
									"    pm.expect(jsonData[1].statusId).to.eql(1);",
									"",
									"    //dueDate",
									"    var exp_duedate = pm.variables.get(\"task_due_date\");",
									"    exp_duedate = exp_duedate.replace(\" \", \"T\");",
									"    pm.expect(jsonData[1].dueDate).to.eql(exp_duedate);",
									"",
									"    //assigneeId",
									"    pm.expect(jsonData[1].assigneeId).to.eql(pm.variables.get(\"task_assigned_userid\"));",
									"",
									"    //assigneeName",
									"    pm.expect(jsonData[1].assigneeName).to.eql(pm.variables.get(\"task_assigned_username\"));",
									"",
									"    //patientId",
									"    pm.expect(jsonData[1].patientId).to.eql(pm.variables.get(\"patient_id\"));",
									"",
									"    //patientName",
									"    pm.expect(jsonData[1].patientName).to.eql(pm.variables.get(\"patientFirstName\") + \" \" + pm.variables.get(\"patientLastName\"));",
									"});",
									"",
									"pm.test(\"Verify Activity log3: Task Duedate update\", function () {",
									"    pm.expect(jsonData[2].activityExternalId).length.greaterThan(0);",
									"",
									"    //log date",
									"    var d = new Date();",
									"    console.log(d);",
									"    d = d.toISOString().slice(0, 10);",
									"    d = d.split(\"T\")[0];",
									"    pm.expect(jsonData[2].updatedDate).contains(d);",
									"",
									"    //updatedByUserId",
									"    pm.expect(jsonData[2].updatedByUserId).to.eql(pm.variables.get(\"task_updatedby_userid\"));",
									"",
									"    //updatedByUserName",
									"    pm.expect(jsonData[2].updatedByUserName).to.eql(pm.variables.get(\"task_updatedby_username\"));",
									"",
									"    //taskName",
									"    pm.expect(jsonData[2].taskName).to.eql(pm.variables.get(\"task_name2\"));",
									"",
									"    //categoryExternalId",
									"    pm.expect(jsonData[2].categoryExternalId).to.eql(pm.variables.get(\"category_id\"));",
									"",
									"    //categoryName",
									"    pm.expect(jsonData[2].categoryName).to.eql(pm.variables.get(\"category_name\"));",
									"",
									"    //subCategoryExternalId and subCategoryName",
									"    if (pm.variables.get(\"sub_category_name\") == \" \") {",
									"        pm.expect(jsonData[2].subCategoryExternalId).to.eql(pm.variables.get(\"sub_category_id\"));",
									"        pm.expect(jsonData[2].subCategoryName).to.eql(pm.variables.get(\"sub_category_name\"));",
									"    }",
									"",
									"    //priorityId",
									"    pm.expect(jsonData[2].priorityId).to.eql(pm.variables.get(\"task_priority_id\"));",
									"",
									"    //statusId",
									"    pm.expect(jsonData[2].statusId).to.eql(1);",
									"",
									"    //dueDate",
									"    var exp_duedate = pm.variables.get(\"task_due_date2\");",
									"    exp_duedate = exp_duedate.replace(\" \", \"T\");",
									"    pm.expect(jsonData[2].dueDate).to.eql(exp_duedate);",
									"",
									"    //assigneeId",
									"    pm.expect(jsonData[2].assigneeId).to.eql(pm.variables.get(\"task_assigned_userid\"));",
									"",
									"    //assigneeName",
									"    pm.expect(jsonData[2].assigneeName).to.eql(pm.variables.get(\"task_assigned_username\"));",
									"",
									"    //patientId",
									"    pm.expect(jsonData[2].patientId).to.eql(pm.variables.get(\"patient_id\"));",
									"",
									"    //patientName",
									"    pm.expect(jsonData[2].patientName).to.eql(pm.variables.get(\"patientFirstName\") + \" \" + pm.variables.get(\"patientLastName\"));",
									"});",
									"",
									"pm.test(\"Verify Activity log4: Task priority update\", function () {",
									"    pm.expect(jsonData[3].activityExternalId).length.greaterThan(0);",
									"",
									"    //log date",
									"    var d = new Date();",
									"    console.log(d);",
									"    d = d.toISOString().slice(0, 10);",
									"    d = d.split(\"T\")[0];",
									"    pm.expect(jsonData[3].updatedDate).contains(d);",
									"",
									"    //updatedByUserId",
									"    pm.expect(jsonData[3].updatedByUserId).to.eql(pm.variables.get(\"task_updatedby_userid\"));",
									"",
									"    //updatedByUserName",
									"    pm.expect(jsonData[3].updatedByUserName).to.eql(pm.variables.get(\"task_updatedby_username\"));",
									"",
									"    //taskName",
									"    pm.expect(jsonData[3].taskName).to.eql(pm.variables.get(\"task_name2\"));",
									"",
									"    //categoryExternalId",
									"    pm.expect(jsonData[3].categoryExternalId).to.eql(pm.variables.get(\"category_id\"));",
									"",
									"    //categoryName",
									"    pm.expect(jsonData[3].categoryName).to.eql(pm.variables.get(\"category_name\"));",
									"",
									"    //subCategoryExternalId and subCategoryName",
									"    if (pm.variables.get(\"sub_category_name\") == \" \") {",
									"        pm.expect(jsonData[3].subCategoryExternalId).to.eql(pm.variables.get(\"sub_category_id\"));",
									"        pm.expect(jsonData[3].subCategoryName).to.eql(pm.variables.get(\"sub_category_name\"));",
									"    }",
									"",
									"    //priorityId",
									"    pm.expect(jsonData[3].priorityId).to.eql(pm.variables.get(\"task_priority_id2\"));",
									"",
									"    //statusId",
									"    pm.expect(jsonData[3].statusId).to.eql(1);",
									"",
									"    //dueDate",
									"    var exp_duedate = pm.variables.get(\"task_due_date2\");",
									"    exp_duedate = exp_duedate.replace(\" \", \"T\");",
									"    pm.expect(jsonData[3].dueDate).to.eql(exp_duedate);",
									"",
									"    //assigneeId",
									"    pm.expect(jsonData[3].assigneeId).to.eql(pm.variables.get(\"task_assigned_userid\"));",
									"",
									"    //assigneeName",
									"    pm.expect(jsonData[3].assigneeName).to.eql(pm.variables.get(\"task_assigned_username\"));",
									"",
									"    //patientId",
									"    pm.expect(jsonData[3].patientId).to.eql(pm.variables.get(\"patient_id\"));",
									"",
									"    //patientName",
									"    pm.expect(jsonData[3].patientName).to.eql(pm.environment.get(\"patientFirstName\") + \" \" + pm.environment.get(\"patientLastName\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8df1cf38-6025-4199-99a0-1339784edcc7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/tasks/activity/{{taskExternalId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"tasks",
								"activity",
								"{{taskExternalId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Task Category and subcategory",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const category_names = [",
									"    \"Admissions\",",
									"    \"Billing\",",
									"    \"Inquiry\",",
									"    \"Outreach\",",
									"    \"Referral\",",
									"    \"Review\",",
									"    \"Treatment team\"",
									"];",
									"",
									"const category_ids = [",
									"    \"bd12e9b1-394c-470d-b03e-aa577f6fce65\",",
									"    \"yd16e9b1-394c-470d-b03e-aa577f6fce2z\",",
									"    \"35e121e9-bba2-4bf6-a1a9-8e401e93f2b8\",",
									"    \"td1259b1-394c-470d-b03e-aa577f6fce2y\",",
									"    \"rd12e9b1-394c-470d-b03e-aa577f6fce21\",",
									"    \"bd12e9b1-394c-470d-b03e-aa577f6fce22\",",
									"    \"bd12e9b1-394c-470d-b03e-aa577f6fce13\"",
									"];",
									"",
									"var subcategories_names_map = {",
									"    \"Admissions\": [",
									"        \"Assessment\",",
									"        \"Enroll\",",
									"        \"General\",",
									"        \"Insurance verification\",",
									"        \"Medical clearance\",",
									"        \"Medical records coordination\",",
									"        \"Onboard\",",
									"        \"Patient correspondence\",",
									"        \"Phone screen\",",
									"        \"Provider assignment\"",
									"    ],",
									"    \"Inquiry\": [",
									"        \"Correspondence\",",
									"        \"General\",",
									"        \"Inbound outreach\",",
									"        \"Initial outreach\",",
									"        \"Insurance verification\",",
									"        \"Phone screen\"",
									"    ],",
									"    \"Referral\": [",
									"        \"Correspondence\",",
									"        \"General\",",
									"        \"Inbound outreach\",",
									"        \"Initial outreach\",",
									"        \"Phone screen\"",
									"    ],",
									"    \"Review\": [",
									"        \"Consult\",",
									"        \"Supervise\"",
									"    ],",
									"    \"Treatment Team\": [",
									"        \"Assess\",",
									"        \"Care plan\",",
									"        \"Discharge\",",
									"        \"Follow-up\",",
									"        \"Order labs\",",
									"        \"Prescribe meds\",",
									"        \"Reminder\",",
									"        \"Schedule appointment\"",
									"    ]",
									"}",
									"",
									"var subcategories_map = {",
									"    \"Admissions\": [",
									"        \"txe121e9-bba2-4bf6-a1a9-8e401e93f2b8\",",
									"        \"9xe121e9-bba2-4bf6-a1a9-8e401e93f2b5\",",
									"        \"txe121e9-bba2-4bf6-a1a9-8e401e93f210\",",
									"        \"11e121e9-bba2-4bf6-a1a9-8e401e93f2b5\",",
									"        \"txe121e9-bba2-4bf6-a1a9-8e401e93f212\",",
									"        \"rd12e9b1-394c-470d-b43e-aa577f6fce22\",",
									"        \"rd12e9b1-394c-470d-b43e-aa577f6fce23\",",
									"        \"rd12e9b1-394c-470d-b43e-aa577f6fce24\",",
									"        \"07f3014e-4dc9-4f9b-8c1a-5a66c03562a1\",",
									"        \"rd12e9b1-394c-470d-b43e-aa577f6fce25\"",
									"    ],",
									"    \"Inquiry\": [",
									"        \"txe121e9-bba2-4bf6-a1a9-8e401e93f2b5\",",
									"        \"45e121e9-bba2-4bf6-a1a9-8e401e93f2b2\",",
									"        \"3xe121e9-bba3-4bf6-a1a9-8e401e93f2be\",",
									"        \"dxe121e9-bba4-4bf6-a1a9-8e401e93f2bp\",",
									"        \"9621e600-7048-4c4b-8eae-942848bb5985\",",
									"        \"rxe121e9-bba2-4bf6-a1a9-8e401e93f2b5\"",
									"    ],",
									"    \"Referral\": [",
									"        \"rd12e9b1-394c-470d-b43e-aa577f6fce21\",",
									"        \"rd12e9b1-394c-480d-b03e-aa577f6fce21\",",
									"        \"rd12e9b1-394c-490d-b03e-aa577f6fce21\",",
									"        \"rd12e9b1-394c-470d-b13e-aa577f6fce21\",",
									"        \"rd12e9b1-394c-470d-b23e-aa577f6fce21\"",
									"    ],",
									"    \"Review\": [",
									"        \"kd12e9b1-394c-470d-b03e-aa577f6fce2w\",",
									"        \"md24e9b1-394c-470d-b03e-aa577f6fce2x\"",
									"    ],",
									"    \"Treatment Team\": [",
									"        \"bd12e9b1-384c-470d-b03e-aa577f6fce15\",",
									"        \"gd12e9b1-394c-470d-c23e-aa577f6fce19\",",
									"        \"7d12e9b1-364c-i70d-b03e-aa577f6fce1u\",",
									"        \"1412e9b1-394c-470d-b03e-aa577f6fce09\",",
									"        \"bd12e9b2-394c-470d-b13e-aa577f6fce17\",",
									"        \"cd12e9b1-394c-480d-b04e-aa577f6fce16\",",
									"        \"7d12e9b1-364c-i70d-b03e-aa578f6fce1u\",",
									"        \"qd12e9b1-494c-470d-b03e-aa578f6fce18\"",
									"    ]",
									"}",
									"const category_index = Math.floor(Math.random() * category_names.length);",
									"category_id = category_ids[category_index];",
									"category_name = category_names[category_index];",
									"",
									"if (category_names[category_index] === \"Outreach\" || category_names[category_index] === \"Billing\") {",
									"    sub_category_id = \"\";",
									"    sub_category_name = \"\";",
									"} else {",
									"    var subcategories_list = subcategories_map[category_names[category_index]];",
									"    var subcategories_name_list = subcategories_names_map[category_names[category_index]];",
									"    subcategory_list_index = Math.floor(Math.random() * subcategories_list.length);",
									"    sub_category_id = subcategories_list[subcategory_list_index];",
									"    sub_category_name = subcategories_name_list[subcategory_list_index];",
									"}",
									"",
									"pm.environment.set(\"category_id2\", category_id);",
									"pm.environment.set(\"sub_category_id2\", sub_category_id);",
									"pm.environment.set(\"category_name2\", category_name);",
									"pm.environment.set(\"sub_category_name2\", sub_category_name);"
								],
								"type": "text/javascript",
								"id": "c02bdc76-2296-417b-9155-90958bec9ebb"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//console.log(pm.response.body.toString);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 4000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"//pm.environment.set(\"task_due_date2\", jsonData.dueDate);"
								],
								"type": "text/javascript",
								"id": "c048ceec-8c0a-4665-b5c9-d6735f1516cf"
							}
						}
					],
					"id": "7848f66a-c246-48c4-a53b-2b16236143b2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"taskExternalId\": \"{{taskExternalId}}\",\n    \"taskName\": \"{{task_name2}}\",\n    \"taskDescription\": \"{{task_description}}\",\n    \"taskCategoryExternalId\": \"{{category_id2}}\",\n    \"taskSubCategoryExternalId\": \"{{sub_category_id2}}\",\n    \"taskAssignedUserId\": \"{{task_assigned_userid}}\",\n    \"taskAssignedUserName\": \"{{task_assigned_username}}\",\n    \"taskCreatedByUserId\":\"{{task_createdby_userid}}\",\n    \"taskUpdatedByUserId\":\"{{task_updatedby_userid}}\",\n    \"taskUpdatedByUserName\": \"{{task_updatedby_username}}\",\n    \"patientId\":\"{{patient_id}}\",\n    \"taskDueDate\": \"{{task_due_date2}}\",\n    \"taskPriorityId\": \"{{task_priority_id2}}\",\n    \"taskStatusId\": \"{{task_status_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/tasks",
							"host": [
								"{{host}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Activity log5 - update Category and Subcategory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f39eb2a3-d241-4656-bfe4-bc227565fb71",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify Activity log1: Create task\", function () {",
									"    pm.expect(jsonData[0].activityExternalId).length.greaterThan(0);",
									"",
									"    //log date",
									"    var d = new Date();",
									"    console.log(d);",
									"    d = d.toISOString().slice(0, 10);",
									"    d = d.split(\"T\")[0];",
									"    pm.expect(jsonData[0].updatedDate).contains(d);",
									"",
									"    //updatedByUserId",
									"    pm.expect(jsonData[0].updatedByUserId).to.eql(pm.variables.get(\"task_createdby_userid\"));",
									"",
									"    //updatedByUserName",
									"    pm.expect(jsonData[0].updatedByUserName).to.eql(pm.variables.get(\"task_createdby_username\"));",
									"",
									"    //taskName",
									"    pm.expect(jsonData[0].taskName).to.eql(pm.variables.get(\"task_name\"));",
									"",
									"    //categoryExternalId",
									"    pm.expect(jsonData[0].categoryExternalId).to.eql(pm.variables.get(\"category_id\"));",
									"",
									"    //categoryName",
									"    pm.expect(jsonData[0].categoryName).to.eql(pm.variables.get(\"category_name\"));",
									"",
									"    //subCategoryExternalId and subCategoryName",
									"    if (pm.variables.get(\"sub_category_name\") == \" \") {",
									"        pm.expect(jsonData[0].subCategoryExternalId).to.eql(pm.variables.get(\"sub_category_id\"));",
									"        pm.expect(jsonData[0].subCategoryName).to.eql(pm.variables.get(\"sub_category_name\"));",
									"    }",
									"",
									"    //priorityId",
									"    pm.expect(jsonData[0].priorityId).to.eql(pm.variables.get(\"task_priority_id\"));",
									"",
									"    //statusId",
									"    pm.expect(jsonData[0].statusId).to.eql(1);",
									"",
									"    //dueDate",
									"    var exp_duedate = pm.variables.get(\"task_due_date\");",
									"    exp_duedate = exp_duedate.replace(\" \", \"T\");",
									"    pm.expect(jsonData[0].dueDate).to.eql(exp_duedate);",
									"",
									"    //assigneeId",
									"    pm.expect(jsonData[0].assigneeId).to.eql(pm.variables.get(\"task_assigned_userid\"));",
									"",
									"    //assigneeName",
									"    pm.expect(jsonData[0].assigneeName).to.eql(pm.variables.get(\"task_assigned_username\"));",
									"",
									"    //patientId",
									"    pm.expect(jsonData[0].patientId).to.eql(pm.variables.get(\"patient_id\"));",
									"",
									"    //patientName",
									"    pm.expect(jsonData[0].patientName).to.eql(pm.variables.get(\"patientFirstName\") + \" \" + pm.variables.get(\"patientLastName\"));",
									"});",
									"",
									"pm.test(\"Verify Activity log2: Task title update\", function () {",
									"    pm.expect(jsonData[0].activityExternalId).length.greaterThan(0);",
									"",
									"    //log date",
									"    var d = new Date();",
									"    console.log(d);",
									"    d = d.toISOString().slice(0, 10);",
									"    d = d.split(\"T\")[0];",
									"    pm.expect(jsonData[1].updatedDate).contains(d);",
									"",
									"    //updatedByUserId",
									"    pm.expect(jsonData[1].updatedByUserId).to.eql(pm.variables.get(\"task_updatedby_userid\"));",
									"",
									"    //updatedByUserName",
									"    pm.expect(jsonData[1].updatedByUserName).to.eql(pm.variables.get(\"task_updatedby_username\"));",
									"",
									"    //taskName",
									"    pm.expect(jsonData[1].taskName).to.eql(pm.variables.get(\"task_name2\"));",
									"",
									"    //categoryExternalId",
									"    pm.expect(jsonData[1].categoryExternalId).to.eql(pm.variables.get(\"category_id\"));",
									"",
									"    //categoryName",
									"    pm.expect(jsonData[1].categoryName).to.eql(pm.variables.get(\"category_name\"));",
									"",
									"    //subCategoryExternalId and subCategoryName",
									"    if (pm.variables.get(\"sub_category_name\") == \" \") {",
									"        pm.expect(jsonData[1].subCategoryExternalId).to.eql(pm.variables.get(\"sub_category_id\"));",
									"        pm.expect(jsonData[1].subCategoryName).to.eql(pm.variables.get(\"sub_category_name\"));",
									"    }",
									"",
									"    //priorityId",
									"    pm.expect(jsonData[1].priorityId).to.eql(pm.variables.get(\"task_priority_id\"));",
									"",
									"    //statusId",
									"    pm.expect(jsonData[1].statusId).to.eql(1);",
									"",
									"    //dueDate",
									"    var exp_duedate = pm.variables.get(\"task_due_date\");",
									"    exp_duedate = exp_duedate.replace(\" \", \"T\");",
									"    pm.expect(jsonData[1].dueDate).to.eql(exp_duedate);",
									"",
									"    //assigneeId",
									"    pm.expect(jsonData[1].assigneeId).to.eql(pm.variables.get(\"task_assigned_userid\"));",
									"",
									"    //assigneeName",
									"    pm.expect(jsonData[1].assigneeName).to.eql(pm.variables.get(\"task_assigned_username\"));",
									"",
									"    //patientId",
									"    pm.expect(jsonData[1].patientId).to.eql(pm.variables.get(\"patient_id\"));",
									"",
									"    //patientName",
									"    pm.expect(jsonData[1].patientName).to.eql(pm.variables.get(\"patientFirstName\") + \" \" + pm.variables.get(\"patientLastName\"));",
									"});",
									"",
									"pm.test(\"Verify Activity log3: Task Duedate update\", function () {",
									"    pm.expect(jsonData[2].activityExternalId).length.greaterThan(0);",
									"",
									"    //log date",
									"    var d = new Date();",
									"    console.log(d);",
									"    d = d.toISOString().slice(0, 10);",
									"    d = d.split(\"T\")[0];",
									"    pm.expect(jsonData[2].updatedDate).contains(d);",
									"",
									"    //updatedByUserId",
									"    pm.expect(jsonData[2].updatedByUserId).to.eql(pm.variables.get(\"task_updatedby_userid\"));",
									"",
									"    //updatedByUserName",
									"    pm.expect(jsonData[2].updatedByUserName).to.eql(pm.variables.get(\"task_updatedby_username\"));",
									"",
									"    //taskName",
									"    pm.expect(jsonData[2].taskName).to.eql(pm.variables.get(\"task_name2\"));",
									"",
									"    //categoryExternalId",
									"    pm.expect(jsonData[2].categoryExternalId).to.eql(pm.variables.get(\"category_id\"));",
									"",
									"    //categoryName",
									"    pm.expect(jsonData[2].categoryName).to.eql(pm.variables.get(\"category_name\"));",
									"",
									"    //subCategoryExternalId and subCategoryName",
									"    if (pm.variables.get(\"sub_category_name\") == \" \") {",
									"        pm.expect(jsonData[2].subCategoryExternalId).to.eql(pm.variables.get(\"sub_category_id\"));",
									"        pm.expect(jsonData[2].subCategoryName).to.eql(pm.variables.get(\"sub_category_name\"));",
									"    }",
									"",
									"    //priorityId",
									"    pm.expect(jsonData[2].priorityId).to.eql(pm.variables.get(\"task_priority_id\"));",
									"",
									"    //statusId",
									"    pm.expect(jsonData[2].statusId).to.eql(1);",
									"",
									"    //dueDate",
									"    var exp_duedate = pm.variables.get(\"task_due_date2\");",
									"    exp_duedate = exp_duedate.replace(\" \", \"T\");",
									"    pm.expect(jsonData[2].dueDate).to.eql(exp_duedate);",
									"",
									"    //assigneeId",
									"    pm.expect(jsonData[2].assigneeId).to.eql(pm.variables.get(\"task_assigned_userid\"));",
									"",
									"    //assigneeName",
									"    pm.expect(jsonData[2].assigneeName).to.eql(pm.variables.get(\"task_assigned_username\"));",
									"",
									"    //patientId",
									"    pm.expect(jsonData[2].patientId).to.eql(pm.variables.get(\"patient_id\"));",
									"",
									"    //patientName",
									"    pm.expect(jsonData[2].patientName).to.eql(pm.variables.get(\"patientFirstName\") + \" \" + pm.variables.get(\"patientLastName\"));",
									"});",
									"",
									"pm.test(\"Verify Activity log4: Task priority update\", function () {",
									"    pm.expect(jsonData[3].activityExternalId).length.greaterThan(0);",
									"",
									"    //log date",
									"    var d = new Date();",
									"    console.log(d);",
									"    d = d.toISOString().slice(0, 10);",
									"    d = d.split(\"T\")[0];",
									"    pm.expect(jsonData[3].updatedDate).contains(d);",
									"",
									"    //updatedByUserId",
									"    pm.expect(jsonData[3].updatedByUserId).to.eql(pm.variables.get(\"task_updatedby_userid\"));",
									"",
									"    //updatedByUserName",
									"    pm.expect(jsonData[3].updatedByUserName).to.eql(pm.variables.get(\"task_updatedby_username\"));",
									"",
									"    //taskName",
									"    pm.expect(jsonData[3].taskName).to.eql(pm.variables.get(\"task_name2\"));",
									"",
									"    //categoryExternalId",
									"    pm.expect(jsonData[3].categoryExternalId).to.eql(pm.variables.get(\"category_id\"));",
									"",
									"    //categoryName",
									"    pm.expect(jsonData[3].categoryName).to.eql(pm.variables.get(\"category_name\"));",
									"",
									"    //subCategoryExternalId and subCategoryName",
									"    if (pm.variables.get(\"sub_category_name\") == \" \") {",
									"        pm.expect(jsonData[3].subCategoryExternalId).to.eql(pm.variables.get(\"sub_category_id\"));",
									"        pm.expect(jsonData[3].subCategoryName).to.eql(pm.variables.get(\"sub_category_name\"));",
									"    }",
									"",
									"    //priorityId",
									"    pm.expect(jsonData[3].priorityId).to.eql(pm.variables.get(\"task_priority_id2\"));",
									"",
									"    //statusId",
									"    pm.expect(jsonData[3].statusId).to.eql(1);",
									"",
									"    //dueDate",
									"    var exp_duedate = pm.variables.get(\"task_due_date2\");",
									"    exp_duedate = exp_duedate.replace(\" \", \"T\");",
									"    pm.expect(jsonData[3].dueDate).to.eql(exp_duedate);",
									"",
									"    //assigneeId",
									"    pm.expect(jsonData[3].assigneeId).to.eql(pm.variables.get(\"task_assigned_userid\"));",
									"",
									"    //assigneeName",
									"    pm.expect(jsonData[3].assigneeName).to.eql(pm.variables.get(\"task_assigned_username\"));",
									"",
									"    //patientId",
									"    pm.expect(jsonData[3].patientId).to.eql(pm.variables.get(\"patient_id\"));",
									"",
									"    //patientName",
									"    pm.expect(jsonData[3].patientName).to.eql(pm.variables.get(\"patientFirstName\") + \" \" + pm.variables.get(\"patientLastName\"));",
									"});",
									"",
									"pm.test(\"Verify Activity log5: Task Category and Sub-category\", function () {",
									"    pm.expect(jsonData[4].activityExternalId).length.greaterThan(0);",
									"",
									"    //log date",
									"    var d = new Date();",
									"    console.log(d);",
									"    d = d.toISOString().slice(0, 10);",
									"    d = d.split(\"T\")[0];",
									"    pm.expect(jsonData[4].updatedDate).contains(d);",
									"",
									"    //updatedByUserId",
									"    pm.expect(jsonData[4].updatedByUserId).to.eql(pm.variables.get(\"task_updatedby_userid\"));",
									"",
									"    //updatedByUserName",
									"    pm.expect(jsonData[4].updatedByUserName).to.eql(pm.variables.get(\"task_updatedby_username\"));",
									"",
									"    //taskName",
									"    pm.expect(jsonData[4].taskName).to.eql(pm.variables.get(\"task_name2\"));",
									"",
									"    //categoryExternalId",
									"    pm.expect(jsonData[4].categoryExternalId).to.eql(pm.variables.get(\"category_id2\"));",
									"",
									"    //categoryName",
									"    pm.expect(jsonData[4].categoryName).to.eql(pm.variables.get(\"category_name2\"));",
									"",
									"    //subCategoryExternalId and subCategoryName",
									"    if (pm.variables.get(\"sub_category_name\") == \" \") {",
									"        pm.expect(jsonData[4].subCategoryExternalId).to.eql(pm.variables.get(\"sub_category_id2\"));",
									"        pm.expect(jsonData[4].subCategoryName).to.eql(pm.variables.get(\"sub_category_name2\"));",
									"    }",
									"",
									"    //priorityId",
									"    pm.expect(jsonData[4].priorityId).to.eql(pm.variables.get(\"task_priority_id2\"));",
									"",
									"    //statusId",
									"    pm.expect(jsonData[4].statusId).to.eql(1);",
									"",
									"    //dueDate",
									"    var exp_duedate = pm.variables.get(\"task_due_date2\");",
									"    exp_duedate = exp_duedate.replace(\" \", \"T\");",
									"    pm.expect(jsonData[4].dueDate).to.eql(exp_duedate);",
									"",
									"    //assigneeId",
									"    pm.expect(jsonData[4].assigneeId).to.eql(pm.variables.get(\"task_assigned_userid\"));",
									"",
									"    //assigneeName",
									"    pm.expect(jsonData[4].assigneeName).to.eql(pm.variables.get(\"task_assigned_username\"));",
									"",
									"    //patientId",
									"    pm.expect(jsonData[4].patientId).to.eql(pm.variables.get(\"patient_id\"));",
									"",
									"    //patientName",
									"    pm.expect(jsonData[4].patientName).to.eql(pm.environment.get(\"patientFirstName\") + \" \" + pm.environment.get(\"patientLastName\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "754ee68a-ec18-49b6-93f8-ebb71c1f6ed9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/tasks/activity/{{taskExternalId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"tasks",
								"activity",
								"{{taskExternalId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Task Assignee and Patient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "807862a6-41d8-49f9-b41b-d127379a300a",
								"exec": [
									"",
									"    pm.environment.set(\"task_assigned_userid2\", pm.environment.get(\"providerFirstName2\"));",
									"    pm.environment.set(\"task_assigned_username2\", pm.environment.get(\"providerFirstName2\")+\" \"+pm.environment.get(\"providerLastName2\"));",
									"    pm.environment.set(\"patient_id2\", pm.environment.get(\"patientId2\"));",
									"    pm.environment.set(\"patientFirstName2\", pm.environment.get(\"patientFirstName2\"));",
									"    pm.environment.set(\"patientChosenName2\", pm.environment.get(\"chosenName2\"))",
									"    pm.environment.set(\"patientLastName2\", pm.environment.get(\"patientLastName2\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c97f92c6-3dec-4bc8-8b6b-09ab471c5f0b",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//console.log(pm.response.body.toString);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 4000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"//pm.environment.set(\"task_due_date2\", jsonData.dueDate);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7cd5738a-d8e9-4e7a-861b-5c131b4ef3a7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"taskExternalId\": \"{{taskExternalId}}\",\n    \"taskName\": \"{{task_name2}}\",\n    \"taskDescription\": \"{{task_description}}\",\n    \"taskCategoryExternalId\": \"{{category_id2}}\",\n    \"taskSubCategoryExternalId\": \"{{sub_category_id2}}\",\n    \"taskAssignedUserId\": \"{{task_assigned_userid2}}\",\n    \"taskAssignedUserName\": \"{{task_assigned_username2}}\",\n    \"taskUpdatedByUserId\":\"{{task_updatedby_userid}}\",\n    \"taskUpdatedByUserName\": \"{{task_updatedby_username}}\",\n    \"patientId\":\"{{patient_id2}}\",\n    \"taskDueDate\": \"{{task_due_date2}}\",\n    \"taskPriorityId\": \"{{task_priority_id2}}\",\n    \"taskStatusId\": \"{{task_status_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/tasks",
							"host": [
								"{{host}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Activity log6 - update Assignee and Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fe7ba1ee-50a9-4bb9-91d7-9cddbea8a5e6",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify Activity log1: Create task\", function () {",
									"    pm.expect(jsonData[0].activityExternalId).length.greaterThan(0);",
									"",
									"    //log date",
									"    var d = new Date();",
									"    console.log(d);",
									"    d = d.toISOString().slice(0, 10);",
									"    d = d.split(\"T\")[0];",
									"    pm.expect(jsonData[0].updatedDate).contains(d);",
									"",
									"    //updatedByUserId",
									"    pm.expect(jsonData[0].updatedByUserId).to.eql(pm.variables.get(\"task_createdby_userid\"));",
									"",
									"    //updatedByUserName",
									"    pm.expect(jsonData[0].updatedByUserName).to.eql(pm.variables.get(\"task_createdby_username\"));",
									"",
									"    //taskName",
									"    pm.expect(jsonData[0].taskName).to.eql(pm.variables.get(\"task_name\"));",
									"",
									"    //categoryExternalId",
									"    pm.expect(jsonData[0].categoryExternalId).to.eql(pm.variables.get(\"category_id\"));",
									"",
									"    //categoryName",
									"    pm.expect(jsonData[0].categoryName).to.eql(pm.variables.get(\"category_name\"));",
									"",
									"    //subCategoryExternalId and subCategoryName",
									"    if (pm.variables.get(\"sub_category_name\") == \" \") {",
									"        pm.expect(jsonData[0].subCategoryExternalId).to.eql(pm.variables.get(\"sub_category_id\"));",
									"        pm.expect(jsonData[0].subCategoryName).to.eql(pm.variables.get(\"sub_category_name\"));",
									"    }",
									"",
									"    //priorityId",
									"    pm.expect(jsonData[0].priorityId).to.eql(pm.variables.get(\"task_priority_id\"));",
									"",
									"    //statusId",
									"    pm.expect(jsonData[0].statusId).to.eql(1);",
									"",
									"    //dueDate",
									"    var exp_duedate = pm.variables.get(\"task_due_date\");",
									"    exp_duedate = exp_duedate.replace(\" \", \"T\");",
									"    pm.expect(jsonData[0].dueDate).to.eql(exp_duedate);",
									"",
									"    //assigneeId",
									"    pm.expect(jsonData[0].assigneeId).to.eql(pm.variables.get(\"task_assigned_userid\"));",
									"",
									"    //assigneeName",
									"    pm.expect(jsonData[0].assigneeName).to.eql(pm.variables.get(\"task_assigned_username\"));",
									"",
									"    //patientId",
									"    pm.expect(jsonData[0].patientId).to.eql(pm.variables.get(\"patient_id\"));",
									"",
									"    //patientName",
									"    pm.expect(jsonData[0].patientName).to.eql(pm.variables.get(\"patientFirstName\") + \" \" + pm.variables.get(\"patientLastName\"));",
									"});",
									"",
									"pm.test(\"Verify Activity log2: Task title update\", function () {",
									"    pm.expect(jsonData[0].activityExternalId).length.greaterThan(0);",
									"",
									"    //log date",
									"    var d = new Date();",
									"    console.log(d);",
									"    d = d.toISOString().slice(0, 10);",
									"    d = d.split(\"T\")[0];",
									"    pm.expect(jsonData[1].updatedDate).contains(d);",
									"",
									"    //updatedByUserId",
									"    pm.expect(jsonData[1].updatedByUserId).to.eql(pm.variables.get(\"task_updatedby_userid\"));",
									"",
									"    //updatedByUserName",
									"    pm.expect(jsonData[1].updatedByUserName).to.eql(pm.variables.get(\"task_updatedby_username\"));",
									"",
									"    //taskName",
									"    pm.expect(jsonData[1].taskName).to.eql(pm.variables.get(\"task_name2\"));",
									"",
									"    //categoryExternalId",
									"    pm.expect(jsonData[1].categoryExternalId).to.eql(pm.variables.get(\"category_id\"));",
									"",
									"    //categoryName",
									"    pm.expect(jsonData[1].categoryName).to.eql(pm.variables.get(\"category_name\"));",
									"",
									"    //subCategoryExternalId and subCategoryName",
									"    if (pm.variables.get(\"sub_category_name\") == \" \") {",
									"        pm.expect(jsonData[1].subCategoryExternalId).to.eql(pm.variables.get(\"sub_category_id\"));",
									"        pm.expect(jsonData[1].subCategoryName).to.eql(pm.variables.get(\"sub_category_name\"));",
									"    }",
									"",
									"    //priorityId",
									"    pm.expect(jsonData[1].priorityId).to.eql(pm.variables.get(\"task_priority_id\"));",
									"",
									"    //statusId",
									"    pm.expect(jsonData[1].statusId).to.eql(1);",
									"",
									"    //dueDate",
									"    var exp_duedate = pm.variables.get(\"task_due_date\");",
									"    exp_duedate = exp_duedate.replace(\" \", \"T\");",
									"    pm.expect(jsonData[1].dueDate).to.eql(exp_duedate);",
									"",
									"    //assigneeId",
									"    pm.expect(jsonData[1].assigneeId).to.eql(pm.variables.get(\"task_assigned_userid\"));",
									"",
									"    //assigneeName",
									"    pm.expect(jsonData[1].assigneeName).to.eql(pm.variables.get(\"task_assigned_username\"));",
									"",
									"    //patientId",
									"    pm.expect(jsonData[1].patientId).to.eql(pm.variables.get(\"patient_id\"));",
									"",
									"    //patientName",
									"    pm.expect(jsonData[1].patientName).to.eql(pm.variables.get(\"patientFirstName\") + \" \" + pm.variables.get(\"patientLastName\"));",
									"});",
									"",
									"pm.test(\"Verify Activity log3: Task Duedate update\", function () {",
									"    pm.expect(jsonData[2].activityExternalId).length.greaterThan(0);",
									"",
									"    //log date",
									"    var d = new Date();",
									"    console.log(d);",
									"    d = d.toISOString().slice(0, 10);",
									"    d = d.split(\"T\")[0];",
									"    pm.expect(jsonData[2].updatedDate).contains(d);",
									"",
									"    //updatedByUserId",
									"    pm.expect(jsonData[2].updatedByUserId).to.eql(pm.variables.get(\"task_updatedby_userid\"));",
									"",
									"    //updatedByUserName",
									"    pm.expect(jsonData[2].updatedByUserName).to.eql(pm.variables.get(\"task_updatedby_username\"));",
									"",
									"    //taskName",
									"    pm.expect(jsonData[2].taskName).to.eql(pm.variables.get(\"task_name2\"));",
									"",
									"    //categoryExternalId",
									"    pm.expect(jsonData[2].categoryExternalId).to.eql(pm.variables.get(\"category_id\"));",
									"",
									"    //categoryName",
									"    pm.expect(jsonData[2].categoryName).to.eql(pm.variables.get(\"category_name\"));",
									"",
									"    //subCategoryExternalId and subCategoryName",
									"    if (pm.variables.get(\"sub_category_name\") == \" \") {",
									"        pm.expect(jsonData[2].subCategoryExternalId).to.eql(pm.variables.get(\"sub_category_id\"));",
									"        pm.expect(jsonData[2].subCategoryName).to.eql(pm.variables.get(\"sub_category_name\"));",
									"    }",
									"",
									"    //priorityId",
									"    pm.expect(jsonData[2].priorityId).to.eql(pm.variables.get(\"task_priority_id\"));",
									"",
									"    //statusId",
									"    pm.expect(jsonData[2].statusId).to.eql(1);",
									"",
									"    //dueDate",
									"    var exp_duedate = pm.variables.get(\"task_due_date2\");",
									"    exp_duedate = exp_duedate.replace(\" \", \"T\");",
									"    pm.expect(jsonData[2].dueDate).to.eql(exp_duedate);",
									"",
									"    //assigneeId",
									"    pm.expect(jsonData[2].assigneeId).to.eql(pm.variables.get(\"task_assigned_userid\"));",
									"",
									"    //assigneeName",
									"    pm.expect(jsonData[2].assigneeName).to.eql(pm.variables.get(\"task_assigned_username\"));",
									"",
									"    //patientId",
									"    pm.expect(jsonData[2].patientId).to.eql(pm.variables.get(\"patient_id\"));",
									"",
									"    //patientName",
									"    pm.expect(jsonData[2].patientName).to.eql(pm.variables.get(\"patientFirstName\") + \" \" + pm.variables.get(\"patientLastName\"));",
									"});",
									"",
									"pm.test(\"Verify Activity log4: Task priority update\", function () {",
									"    pm.expect(jsonData[3].activityExternalId).length.greaterThan(0);",
									"",
									"    //log date",
									"    var d = new Date();",
									"    console.log(d);",
									"    d = d.toISOString().slice(0, 10);",
									"    d = d.split(\"T\")[0];",
									"    pm.expect(jsonData[3].updatedDate).contains(d);",
									"",
									"    //updatedByUserId",
									"    pm.expect(jsonData[3].updatedByUserId).to.eql(pm.variables.get(\"task_updatedby_userid\"));",
									"",
									"    //updatedByUserName",
									"    pm.expect(jsonData[3].updatedByUserName).to.eql(pm.variables.get(\"task_updatedby_username\"));",
									"",
									"    //taskName",
									"    pm.expect(jsonData[3].taskName).to.eql(pm.variables.get(\"task_name2\"));",
									"",
									"    //categoryExternalId",
									"    pm.expect(jsonData[3].categoryExternalId).to.eql(pm.variables.get(\"category_id\"));",
									"",
									"    //categoryName",
									"    pm.expect(jsonData[3].categoryName).to.eql(pm.variables.get(\"category_name\"));",
									"",
									"    //subCategoryExternalId and subCategoryName",
									"    if (pm.variables.get(\"sub_category_name\") == \" \") {",
									"        pm.expect(jsonData[3].subCategoryExternalId).to.eql(pm.variables.get(\"sub_category_id\"));",
									"        pm.expect(jsonData[3].subCategoryName).to.eql(pm.variables.get(\"sub_category_name\"));",
									"    }",
									"",
									"    //priorityId",
									"    pm.expect(jsonData[3].priorityId).to.eql(pm.variables.get(\"task_priority_id2\"));",
									"",
									"    //statusId",
									"    pm.expect(jsonData[3].statusId).to.eql(1);",
									"",
									"    //dueDate",
									"    var exp_duedate = pm.variables.get(\"task_due_date2\");",
									"    exp_duedate = exp_duedate.replace(\" \", \"T\");",
									"    pm.expect(jsonData[3].dueDate).to.eql(exp_duedate);",
									"",
									"    //assigneeId",
									"    pm.expect(jsonData[3].assigneeId).to.eql(pm.variables.get(\"task_assigned_userid\"));",
									"",
									"    //assigneeName",
									"    pm.expect(jsonData[3].assigneeName).to.eql(pm.variables.get(\"task_assigned_username\"));",
									"",
									"    //patientId",
									"    pm.expect(jsonData[3].patientId).to.eql(pm.variables.get(\"patient_id\"));",
									"",
									"    //patientName",
									"    pm.expect(jsonData[3].patientName).to.eql(pm.variables.get(\"patientFirstName\") + \" \" + pm.variables.get(\"patientLastName\"));",
									"});",
									"",
									"pm.test(\"Verify Activity log5: Task Category and Sub-category\", function () {",
									"    pm.expect(jsonData[4].activityExternalId).length.greaterThan(0);",
									"",
									"    //log date",
									"    var d = new Date();",
									"    console.log(d);",
									"    d = d.toISOString().slice(0, 10);",
									"    d = d.split(\"T\")[0];",
									"    pm.expect(jsonData[4].updatedDate).contains(d);",
									"",
									"    //updatedByUserId",
									"    pm.expect(jsonData[4].updatedByUserId).to.eql(pm.variables.get(\"task_updatedby_userid\"));",
									"",
									"    //updatedByUserName",
									"    pm.expect(jsonData[4].updatedByUserName).to.eql(pm.variables.get(\"task_updatedby_username\"));",
									"",
									"    //taskName",
									"    pm.expect(jsonData[4].taskName).to.eql(pm.variables.get(\"task_name2\"));",
									"",
									"    //categoryExternalId",
									"    pm.expect(jsonData[4].categoryExternalId).to.eql(pm.variables.get(\"category_id2\"));",
									"",
									"    //categoryName",
									"    pm.expect(jsonData[4].categoryName).to.eql(pm.variables.get(\"category_name2\"));",
									"",
									"    //subCategoryExternalId and subCategoryName",
									"    if (pm.variables.get(\"sub_category_name\") == \" \") {",
									"        pm.expect(jsonData[4].subCategoryExternalId).to.eql(pm.variables.get(\"sub_category_id2\"));",
									"        pm.expect(jsonData[4].subCategoryName).to.eql(pm.variables.get(\"sub_category_name2\"));",
									"    }",
									"",
									"    //priorityId",
									"    pm.expect(jsonData[4].priorityId).to.eql(pm.variables.get(\"task_priority_id2\"));",
									"",
									"    //statusId",
									"    pm.expect(jsonData[4].statusId).to.eql(1);",
									"",
									"    //dueDate",
									"    var exp_duedate = pm.variables.get(\"task_due_date2\");",
									"    exp_duedate = exp_duedate.replace(\" \", \"T\");",
									"    pm.expect(jsonData[4].dueDate).to.eql(exp_duedate);",
									"",
									"    //assigneeId",
									"    pm.expect(jsonData[4].assigneeId).to.eql(pm.variables.get(\"task_assigned_userid\"));",
									"",
									"    //assigneeName",
									"    pm.expect(jsonData[4].assigneeName).to.eql(pm.variables.get(\"task_assigned_username\"));",
									"",
									"    //patientId",
									"    pm.expect(jsonData[4].patientId).to.eql(pm.variables.get(\"patient_id\"));",
									"",
									"    //patientName",
									"    pm.expect(jsonData[4].patientName).to.eql(pm.variables.get(\"patientFirstName\") + \" \" + pm.variables.get(\"patientLastName\"));",
									"});",
									"",
									"pm.test(\"Verify Activity log5: Task Assignee and patient\", function () {",
									"    pm.expect(jsonData[5].activityExternalId).length.greaterThan(0);",
									"",
									"    //log date",
									"    var d = new Date();",
									"    console.log(d);",
									"    d = d.toISOString().slice(0, 10);",
									"    d = d.split(\"T\")[0];",
									"    pm.expect(jsonData[5].updatedDate).contains(d);",
									"",
									"    //updatedByUserId",
									"    pm.expect(jsonData[5].updatedByUserId).to.eql(pm.variables.get(\"task_updatedby_userid\"));",
									"",
									"    //updatedByUserName",
									"    pm.expect(jsonData[5].updatedByUserName).to.eql(pm.variables.get(\"task_updatedby_username\"));",
									"",
									"    //taskName",
									"    pm.expect(jsonData[5].taskName).to.eql(pm.variables.get(\"task_name2\"));",
									"",
									"    //categoryExternalId",
									"    pm.expect(jsonData[5].categoryExternalId).to.eql(pm.variables.get(\"category_id2\"));",
									"",
									"    //categoryName",
									"    pm.expect(jsonData[5].categoryName).to.eql(pm.variables.get(\"category_name2\"));",
									"",
									"    //subCategoryExternalId and subCategoryName",
									"    if (pm.variables.get(\"sub_category_name\") == \" \") {",
									"        pm.expect(jsonData[5].subCategoryExternalId).to.eql(pm.variables.get(\"sub_category_id2\"));",
									"        pm.expect(jsonData[5].subCategoryName).to.eql(pm.variables.get(\"sub_category_name2\"));",
									"    }",
									"",
									"    //priorityId",
									"    pm.expect(jsonData[5].priorityId).to.eql(pm.variables.get(\"task_priority_id2\"));",
									"",
									"    //statusId",
									"    pm.expect(jsonData[5].statusId).to.eql(1);",
									"",
									"    //dueDate",
									"    var exp_duedate = pm.variables.get(\"task_due_date2\");",
									"    exp_duedate = exp_duedate.replace(\" \", \"T\");",
									"    pm.expect(jsonData[5].dueDate).to.eql(exp_duedate);",
									"",
									"    //assigneeId",
									"    pm.expect(jsonData[5].assigneeId).to.eql(pm.variables.get(\"task_assigned_userid2\"));",
									"",
									"    //patientId",
									"    pm.expect(jsonData[5].patientId).to.eql(pm.variables.get(\"patient_id2\"));",
									"",
									"    //patientName",
									"    pm.expect(jsonData[5].patientName).to.eql(pm.environment.get(\"patientFirstName2\") + \" \" + pm.environment.get(\"patientLastName2\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ba8141a7-0d7a-4ac1-a637-f620df5dd7ae",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/tasks/activity/{{taskExternalId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"tasks",
								"activity",
								"{{taskExternalId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Task No assignee and patient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"",
									"pm.environment.set(\"task_assigned_userid3\", \"Unassigned\");",
									"pm.environment.set(\"patient_id3\", \"No linked to patient\");"
								],
								"type": "text/javascript",
								"id": "3382cd5f-8633-47f3-a821-1762116b9916"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//console.log(pm.response.body.toString);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 4000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"//pm.environment.set(\"task_due_date2\", jsonData.dueDate);"
								],
								"type": "text/javascript",
								"id": "f85e798f-48a1-4f01-8af0-58e5546b9957"
							}
						}
					],
					"id": "86109c29-efde-4a27-90d5-105dfdaa378e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"taskExternalId\": \"{{taskExternalId}}\",\n    \"taskName\": \"{{task_name2}}\",\n    \"taskDescription\": \"{{task_description}}\",\n    \"taskCategoryExternalId\": \"{{category_id2}}\",\n    \"taskSubCategoryExternalId\": \"{{sub_category_id2}}\",\n    \"taskUpdatedByUserId\":\"{{task_updatedby_userid}}\",\n    \"taskUpdatedByUserName\": \"{{task_updatedby_username}}\",\n    \"taskDueDate\": \"{{task_due_date2}}\",\n    \"taskPriorityId\": \"{{task_priority_id2}}\",\n    \"taskStatusId\": \"{{task_status_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/tasks",
							"host": [
								"{{host}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Activity log6 - Unassignee and No linked to patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dd41a1c8-3f9b-4c13-b429-0182579603e1",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify Activity log1: Create task\", function () {",
									"    pm.expect(jsonData[0].activityExternalId).length.greaterThan(0);",
									"",
									"    //log date",
									"    var d = new Date();",
									"    console.log(d);",
									"    d = d.toISOString().slice(0, 10);",
									"    d = d.split(\"T\")[0];",
									"    pm.expect(jsonData[0].updatedDate).contains(d);",
									"",
									"    //updatedByUserId",
									"    pm.expect(jsonData[0].updatedByUserId).to.eql(pm.variables.get(\"task_createdby_userid\"));",
									"",
									"    //updatedByUserName",
									"    pm.expect(jsonData[0].updatedByUserName).to.eql(pm.variables.get(\"task_createdby_username\"));",
									"",
									"    //taskName",
									"    pm.expect(jsonData[0].taskName).to.eql(pm.variables.get(\"task_name\"));",
									"",
									"    //categoryExternalId",
									"    pm.expect(jsonData[0].categoryExternalId).to.eql(pm.variables.get(\"category_id\"));",
									"",
									"    //categoryName",
									"    pm.expect(jsonData[0].categoryName).to.eql(pm.variables.get(\"category_name\"));",
									"",
									"    //subCategoryExternalId and subCategoryName",
									"    if (pm.variables.get(\"sub_category_name\") == \" \") {",
									"        pm.expect(jsonData[0].subCategoryExternalId).to.eql(pm.variables.get(\"sub_category_id\"));",
									"        pm.expect(jsonData[0].subCategoryName).to.eql(pm.variables.get(\"sub_category_name\"));",
									"    }",
									"",
									"    //priorityId",
									"    pm.expect(jsonData[0].priorityId).to.eql(pm.variables.get(\"task_priority_id\"));",
									"",
									"    //statusId",
									"    pm.expect(jsonData[0].statusId).to.eql(1);",
									"",
									"    //dueDate",
									"    var exp_duedate = pm.variables.get(\"task_due_date\");",
									"    exp_duedate = exp_duedate.replace(\" \", \"T\");",
									"    pm.expect(jsonData[0].dueDate).to.eql(exp_duedate);",
									"",
									"    //assigneeId",
									"    pm.expect(jsonData[0].assigneeId).to.eql(pm.variables.get(\"task_assigned_userid\"));",
									"",
									"    //assigneeName",
									"    pm.expect(jsonData[0].assigneeName).to.eql(pm.variables.get(\"task_assigned_username\"));",
									"",
									"     //patientId",
									"    pm.expect(jsonData[0].patientId).to.eql(pm.variables.get(\"patient_id\"));",
									"",
									"    //patientName",
									"    pm.expect(jsonData[0].patientName).to.eql(pm.variables.get(\"patientFirstName\")+\" \"+pm.variables.get(\"patientLastName\"));",
									"});",
									"",
									"pm.test(\"Verify Activity log2: Task title update\", function () {",
									"    pm.expect(jsonData[0].activityExternalId).length.greaterThan(0);",
									"",
									"    //log date",
									"    var d = new Date();",
									"    console.log(d);",
									"    d = d.toISOString().slice(0, 10);",
									"    d = d.split(\"T\")[0];",
									"    pm.expect(jsonData[1].updatedDate).contains(d);",
									"",
									"    //updatedByUserId",
									"    pm.expect(jsonData[1].updatedByUserId).to.eql(pm.variables.get(\"task_updatedby_userid\"));",
									"",
									"    //updatedByUserName",
									"    pm.expect(jsonData[1].updatedByUserName).to.eql(pm.variables.get(\"task_updatedby_username\"));",
									"",
									"    //taskName",
									"    pm.expect(jsonData[1].taskName).to.eql(pm.variables.get(\"task_name2\"));",
									"",
									"    //categoryExternalId",
									"    pm.expect(jsonData[1].categoryExternalId).to.eql(pm.variables.get(\"category_id\"));",
									"",
									"    //categoryName",
									"    pm.expect(jsonData[1].categoryName).to.eql(pm.variables.get(\"category_name\"));",
									"",
									"    //subCategoryExternalId and subCategoryName",
									"    if (pm.variables.get(\"sub_category_name\") == \" \") {",
									"        pm.expect(jsonData[1].subCategoryExternalId).to.eql(pm.variables.get(\"sub_category_id\"));",
									"        pm.expect(jsonData[1].subCategoryName).to.eql(pm.variables.get(\"sub_category_name\"));",
									"    }",
									"",
									"    //priorityId",
									"    pm.expect(jsonData[1].priorityId).to.eql(pm.variables.get(\"task_priority_id\"));",
									"",
									"    //statusId",
									"    pm.expect(jsonData[1].statusId).to.eql(1);",
									"",
									"    //dueDate",
									"    var exp_duedate = pm.variables.get(\"task_due_date\");",
									"    exp_duedate = exp_duedate.replace(\" \", \"T\");",
									"    pm.expect(jsonData[1].dueDate).to.eql(exp_duedate);",
									"",
									"    //assigneeId",
									"    pm.expect(jsonData[1].assigneeId).to.eql(pm.variables.get(\"task_assigned_userid\"));",
									"",
									"    //assigneeName",
									"    pm.expect(jsonData[1].assigneeName).to.eql(pm.variables.get(\"task_assigned_username\"));",
									"",
									"     //patientId",
									"    pm.expect(jsonData[1].patientId).to.eql(pm.variables.get(\"patient_id\"));",
									"",
									"    //patientName",
									"    pm.expect(jsonData[1].patientName).to.eql(pm.variables.get(\"patientFirstName\")+\" \"+pm.variables.get(\"patientLastName\"));",
									"});",
									"",
									"pm.test(\"Verify Activity log3: Task Duedate update\", function () {",
									"    pm.expect(jsonData[2].activityExternalId).length.greaterThan(0);",
									"",
									"    //log date",
									"    var d = new Date();",
									"    console.log(d);",
									"    d = d.toISOString().slice(0, 10);",
									"    d = d.split(\"T\")[0];",
									"    pm.expect(jsonData[2].updatedDate).contains(d);",
									"",
									"    //updatedByUserId",
									"    pm.expect(jsonData[2].updatedByUserId).to.eql(pm.variables.get(\"task_updatedby_userid\"));",
									"",
									"    //updatedByUserName",
									"    pm.expect(jsonData[2].updatedByUserName).to.eql(pm.variables.get(\"task_updatedby_username\"));",
									"",
									"    //taskName",
									"    pm.expect(jsonData[2].taskName).to.eql(pm.variables.get(\"task_name2\"));",
									"",
									"    //categoryExternalId",
									"    pm.expect(jsonData[2].categoryExternalId).to.eql(pm.variables.get(\"category_id\"));",
									"",
									"    //categoryName",
									"    pm.expect(jsonData[2].categoryName).to.eql(pm.variables.get(\"category_name\"));",
									"",
									"    //subCategoryExternalId and subCategoryName",
									"    if (pm.variables.get(\"sub_category_name\") == \" \") {",
									"        pm.expect(jsonData[2].subCategoryExternalId).to.eql(pm.variables.get(\"sub_category_id\"));",
									"        pm.expect(jsonData[2].subCategoryName).to.eql(pm.variables.get(\"sub_category_name\"));",
									"    }",
									"",
									"    //priorityId",
									"    pm.expect(jsonData[2].priorityId).to.eql(pm.variables.get(\"task_priority_id\"));",
									"",
									"    //statusId",
									"    pm.expect(jsonData[2].statusId).to.eql(1);",
									"",
									"    //dueDate",
									"    var exp_duedate = pm.variables.get(\"task_due_date2\");",
									"    exp_duedate = exp_duedate.replace(\" \", \"T\");",
									"    pm.expect(jsonData[2].dueDate).to.eql(exp_duedate);",
									"",
									"    //assigneeId",
									"    pm.expect(jsonData[2].assigneeId).to.eql(pm.variables.get(\"task_assigned_userid\"));",
									"",
									"    //assigneeName",
									"    pm.expect(jsonData[2].assigneeName).to.eql(pm.variables.get(\"task_assigned_username\"));",
									"",
									"     //patientId",
									"    pm.expect(jsonData[2].patientId).to.eql(pm.variables.get(\"patient_id\"));",
									"",
									"    //patientName",
									"    pm.expect(jsonData[2].patientName).to.eql(pm.variables.get(\"patientFirstName\")+\" \"+pm.variables.get(\"patientLastName\"));",
									"});",
									"",
									"pm.test(\"Verify Activity log4: Task priority update\", function () {",
									"    pm.expect(jsonData[3].activityExternalId).length.greaterThan(0);",
									"",
									"    //log date",
									"    var d = new Date();",
									"    console.log(d);",
									"    d = d.toISOString().slice(0, 10);",
									"    d = d.split(\"T\")[0];",
									"    pm.expect(jsonData[3].updatedDate).contains(d);",
									"",
									"    //updatedByUserId",
									"    pm.expect(jsonData[3].updatedByUserId).to.eql(pm.variables.get(\"task_updatedby_userid\"));",
									"",
									"    //updatedByUserName",
									"    pm.expect(jsonData[3].updatedByUserName).to.eql(pm.variables.get(\"task_updatedby_username\"));",
									"",
									"    //taskName",
									"    pm.expect(jsonData[3].taskName).to.eql(pm.variables.get(\"task_name2\"));",
									"",
									"    //categoryExternalId",
									"    pm.expect(jsonData[3].categoryExternalId).to.eql(pm.variables.get(\"category_id\"));",
									"",
									"    //categoryName",
									"    pm.expect(jsonData[3].categoryName).to.eql(pm.variables.get(\"category_name\"));",
									"",
									"    //subCategoryExternalId and subCategoryName",
									"    if (pm.variables.get(\"sub_category_name\") == \" \") {",
									"        pm.expect(jsonData[3].subCategoryExternalId).to.eql(pm.variables.get(\"sub_category_id\"));",
									"        pm.expect(jsonData[3].subCategoryName).to.eql(pm.variables.get(\"sub_category_name\"));",
									"    }",
									"",
									"    //priorityId",
									"    pm.expect(jsonData[3].priorityId).to.eql(pm.variables.get(\"task_priority_id2\"));",
									"",
									"    //statusId",
									"    pm.expect(jsonData[3].statusId).to.eql(1);",
									"",
									"    //dueDate",
									"    var exp_duedate = pm.variables.get(\"task_due_date2\");",
									"    exp_duedate = exp_duedate.replace(\" \", \"T\");",
									"    pm.expect(jsonData[3].dueDate).to.eql(exp_duedate);",
									"",
									"    //assigneeId",
									"    pm.expect(jsonData[3].assigneeId).to.eql(pm.variables.get(\"task_assigned_userid\"));",
									"",
									"    //assigneeName",
									"    pm.expect(jsonData[3].assigneeName).to.eql(pm.variables.get(\"task_assigned_username\"));",
									"",
									"     //patientId",
									"    pm.expect(jsonData[3].patientId).to.eql(pm.variables.get(\"patient_id\"));",
									"",
									"    //patientName",
									"    pm.expect(jsonData[3].patientName).to.eql(pm.variables.get(\"patientFirstName\")+\" \"+pm.variables.get(\"patientLastName\"));",
									"});",
									"",
									"pm.test(\"Verify Activity log5: Task Category and Sub-category\", function () {",
									"    pm.expect(jsonData[4].activityExternalId).length.greaterThan(0);",
									"",
									"    //log date",
									"    var d = new Date();",
									"    console.log(d);",
									"    d = d.toISOString().slice(0, 10);",
									"    d = d.split(\"T\")[0];",
									"    pm.expect(jsonData[4].updatedDate).contains(d);",
									"",
									"    //updatedByUserId",
									"    pm.expect(jsonData[4].updatedByUserId).to.eql(pm.variables.get(\"task_updatedby_userid\"));",
									"",
									"    //updatedByUserName",
									"    pm.expect(jsonData[4].updatedByUserName).to.eql(pm.variables.get(\"task_updatedby_username\"));",
									"",
									"    //taskName",
									"    pm.expect(jsonData[4].taskName).to.eql(pm.variables.get(\"task_name2\"));",
									"",
									"    //categoryExternalId",
									"    pm.expect(jsonData[4].categoryExternalId).to.eql(pm.variables.get(\"category_id2\"));",
									"",
									"    //categoryName",
									"    pm.expect(jsonData[4].categoryName).to.eql(pm.variables.get(\"category_name2\"));",
									"",
									"    //subCategoryExternalId and subCategoryName",
									"    if (pm.variables.get(\"sub_category_name\") == \" \") {",
									"        pm.expect(jsonData[4].subCategoryExternalId).to.eql(pm.variables.get(\"sub_category_id2\"));",
									"        pm.expect(jsonData[4].subCategoryName).to.eql(pm.variables.get(\"sub_category_name2\"));",
									"    }",
									"",
									"    //priorityId",
									"    pm.expect(jsonData[4].priorityId).to.eql(pm.variables.get(\"task_priority_id2\"));",
									"",
									"    //statusId",
									"    pm.expect(jsonData[4].statusId).to.eql(1);",
									"",
									"    //dueDate",
									"    var exp_duedate = pm.variables.get(\"task_due_date2\");",
									"    exp_duedate = exp_duedate.replace(\" \", \"T\");",
									"    pm.expect(jsonData[4].dueDate).to.eql(exp_duedate);",
									"",
									"    //assigneeId",
									"    pm.expect(jsonData[4].assigneeId).to.eql(pm.variables.get(\"task_assigned_userid\"));",
									"",
									"    //assigneeName",
									"    pm.expect(jsonData[4].assigneeName).to.eql(pm.variables.get(\"task_assigned_username\"));",
									"",
									"     //patientId",
									"    pm.expect(jsonData[4].patientId).to.eql(pm.variables.get(\"patient_id\"));",
									"",
									"    //patientName",
									"    pm.expect(jsonData[4].patientName).to.eql(pm.variables.get(\"patientFirstName\")+\" \"+pm.variables.get(\"patientLastName\"));",
									"});",
									"",
									"pm.test(\"Verify Activity log6: Task Assignee and patient\", function () {",
									"    pm.expect(jsonData[5].activityExternalId).length.greaterThan(0);",
									"",
									"    //log date",
									"    var d = new Date();",
									"    console.log(d);",
									"    d = d.toISOString().slice(0, 10);",
									"    d = d.split(\"T\")[0];",
									"    pm.expect(jsonData[5].updatedDate).contains(d);",
									"",
									"    //updatedByUserId",
									"    pm.expect(jsonData[5].updatedByUserId).to.eql(pm.variables.get(\"task_updatedby_userid\"));",
									"",
									"    //updatedByUserName",
									"    pm.expect(jsonData[5].updatedByUserName).to.eql(pm.variables.get(\"task_updatedby_username\"));",
									"",
									"    //taskName",
									"    pm.expect(jsonData[5].taskName).to.eql(pm.variables.get(\"task_name2\"));",
									"",
									"    //categoryExternalId",
									"    pm.expect(jsonData[5].categoryExternalId).to.eql(pm.variables.get(\"category_id2\"));",
									"",
									"    //categoryName",
									"    pm.expect(jsonData[5].categoryName).to.eql(pm.variables.get(\"category_name2\"));",
									"",
									"    //subCategoryExternalId and subCategoryName",
									"    if (pm.variables.get(\"sub_category_name\") == \" \") {",
									"        pm.expect(jsonData[5].subCategoryExternalId).to.eql(pm.variables.get(\"sub_category_id2\"));",
									"        pm.expect(jsonData[5].subCategoryName).to.eql(pm.variables.get(\"sub_category_name2\"));",
									"    }",
									"",
									"    //priorityId",
									"    pm.expect(jsonData[5].priorityId).to.eql(pm.variables.get(\"task_priority_id2\"));",
									"",
									"    //statusId",
									"    pm.expect(jsonData[5].statusId).to.eql(1);",
									"",
									"    //dueDate",
									"    var exp_duedate = pm.variables.get(\"task_due_date2\");",
									"    exp_duedate = exp_duedate.replace(\" \", \"T\");",
									"    pm.expect(jsonData[5].dueDate).to.eql(exp_duedate);",
									"",
									"    //assigneeId",
									"    pm.expect(jsonData[5].assigneeId).to.eql(pm.variables.get(\"task_assigned_userid2\"));",
									"",
									"    //patientId",
									"    pm.expect(jsonData[5].patientId).to.eql(pm.variables.get(\"patient_id2\"));",
									"",
									"    //patientName",
									"    pm.expect(jsonData[5].patientName).to.eql(pm.environment.get(\"patientFirstName2\") + \" \" + pm.environment.get(\"patientLastName2\"));",
									"});",
									"",
									"pm.test(\"Verify Activity log7: Task Assignee and patient\", function () {",
									"    pm.expect(jsonData[6].activityExternalId).length.greaterThan(0);",
									"",
									"    //log date",
									"    var d = new Date();",
									"    console.log(d);",
									"    d = d.toISOString().slice(0, 10);",
									"    d = d.split(\"T\")[0];",
									"    pm.expect(jsonData[6].updatedDate).contains(d);",
									"",
									"    //updatedByUserId",
									"    pm.expect(jsonData[6].updatedByUserId).to.eql(pm.variables.get(\"task_updatedby_userid\"));",
									"",
									"    //updatedByUserName",
									"    pm.expect(jsonData[6].updatedByUserName).to.eql(pm.variables.get(\"task_updatedby_username\"));",
									"",
									"    //taskName",
									"    pm.expect(jsonData[6].taskName).to.eql(pm.variables.get(\"task_name2\"));",
									"",
									"    //categoryExternalId",
									"    pm.expect(jsonData[6].categoryExternalId).to.eql(pm.variables.get(\"category_id2\"));",
									"",
									"    //categoryName",
									"    pm.expect(jsonData[6].categoryName).to.eql(pm.variables.get(\"category_name2\"));",
									"",
									"    //subCategoryExternalId and subCategoryName",
									"    if (pm.variables.get(\"sub_category_name\") == \" \") {",
									"        pm.expect(jsonData[6].subCategoryExternalId).to.eql(pm.variables.get(\"sub_category_id2\"));",
									"        pm.expect(jsonData[6].subCategoryName).to.eql(pm.variables.get(\"sub_category_name2\"));",
									"    }",
									"",
									"    //priorityId",
									"    pm.expect(jsonData[6].priorityId).to.eql(pm.variables.get(\"task_priority_id2\"));",
									"",
									"    //statusId",
									"    pm.expect(jsonData[6].statusId).to.eql(1);",
									"",
									"    //dueDate",
									"    var exp_duedate = pm.variables.get(\"task_due_date2\");",
									"    exp_duedate = exp_duedate.replace(\" \", \"T\");",
									"    pm.expect(jsonData[6].dueDate).to.eql(exp_duedate);",
									"",
									"    pm.expect(JSON.stringify(jsonData[6])).to.not.include(\"assigneeId\");",
									"    pm.expect(JSON.stringify(jsonData[6])).to.not.include(\"patientId\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "cf01e3dd-9e6b-4299-b1a7-a86c1b700d03",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/tasks/activity/{{taskExternalId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"tasks",
								"activity",
								"{{taskExternalId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Patient - add chosen name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4ab356db-f0e8-457e-9914-eb4b95d305ef",
								"exec": [
									"let ld = require('lodash');",
									"let gendersList = [",
									"    \"Cis-gender male\",",
									"    \"Cis-gender female\",",
									"    \"Non-binary\",",
									"    \"Other\",",
									"    \"Unknown\",",
									"    \"Transgender male\",",
									"    \"Transgender female\"",
									"];",
									"",
									"let pronounsList = [",
									"    \"He/Him/His\",",
									"    \"She/Her/Hers\",",
									"    \"They/Them/Theirs\",",
									"    \"Other\"",
									"];",
									"",
									"let ethnicitiesList = [",
									"    \"Asian\",",
									"    \"Black/African American\",",
									"    \"White/Caucasian\",",
									"    \"Hispanic/Latinx\",",
									"    \"Native American, Indian American, or Alaska Native\",",
									"    \"Native Hawaiian or other Pacific Islander\",",
									"    \"Middle Eastern or North African\",",
									"    \"Prefer not to answer\",",
									"    \"Other\"",
									"];",
									"",
									"let languagesList = [",
									"    \"English\",",
									"    \"Spanish\",",
									"    \"Chinese\",",
									"    \"French\",",
									"    \"Tagalog\",",
									"    \"Vietnamese\",",
									"    \"Korean\",",
									"    \"German\",",
									"    \"Russian\",",
									"    \"Italian\",",
									"    \"Portuguese\",",
									"    \"Polish\",",
									"    \"Japanese\",",
									"    \"Persian\",",
									"    \"Greek\",",
									"    \"Serbo-Croatian\",",
									"    \"Armenian\",",
									"    \"Yiddish\",",
									"    \"American Sign Language (ASL)\"",
									"];",
									"",
									"let sexList = [",
									"    \"Male\",",
									"    \"Female\"",
									"];",
									"",
									"let timezonesList = [",
									"    \"Hawaii Standard Time\",",
									"    \"Hawaii-Aleutian Time\",",
									"    \"Alaska Time\",",
									"    \"Pacific Time\",",
									"    \"Arizona\",",
									"    \"Mountain Time\",",
									"    \"Central Time\",",
									"    \"Eastern Time\"",
									"];",
									"",
									"let contactPreferences = [\"Email\", \"No preference\", \"Phone\", \"Unknown\"];",
									"",
									"let statesList = [\"AL\", \"AK\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"DC\", \"FL\", \"GA\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"OH\", \"OK\", \"OR\", \"PA\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\"];",
									"",
									"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let lastName = pm.variables.replaceIn('{{$randomLastName}}');",
									"let chosenName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let email = pm.variables.replaceIn('{{$randomUserName}}') + \"@equip.health\";",
									"let phoneNumber = pm.variables.replaceIn('{{$randomPhoneNumber}}');",
									"let addressLine1 = pm.variables.replaceIn('{{$randomStreetAddress}}');",
									"let addressLine2 = \"addressLine2\";",
									"let city = pm.variables.replaceIn('{{$randomCity}}');",
									"//let country = pm.variables.replaceIn('{{$randomCountryCode}}');",
									"let zip = Math.floor(100000 + Math.random() * 900000);",
									"let latitude = pm.variables.replaceIn('{{$randomLatitude}}');",
									"let longitude = pm.variables.replaceIn('{{$randomLongitude}}');",
									"",
									"//Generate random Date of Birth in YYYY-MM-DD Format",
									"function randomDate(start, end) {",
									"    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));",
									"}",
									"let date = randomDate(new Date(1950, 00, 01), new Date());",
									"let dateOfBirth = date.getFullYear() + '-' + (\"0\" + (date.getMonth() + 1)).slice(-2) + '-' + (\"0\" + date.getDate()).slice(-2);",
									"",
									"//Save the variables to be used in next request for validation",
									"//pm.environment.set(\"patientFirstName\", firstName);",
									"//pm.environment.set(\"patientLastName\", lastName);",
									"//pm.environment.set(\"patientEmail\", email);",
									"pm.environment.set(\"patientPhoneNumber\", phoneNumber);",
									"pm.environment.set(\"patientChosenName\", chosenName);",
									"pm.environment.set(\"patientDateOfBirth\", dateOfBirth);",
									"pm.environment.set(\"patientAddressLine1\", addressLine1);",
									"pm.environment.set(\"patientAddressLine2\", addressLine2);",
									"pm.environment.set(\"patientCity\", city);",
									"pm.environment.set(\"patientState\", ld.sample(statesList));",
									"pm.environment.set(\"patientCountry\", \"US\");",
									"pm.environment.set(\"patientZip\", zip.toString());",
									"pm.environment.set(\"patientLatitude\", latitude);",
									"pm.environment.set(\"patientLongitude\", longitude);",
									"pm.environment.set(\"patientEthnicities\", JSON.stringify(ld.sampleSize(ethnicitiesList, 2)));",
									"pm.environment.set(\"patientLanguages\", JSON.stringify(ld.sampleSize(languagesList, 2)));",
									"pm.environment.set(\"patientGenderOnRecord\", ld.sample(gendersList));",
									"pm.environment.set(\"patientGenderOffRecord\", ld.sample(gendersList));",
									"pm.environment.set(\"patientPronounsOnRecord\", ld.sample(pronounsList));",
									"pm.environment.set(\"patientPronounsOffRecord\", ld.sample(pronounsList));",
									"pm.environment.set(\"patientSex\", ld.sample(sexList));",
									"pm.environment.set(\"patientTimezone\", ld.sample(timezonesList));",
									"pm.environment.set(\"patientContactPreferences\", JSON.stringify(ld.sampleSize(contactPreferences, 2)));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b086a82c-0e2b-406e-a605-3ed2f290f8de",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify id is generated\", function () {",
									"    pm.expect(jsonData.id).length.greaterThan(0);",
									"});",
									"",
									"pm.environment.set(\"patientId\", jsonData.id);",
									"// pm.sendRequest(\"Get Patient by ID\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "42884392-bf61-4902-9cfd-c3c903f39942",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{patientFirstName}}\",\n    \"lastName\": \"{{patientLastName}}\",\n    \"dateOfBirth\": \"{{patientDateOfBirth}}\",\n    \"email\": \"{{patientEmail}}\",\n    \"contactPreferences\": {{patientContactPreferences}},\n    \"ethnicities\": {{patientEthnicities}},\n    \"phoneNumber\": \"{{patientPhoneNumber}}\",\n    \"chosenName\": \"{{patientChosenName}}\",\n    \"languages\": {{patientLanguages}},\n    \"genderOnRecord\": \"{{patientGenderOnRecord}}\",\n    \"genderOffRecord\": \"{{patientGenderOffRecord}}\",\n    \"pronounsOnRecord\": \"{{patientPronounsOnRecord}}\",\n    \"pronounsOffRecord\": \"{{patientPronounsOffRecord}}\",\n    \"sex\": \"{{patientSex}}\",\n    \"timezone\": \"{{patientTimezone}}\",\n    \"latitude\": \"{{patientLatitude}}\",\n    \"longitude\": \"{{patientLongitude}}\",\n    \"addressLine1\": \"{{patientAddressLine1}}\",\n    \"addressLine2\": \"{{patientAddressLine2}}\",\n    \"city\": \"{{patientCity}}\",\n    \"country\": \"{{patientCountry}}\",\n    \"state\": \"{{patientState}}\",\n    \"zip\": \"{{patientZip}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/patients/{{patientId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients",
								"{{patientId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify chosen name in logs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cbf49825-85d7-4975-9c74-ded2743e2ae5",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify Activity log1: Create task\", function () {",
									"    pm.expect(jsonData[0].activityExternalId).length.greaterThan(0);",
									"",
									"    //log date",
									"    var d = new Date();",
									"    console.log(d);",
									"    d = d.toISOString().slice(0, 10);",
									"    d = d.split(\"T\")[0];",
									"    pm.expect(jsonData[0].updatedDate).contains(d);",
									"",
									"    //updatedByUserId",
									"    pm.expect(jsonData[0].updatedByUserId).to.eql(pm.variables.get(\"task_createdby_userid\"));",
									"",
									"    //updatedByUserName",
									"    pm.expect(jsonData[0].updatedByUserName).to.eql(pm.variables.get(\"task_createdby_username\"));",
									"",
									"    //taskName",
									"    pm.expect(jsonData[0].taskName).to.eql(pm.variables.get(\"task_name\"));",
									"",
									"    //categoryExternalId",
									"    pm.expect(jsonData[0].categoryExternalId).to.eql(pm.variables.get(\"category_id\"));",
									"",
									"    //categoryName",
									"    pm.expect(jsonData[0].categoryName).to.eql(pm.variables.get(\"category_name\"));",
									"",
									"    //subCategoryExternalId and subCategoryName",
									"    if (pm.variables.get(\"sub_category_name\") == \" \") {",
									"        pm.expect(jsonData[0].subCategoryExternalId).to.eql(pm.variables.get(\"sub_category_id\"));",
									"        pm.expect(jsonData[0].subCategoryName).to.eql(pm.variables.get(\"sub_category_name\"));",
									"    }",
									"",
									"    //priorityId",
									"    pm.expect(jsonData[0].priorityId).to.eql(pm.variables.get(\"task_priority_id\"));",
									"",
									"    //statusId",
									"    pm.expect(jsonData[0].statusId).to.eql(1);",
									"",
									"    //dueDate",
									"    var exp_duedate = pm.variables.get(\"task_due_date\");",
									"    exp_duedate = exp_duedate.replace(\" \", \"T\");",
									"    pm.expect(jsonData[0].dueDate).to.eql(exp_duedate);",
									"",
									"    //assigneeId",
									"    pm.expect(jsonData[0].assigneeId).to.eql(pm.variables.get(\"task_assigned_userid\"));",
									"",
									"    //assigneeName",
									"    pm.expect(jsonData[0].assigneeName).to.eql(pm.variables.get(\"task_assigned_username\"));",
									"",
									"    //patientId",
									"    pm.expect(jsonData[0].patientId).to.eql(pm.variables.get(\"patient_id\"));",
									"",
									"    //patientName",
									"    let expChoosenName = \"\\\"\"+pm.variables.get(\"patientChosenName\")+\"\\\"\";",
									"    let expPatientName = pm.variables.get(\"patientFirstName\")+\" \"+expChoosenName+\" \"+pm.variables.get(\"patientLastName\");",
									"    pm.expect(\"\\\"\"+jsonData[0].patientName+\"\\\"\").to.eql(\"\\\"\" + expPatientName + \"\\\"\");",
									"});",
									"",
									"pm.test(\"Verify Activity log2: Task title update\", function () {",
									"    pm.expect(jsonData[0].activityExternalId).length.greaterThan(0);",
									"",
									"    //log date",
									"    var d = new Date();",
									"    console.log(d);",
									"    d = d.toISOString().slice(0, 10);",
									"    d = d.split(\"T\")[0];",
									"    pm.expect(jsonData[1].updatedDate).contains(d);",
									"",
									"    //updatedByUserId",
									"    pm.expect(jsonData[1].updatedByUserId).to.eql(pm.variables.get(\"task_updatedby_userid\"));",
									"",
									"    //updatedByUserName",
									"    pm.expect(jsonData[1].updatedByUserName).to.eql(pm.variables.get(\"task_updatedby_username\"));",
									"",
									"    //taskName",
									"    pm.expect(jsonData[1].taskName).to.eql(pm.variables.get(\"task_name2\"));",
									"",
									"    //categoryExternalId",
									"    pm.expect(jsonData[1].categoryExternalId).to.eql(pm.variables.get(\"category_id\"));",
									"",
									"    //categoryName",
									"    pm.expect(jsonData[1].categoryName).to.eql(pm.variables.get(\"category_name\"));",
									"",
									"    //subCategoryExternalId and subCategoryName",
									"    if (pm.variables.get(\"sub_category_name\") == \" \") {",
									"        pm.expect(jsonData[1].subCategoryExternalId).to.eql(pm.variables.get(\"sub_category_id\"));",
									"        pm.expect(jsonData[1].subCategoryName).to.eql(pm.variables.get(\"sub_category_name\"));",
									"    }",
									"",
									"    //priorityId",
									"    pm.expect(jsonData[1].priorityId).to.eql(pm.variables.get(\"task_priority_id\"));",
									"",
									"    //statusId",
									"    pm.expect(jsonData[1].statusId).to.eql(1);",
									"",
									"    //dueDate",
									"    var exp_duedate = pm.variables.get(\"task_due_date\");",
									"    exp_duedate = exp_duedate.replace(\" \", \"T\");",
									"    pm.expect(jsonData[1].dueDate).to.eql(exp_duedate);",
									"",
									"    //assigneeId",
									"    pm.expect(jsonData[1].assigneeId).to.eql(pm.variables.get(\"task_assigned_userid\"));",
									"",
									"    //assigneeName",
									"    pm.expect(jsonData[1].assigneeName).to.eql(pm.variables.get(\"task_assigned_username\"));",
									"",
									"    //patientId",
									"    pm.expect(jsonData[1].patientId).to.eql(pm.variables.get(\"patient_id\"));",
									"",
									"    //patientName",
									"    let expChoosenName = \"\\\"\"+pm.variables.get(\"patientChosenName\")+\"\\\"\";",
									"    let expPatientName = pm.variables.get(\"patientFirstName\")+\" \"+expChoosenName+\" \"+pm.variables.get(\"patientLastName\");",
									"    pm.expect(\"\\\"\"+jsonData[1].patientName+\"\\\"\").to.eql(\"\\\"\" + expPatientName + \"\\\"\");",
									"});",
									"",
									"pm.test(\"Verify Activity log3: Task Duedate update\", function () {",
									"    pm.expect(jsonData[2].activityExternalId).length.greaterThan(0);",
									"",
									"    //log date",
									"    var d = new Date();",
									"    console.log(d);",
									"    d = d.toISOString().slice(0, 10);",
									"    d = d.split(\"T\")[0];",
									"    pm.expect(jsonData[2].updatedDate).contains(d);",
									"",
									"    //updatedByUserId",
									"    pm.expect(jsonData[2].updatedByUserId).to.eql(pm.variables.get(\"task_updatedby_userid\"));",
									"",
									"    //updatedByUserName",
									"    pm.expect(jsonData[2].updatedByUserName).to.eql(pm.variables.get(\"task_updatedby_username\"));",
									"",
									"    //taskName",
									"    pm.expect(jsonData[2].taskName).to.eql(pm.variables.get(\"task_name2\"));",
									"",
									"    //categoryExternalId",
									"    pm.expect(jsonData[2].categoryExternalId).to.eql(pm.variables.get(\"category_id\"));",
									"",
									"    //categoryName",
									"    pm.expect(jsonData[2].categoryName).to.eql(pm.variables.get(\"category_name\"));",
									"",
									"    //subCategoryExternalId and subCategoryName",
									"    if (pm.variables.get(\"sub_category_name\") == \" \") {",
									"        pm.expect(jsonData[2].subCategoryExternalId).to.eql(pm.variables.get(\"sub_category_id\"));",
									"        pm.expect(jsonData[2].subCategoryName).to.eql(pm.variables.get(\"sub_category_name\"));",
									"    }",
									"",
									"    //priorityId",
									"    pm.expect(jsonData[2].priorityId).to.eql(pm.variables.get(\"task_priority_id\"));",
									"",
									"    //statusId",
									"    pm.expect(jsonData[2].statusId).to.eql(1);",
									"",
									"    //dueDate",
									"    var exp_duedate = pm.variables.get(\"task_due_date2\");",
									"    exp_duedate = exp_duedate.replace(\" \", \"T\");",
									"    pm.expect(jsonData[2].dueDate).to.eql(exp_duedate);",
									"",
									"    //assigneeId",
									"    pm.expect(jsonData[2].assigneeId).to.eql(pm.variables.get(\"task_assigned_userid\"));",
									"",
									"    //assigneeName",
									"    pm.expect(jsonData[2].assigneeName).to.eql(pm.variables.get(\"task_assigned_username\"));",
									"",
									"    //patientId",
									"    pm.expect(jsonData[2].patientId).to.eql(pm.variables.get(\"patient_id\"));",
									"",
									"    //patientName",
									"    let expChoosenName = \"\\\"\"+pm.variables.get(\"patientChosenName\")+\"\\\"\";",
									"    let expPatientName = pm.variables.get(\"patientFirstName\")+\" \"+expChoosenName+\" \"+pm.variables.get(\"patientLastName\");",
									"    pm.expect(\"\\\"\"+jsonData[2].patientName+\"\\\"\").to.eql(\"\\\"\" + expPatientName + \"\\\"\");",
									"});",
									"",
									"pm.test(\"Verify Activity log4: Task priority update\", function () {",
									"    pm.expect(jsonData[3].activityExternalId).length.greaterThan(0);",
									"",
									"    //log date",
									"    var d = new Date();",
									"    console.log(d);",
									"    d = d.toISOString().slice(0, 10);",
									"    d = d.split(\"T\")[0];",
									"    pm.expect(jsonData[3].updatedDate).contains(d);",
									"",
									"    //updatedByUserId",
									"    pm.expect(jsonData[3].updatedByUserId).to.eql(pm.variables.get(\"task_updatedby_userid\"));",
									"",
									"    //updatedByUserName",
									"    pm.expect(jsonData[3].updatedByUserName).to.eql(pm.variables.get(\"task_updatedby_username\"));",
									"",
									"    //taskName",
									"    pm.expect(jsonData[3].taskName).to.eql(pm.variables.get(\"task_name2\"));",
									"",
									"    //categoryExternalId",
									"    pm.expect(jsonData[3].categoryExternalId).to.eql(pm.variables.get(\"category_id\"));",
									"",
									"    //categoryName",
									"    pm.expect(jsonData[3].categoryName).to.eql(pm.variables.get(\"category_name\"));",
									"",
									"    //subCategoryExternalId and subCategoryName",
									"    if (pm.variables.get(\"sub_category_name\") == \" \") {",
									"        pm.expect(jsonData[3].subCategoryExternalId).to.eql(pm.variables.get(\"sub_category_id\"));",
									"        pm.expect(jsonData[3].subCategoryName).to.eql(pm.variables.get(\"sub_category_name\"));",
									"    }",
									"",
									"    //priorityId",
									"    pm.expect(jsonData[3].priorityId).to.eql(pm.variables.get(\"task_priority_id2\"));",
									"",
									"    //statusId",
									"    pm.expect(jsonData[3].statusId).to.eql(1);",
									"",
									"    //dueDate",
									"    var exp_duedate = pm.variables.get(\"task_due_date2\");",
									"    exp_duedate = exp_duedate.replace(\" \", \"T\");",
									"    pm.expect(jsonData[3].dueDate).to.eql(exp_duedate);",
									"",
									"    //assigneeId",
									"    pm.expect(jsonData[3].assigneeId).to.eql(pm.variables.get(\"task_assigned_userid\"));",
									"",
									"    //assigneeName",
									"    pm.expect(jsonData[3].assigneeName).to.eql(pm.variables.get(\"task_assigned_username\"));",
									"",
									"    //patientId",
									"    pm.expect(jsonData[3].patientId).to.eql(pm.variables.get(\"patient_id\"));",
									"",
									"    //patientName",
									"    let expChoosenName = \"\\\"\"+pm.variables.get(\"patientChosenName\")+\"\\\"\";",
									"    let expPatientName = pm.variables.get(\"patientFirstName\")+\" \"+expChoosenName+\" \"+pm.variables.get(\"patientLastName\");",
									"    pm.expect(\"\\\"\"+jsonData[3].patientName+\"\\\"\").to.eql(\"\\\"\" + expPatientName + \"\\\"\");",
									"});",
									"",
									"pm.test(\"Verify Activity log5: Task Category and Sub-category\", function () {",
									"    pm.expect(jsonData[4].activityExternalId).length.greaterThan(0);",
									"",
									"    //log date",
									"    var d = new Date();",
									"    console.log(d);",
									"    d = d.toISOString().slice(0, 10);",
									"    d = d.split(\"T\")[0];",
									"    pm.expect(jsonData[4].updatedDate).contains(d);",
									"",
									"    //updatedByUserId",
									"    pm.expect(jsonData[4].updatedByUserId).to.eql(pm.variables.get(\"task_updatedby_userid\"));",
									"",
									"    //updatedByUserName",
									"    pm.expect(jsonData[4].updatedByUserName).to.eql(pm.variables.get(\"task_updatedby_username\"));",
									"",
									"    //taskName",
									"    pm.expect(jsonData[4].taskName).to.eql(pm.variables.get(\"task_name2\"));",
									"",
									"    //categoryExternalId",
									"    pm.expect(jsonData[4].categoryExternalId).to.eql(pm.variables.get(\"category_id2\"));",
									"",
									"    //categoryName",
									"    pm.expect(jsonData[4].categoryName).to.eql(pm.variables.get(\"category_name2\"));",
									"",
									"    //subCategoryExternalId and subCategoryName",
									"    if (pm.variables.get(\"sub_category_name\") == \" \") {",
									"        pm.expect(jsonData[4].subCategoryExternalId).to.eql(pm.variables.get(\"sub_category_id2\"));",
									"        pm.expect(jsonData[4].subCategoryName).to.eql(pm.variables.get(\"sub_category_name2\"));",
									"    }",
									"",
									"    //priorityId",
									"    pm.expect(jsonData[4].priorityId).to.eql(pm.variables.get(\"task_priority_id2\"));",
									"",
									"    //statusId",
									"    pm.expect(jsonData[4].statusId).to.eql(1);",
									"",
									"    //dueDate",
									"    var exp_duedate = pm.variables.get(\"task_due_date2\");",
									"    exp_duedate = exp_duedate.replace(\" \", \"T\");",
									"    pm.expect(jsonData[4].dueDate).to.eql(exp_duedate);",
									"",
									"    //assigneeId",
									"    pm.expect(jsonData[4].assigneeId).to.eql(pm.variables.get(\"task_assigned_userid\"));",
									"",
									"    //assigneeName",
									"    pm.expect(jsonData[4].assigneeName).to.eql(pm.variables.get(\"task_assigned_username\"));",
									"",
									"    //patientId",
									"    pm.expect(jsonData[4].patientId).to.eql(pm.variables.get(\"patient_id\"));",
									"",
									"    //patientName",
									"    let expChoosenName = \"\\\"\"+pm.variables.get(\"patientChosenName\")+\"\\\"\";",
									"    let expPatientName = pm.variables.get(\"patientFirstName\")+\" \"+expChoosenName+\" \"+pm.variables.get(\"patientLastName\");",
									"    pm.expect(\"\\\"\"+jsonData[4].patientName+\"\\\"\").to.eql(\"\\\"\" + expPatientName + \"\\\"\");",
									"});",
									"",
									"pm.test(\"Verify Activity log6: Task Assignee and patient\", function () {",
									"    pm.expect(jsonData[5].activityExternalId).length.greaterThan(0);",
									"",
									"    //log date",
									"    var d = new Date();",
									"    console.log(d);",
									"    d = d.toISOString().slice(0, 10);",
									"    d = d.split(\"T\")[0];",
									"    pm.expect(jsonData[5].updatedDate).contains(d);",
									"",
									"    //updatedByUserId",
									"    pm.expect(jsonData[5].updatedByUserId).to.eql(pm.variables.get(\"task_updatedby_userid\"));",
									"",
									"    //updatedByUserName",
									"    pm.expect(jsonData[5].updatedByUserName).to.eql(pm.variables.get(\"task_updatedby_username\"));",
									"",
									"    //taskName",
									"    pm.expect(jsonData[5].taskName).to.eql(pm.variables.get(\"task_name2\"));",
									"",
									"    //categoryExternalId",
									"    pm.expect(jsonData[5].categoryExternalId).to.eql(pm.variables.get(\"category_id2\"));",
									"",
									"    //categoryName",
									"    pm.expect(jsonData[5].categoryName).to.eql(pm.variables.get(\"category_name2\"));",
									"",
									"    //subCategoryExternalId and subCategoryName",
									"    if (pm.variables.get(\"sub_category_name\") == \" \") {",
									"        pm.expect(jsonData[5].subCategoryExternalId).to.eql(pm.variables.get(\"sub_category_id2\"));",
									"        pm.expect(jsonData[5].subCategoryName).to.eql(pm.variables.get(\"sub_category_name2\"));",
									"    }",
									"",
									"    //priorityId",
									"    pm.expect(jsonData[5].priorityId).to.eql(pm.variables.get(\"task_priority_id2\"));",
									"",
									"    //statusId",
									"    pm.expect(jsonData[5].statusId).to.eql(1);",
									"",
									"    //dueDate",
									"    var exp_duedate = pm.variables.get(\"task_due_date2\");",
									"    exp_duedate = exp_duedate.replace(\" \", \"T\");",
									"    pm.expect(jsonData[5].dueDate).to.eql(exp_duedate);",
									"",
									"    //assigneeId",
									"    pm.expect(jsonData[5].assigneeId).to.eql(pm.variables.get(\"task_assigned_userid2\"));",
									"",
									"    //patientId",
									"    pm.expect(jsonData[5].patientId).to.eql(pm.variables.get(\"patient_id2\"));",
									"",
									"    //patientName",
									"    let expPatientName = pm.variables.get(\"patientFirstName2\")+\" \"+pm.variables.get(\"patientLastName2\");",
									"    pm.expect(\"\\\"\"+jsonData[5].patientName+\"\\\"\").to.eql(\"\\\"\" + expPatientName + \"\\\"\");",
									"});",
									"",
									"pm.test(\"Verify Activity log7: Task Assignee and patient\", function () {",
									"    pm.expect(jsonData[6].activityExternalId).length.greaterThan(0);",
									"",
									"    //log date",
									"    var d = new Date();",
									"    console.log(d);",
									"    d = d.toISOString().slice(0, 10);",
									"    d = d.split(\"T\")[0];",
									"    pm.expect(jsonData[6].updatedDate).contains(d);",
									"",
									"    //updatedByUserId",
									"    pm.expect(jsonData[6].updatedByUserId).to.eql(pm.variables.get(\"task_updatedby_userid\"));",
									"",
									"    //updatedByUserName",
									"    pm.expect(jsonData[6].updatedByUserName).to.eql(pm.variables.get(\"task_updatedby_username\"));",
									"",
									"    //taskName",
									"    pm.expect(jsonData[6].taskName).to.eql(pm.variables.get(\"task_name2\"));",
									"",
									"    //categoryExternalId",
									"    pm.expect(jsonData[6].categoryExternalId).to.eql(pm.variables.get(\"category_id2\"));",
									"",
									"    //categoryName",
									"    pm.expect(jsonData[6].categoryName).to.eql(pm.variables.get(\"category_name2\"));",
									"",
									"    //subCategoryExternalId and subCategoryName",
									"    if (pm.variables.get(\"sub_category_name\") == \" \") {",
									"        pm.expect(jsonData[6].subCategoryExternalId).to.eql(pm.variables.get(\"sub_category_id2\"));",
									"        pm.expect(jsonData[6].subCategoryName).to.eql(pm.variables.get(\"sub_category_name2\"));",
									"    }",
									"",
									"    //priorityId",
									"    pm.expect(jsonData[6].priorityId).to.eql(pm.variables.get(\"task_priority_id2\"));",
									"",
									"    //statusId",
									"    pm.expect(jsonData[6].statusId).to.eql(1);",
									"",
									"    //dueDate",
									"    var exp_duedate = pm.variables.get(\"task_due_date2\");",
									"    exp_duedate = exp_duedate.replace(\" \", \"T\");",
									"    pm.expect(jsonData[6].dueDate).to.eql(exp_duedate);",
									"",
									"    pm.expect(JSON.stringify(jsonData[6])).to.not.include(\"assigneeId\");",
									"    pm.expect(JSON.stringify(jsonData[6])).to.not.include(\"patientId\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4312f78a-c0c3-4999-b4d3-44b8eb75ef61",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/tasks/activity/{{taskExternalId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"tasks",
								"activity",
								"{{taskExternalId}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": null,
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "d4e00c24-c19b-4094-96ac-ca502a034a99"
		},
		{
			"name": "Notes Filters",
			"item": [
				{
					"name": "Add Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2bfa3eb0-ea49-47f8-9dfa-e09e18dcf430",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify id is generated\", function () {",
									"    pm.expect(jsonData.id).length.greaterThan(0);",
									"});",
									"",
									"pm.environment.set(\"patientId\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7f9949a0-b622-48db-a1fa-a331e239e95d",
								"exec": [
									"let ld = require('lodash');",
									"",
									"let gendersList = [",
									"    \"Cis-gender male\",",
									"    \"Cis-gender female\",",
									"    \"Non-binary\",",
									"    \"Other\",",
									"    \"Unknown\",",
									"    \"Transgender male\",",
									"    \"Transgender female\"",
									"];",
									"",
									"let pronounsList = [",
									"    \"He/Him/His\",",
									"    \"She/Her/Hers\",",
									"    \"They/Them/Theirs\",",
									"    \"Other\"",
									"];",
									"",
									"let ethnicitiesList = [",
									"    \"Asian\",",
									"    \"Black/African American\",",
									"    \"White/Caucasian\",",
									"    \"Hispanic/Latinx\",",
									"    \"Native American, Indian American, or Alaska Native\",",
									"    \"Native Hawaiian or other Pacific Islander\",",
									"    \"Middle Eastern or North African\",",
									"    \"Prefer not to answer\",",
									"    \"Other\"",
									"];",
									"",
									"let languagesList = [",
									"    \"English\",",
									"    \"Spanish\",",
									"    \"Chinese\",",
									"    \"French\",",
									"    \"Tagalog\",",
									"    \"Vietnamese\",",
									"    \"Korean\",",
									"    \"German\",",
									"    \"Russian\",",
									"    \"Italian\",",
									"    \"Portuguese\",",
									"    \"Polish\",",
									"    \"Japanese\",",
									"    \"Persian\",",
									"    \"Greek\",",
									"    \"Serbo-Croatian\",",
									"    \"Armenian\",",
									"    \"Yiddish\",",
									"    \"American Sign Language (ASL)\"",
									"];",
									"",
									"let sexList = [",
									"    \"Male\",",
									"    \"Female\"",
									"];",
									"",
									"let timezonesList = [",
									"    \"Hawaii Standard Time\",",
									"    \"Hawaii-Aleutian Time\",",
									"    \"Alaska Time\",",
									"    \"Pacific Time\",",
									"    \"Arizona\",",
									"    \"Mountain Time\",",
									"    \"Central Time\",",
									"    \"Eastern Time\"",
									"];",
									"",
									"let contactPreferences = [\"Email\", \"No preference\", \"Phone\", \"Unknown\"];",
									"",
									"let statesList = [\"AK\", \"AL\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"DC\", \"FL\", \"GA\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"OH\", \"OK\", \"OR\", \"PA\", \"PR\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\", \"Outside US\", \"Unknown\"];",
									"",
									"let addressLine2List = [\"Apt 1\", \"Apt 2\", \"Apt 3\", \"Unit #1\", \"Unit #2\", \"Unit #3\", \"Apt 2L\", \"Apt 2R\"];",
									"",
									"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let lastName = pm.variables.replaceIn('{{$randomLastName}}');",
									"let chosenName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let email = \"qa\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
									"let zip = Math.floor(10000 + Math.random() * 90000);",
									"",
									"//Generate random Date of Birth in YYYY-MM-DD Format",
									"function randomDate(start, end) {",
									"    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));",
									"}",
									"let date = randomDate(new Date(1990, 00, 01), new Date());",
									"let dateOfBirth = date.getFullYear() + '-' + (\"0\" + (date.getMonth() + 1)).slice(-2) + '-' + (\"0\" + date.getDate()).slice(-2);",
									"",
									"//Save the variables to be used in next request for validation",
									"pm.environment.set(\"patientFirstName\", firstName);",
									"pm.environment.set(\"patientLastName\", lastName);",
									"pm.environment.set(\"patientEmail\", email);",
									"pm.environment.set(\"patientPhoneNumber\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));",
									"pm.environment.set(\"patientChosenName\", chosenName);",
									"pm.environment.set(\"patientDateOfBirth\", dateOfBirth);",
									"pm.environment.set(\"patientAddressLine1\", pm.variables.replaceIn('{{$randomStreetAddress}}'));",
									"pm.environment.set(\"patientAddressLine2\", ld.sample(addressLine2List));",
									"pm.environment.set(\"patientCity\", pm.variables.replaceIn('{{$randomCity}}'));",
									"pm.environment.set(\"patientState\", ld.sample(statesList));",
									"pm.environment.set(\"patientCountry\", \"US\");",
									"pm.environment.set(\"patientZip\", zip.toString());",
									"pm.environment.set(\"patientLatitude\", pm.variables.replaceIn('{{$randomLatitude}}'));",
									"pm.environment.set(\"patientLongitude\", pm.variables.replaceIn('{{$randomLongitude}}'));",
									"pm.environment.set(\"patientEthnicities\", JSON.stringify(ld.sampleSize(ethnicitiesList, 2).sort()));",
									"pm.environment.set(\"patientLanguages\", JSON.stringify(ld.sampleSize(languagesList, 2).sort()));",
									"pm.environment.set(\"patientGenderOnRecord\", ld.sample(gendersList));",
									"pm.environment.set(\"patientGenderOffRecord\", ld.sample(gendersList));",
									"pm.environment.set(\"patientPronounsOnRecord\", ld.sample(pronounsList));",
									"pm.environment.set(\"patientPronounsOffRecord\", ld.sample(pronounsList));",
									"pm.environment.set(\"patientSex\", ld.sample(sexList));",
									"pm.environment.set(\"patientTimezone\", ld.sample(timezonesList));",
									"pm.environment.set(\"patientContactPreferences\", JSON.stringify(ld.sampleSize(contactPreferences, 2).sort()));"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1ad8e53b-3322-419b-89ca-180adb77ecac",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{patientFirstName}}\",\n    \"lastName\": \"{{patientLastName}}\",\n    \"dateOfBirth\": \"{{patientDateOfBirth}}\",\n    \"email\": \"{{patientEmail}}\",\n    \"contactPreferences\": {{patientContactPreferences}},\n    \"ethnicities\": {{patientEthnicities}},\n    \"phoneNumber\": \"{{patientPhoneNumber}}\",\n    \"chosenName\": \"{{patientChosenName}}\",\n    \"languages\": {{patientLanguages}},\n    \"genderOnRecord\": \"{{patientGenderOnRecord}}\",\n    \"genderOffRecord\": \"{{patientGenderOffRecord}}\",\n    \"pronounsOnRecord\": \"{{patientPronounsOnRecord}}\",\n    \"pronounsOffRecord\": \"{{patientPronounsOffRecord}}\",\n    \"sex\": \"{{patientSex}}\",\n    \"timezone\": \"{{patientTimezone}}\",\n    \"latitude\": \"{{patientLatitude}}\",\n    \"longitude\": \"{{patientLongitude}}\",\n    \"addressLine1\": \"{{patientAddressLine1}}\",\n    \"addressLine2\": \"{{patientAddressLine2}}\",\n    \"city\": \"{{patientCity}}\",\n    \"country\": \"{{patientCountry}}\",\n    \"state\": \"{{patientState}}\",\n    \"zip\": \"{{patientZip}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/patients",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add draft note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify note external id is generated\", function () {",
									"    pm.expect(jsonData.noteExternalId).length.greaterThan(0);",
									"});",
									"",
									"//set noteExternalId to be used in next request",
									"pm.environment.set(\"noteExternalId\", jsonData.noteExternalId);",
									""
								],
								"type": "text/javascript",
								"id": "54eedc4f-4574-475a-a890-a104b9712c8c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let ld = require('lodash');",
									"",
									"let noteCommunicationMethod = [\"Chat\", \"Email\", \"Inbound phone\", \"Outbound phone\", \"Video\"];",
									"let noteStatus = [\"draft\"];",
									"let activityWithName = [\"Case manager\", \"School\", \"Carer\", \"Patient\", \"Payor\", \"Provider\"];",
									"let noteType = [\"Admissions\", \"Authorization\", \"Billing\", \"Care coordination\", \"Custody Agreement\", \"Informed Consent\", \"Inquiry\", \"Insurance\", \"Insurance Card\", \"Intake session\", \"Medical Clearance\", \"Medical Records\", \"Patient chart\", \"Patient follow-up\", \"Phone Screen\", \"Provider Assignment\", \"Provider follow-up\", \"Referral\", \"Referral Correspondance\", \"Release of Information\", \"Treatment Consent\", \"Treatment session\"];",
									"",
									"let recentDateTime = pm.variables.replaceIn('{{$randomDateRecent}}');",
									"let noteContent = \"{\\\"blocks\\\":[{\\\"key\\\":\\\"9vf7r\\\",\\\"text\\\":\\\"\" + pm.variables.replaceIn('{{$randomLoremSentences}}') + \"\\\",\\\"type\\\":\\\"unstyled\\\",\\\"depth\\\":0,\\\"inlineStyleRanges\\\":[],\\\"entityRanges\\\":[],\\\"data\\\":{}}],\\\"entityMap\\\":{}}\";",
									"",
									"//Save the variables to be used in next request for validation",
									"pm.environment.set(\"noteCommunicationMethod\", ld.sample(noteCommunicationMethod));",
									"pm.environment.set(\"noteStatus\", ld.sample(noteStatus));",
									"pm.environment.set(\"noteTitle\", \"From Postman \" + recentDateTime + \" Equip Health\");",
									"pm.environment.set(\"noteContent\", JSON.stringify(noteContent));",
									"pm.environment.set(\"activityWithName\", ld.sample(activityWithName));",
									"pm.environment.set(\"noteType\", ld.sample(noteType));",
									"pm.environment.set(\"isActive\", pm.variables.replaceIn('{{$randomBoolean}}'));",
									"pm.environment.set(\"isConfidential\", pm.variables.replaceIn('{{$randomBoolean}}'));"
								],
								"type": "text/javascript",
								"id": "c79cf0c1-88ff-4b84-836c-d601ba603c11"
							}
						}
					],
					"id": "d8ea7059-2b6a-4279-ac43-f49fc437dfb2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"authoredByProviderExternalId\": \"{{authoredByProviderExternalId}}\",\n    \"patientExternalId\": \"{{patientId}}\",\n    \"title\": \"mayank\",\n    \"noteStatus\": \"{{noteStatus}}\",\n    \"noteContent\": {{noteContent}},\n    \"activityWith\": [\n        {\n            \"activityWithName\": \"{{activityWithName}}\",\n            \"otherName\": \"Postman otherName\",\n            \"isActive\": {{isActive}}\n        }\n    ],\n    \"noteCommunicationMethod\": \"{{noteCommunicationMethod}}\",\n    \"isConfidential\": {{isConfidential}},\n    \"noteType\": \"{{noteType}}\",\n    \"tags\": [\n        \"Test tag\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/clinical-data/notes",
							"host": [
								"{{host}}"
							],
							"path": [
								"clinical-data",
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get upload url",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify attachment upload url\", function () {",
									"    pm.expect(jsonData.attachmentUploadUrl).to.include(\"clinicaldata-service.s3\");",
									"    pm.expect(jsonData.attachmentExternalId).length.greaterThan(0);",
									"});",
									"",
									"pm.environment.set(\"attachmentExternalId\",jsonData.attachmentExternalId);",
									"pm.environment.set(\"attachmentUploadUrl\",(jsonData.attachmentUploadUrl).split('Amz-Date')[0]);",
									"",
									""
								],
								"type": "text/javascript",
								"id": "e143ae44-5e3e-43f9-a190-56e70c9e0e19"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let fileName = pm.variables.replaceIn('{{$randomCommonFileName}}');",
									"",
									"pm.environment.set(\"fileName\", fileName);"
								],
								"type": "text/javascript",
								"id": "e4044578-dde4-4f80-9802-c0c65b169f1b"
							}
						}
					],
					"id": "f2da9b07-9540-42b8-a420-7cddc7761bf2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/clinical-data/notes/{{noteExternalId}}/attachments/{{fileName}}/upload-url",
							"host": [
								"{{host}}"
							],
							"path": [
								"clinical-data",
								"notes",
								"{{noteExternalId}}",
								"attachments",
								"{{fileName}}",
								"upload-url"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add signed note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify note external id is generated\", function () {",
									"    pm.expect(jsonData.noteExternalId).length.greaterThan(0);",
									"});",
									"",
									"//set noteExternalId to be used in next request",
									"pm.environment.set(\"noteExternalId\", jsonData.noteExternalId);",
									""
								],
								"type": "text/javascript",
								"id": "9a2432da-f194-43b7-a97b-c06745605f45"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let ld = require('lodash');",
									"",
									"let noteCommunicationMethod = [\"Chat\", \"Email\", \"Inbound phone\", \"Outbound phone\", \"Video\"];",
									"let noteStatus = [\"signed\"];",
									"let activityWithName = [\"Case manager\", \"School\", \"Carer\", \"Patient\", \"Payor\", \"Provider\"];",
									"let noteType = [\"Admissions\", \"Authorization\", \"Billing\", \"Care coordination\", \"Custody Agreement\", \"Informed Consent\", \"Inquiry\", \"Insurance\", \"Insurance Card\", \"Intake session\", \"Medical Clearance\", \"Medical Records\", \"Patient chart\", \"Patient follow-up\", \"Phone Screen\", \"Provider Assignment\", \"Provider follow-up\", \"Referral\", \"Referral Correspondance\", \"Release of Information\", \"Treatment Consent\", \"Treatment session\"];",
									"",
									"let recentDateTime = pm.variables.replaceIn('{{$randomDateRecent}}');",
									"let noteContent = \"{\\\"blocks\\\":[{\\\"key\\\":\\\"9vf7r\\\",\\\"text\\\":\\\"\" + pm.variables.replaceIn('{{$randomLoremSentences}}') + \"\\\",\\\"type\\\":\\\"unstyled\\\",\\\"depth\\\":0,\\\"inlineStyleRanges\\\":[],\\\"entityRanges\\\":[],\\\"data\\\":{}}],\\\"entityMap\\\":{}}\";",
									"",
									"//Save the variables to be used in next request for validation",
									"pm.environment.set(\"noteCommunicationMethod\", ld.sample(noteCommunicationMethod));",
									"pm.environment.set(\"noteStatus\", ld.sample(noteStatus));",
									"pm.environment.set(\"noteTitle\", \"From Postman \" + recentDateTime + \" Equip Health\");",
									"pm.environment.set(\"noteContent\", JSON.stringify(noteContent));",
									"pm.environment.set(\"activityWithName\", ld.sample(activityWithName));",
									"pm.environment.set(\"noteType\", ld.sample(noteType));",
									"pm.environment.set(\"isActive\", pm.variables.replaceIn('{{$randomBoolean}}'));",
									"pm.environment.set(\"isConfidential\", pm.variables.replaceIn('{{$randomBoolean}}'));"
								],
								"type": "text/javascript",
								"id": "4e4668c8-bae6-4a5c-80c5-b0864c81b9a5"
							}
						}
					],
					"id": "4c1fd3e5-c63a-4aca-af0f-c7ab3f0c9ec6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"authoredByProviderExternalId\": \"{{authoredByProviderExternalId}}\",\n    \"patientExternalId\": \"{{patientId}}\",\n    \"title\": \"{{noteTitle}}\",\n    \"noteStatus\": \"{{noteStatus}}\",\n    \"noteContent\": {{noteContent}},\n    \"activityWith\": [\n        {\n            \"activityWithName\": \"{{activityWithName}}\",\n            \"otherName\": \"Postman otherName\",\n            \"isActive\": {{isActive}}\n        }\n    ],\n    \"noteCommunicationMethod\": \"{{noteCommunicationMethod}}\",\n    \"isConfidential\": {{isConfidential}},\n    \"noteType\": \"{{noteType}}\",\n    \"tags\": [\n        \"Test tag\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/clinical-data/notes",
							"host": [
								"{{host}}"
							],
							"path": [
								"clinical-data",
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add voided note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify note external id is generated\", function () {",
									"    pm.expect(jsonData.noteExternalId).length.greaterThan(0);",
									"});",
									"",
									"//set noteExternalId to be used in next request",
									"pm.environment.set(\"noteExternalId\", jsonData.noteExternalId);",
									""
								],
								"type": "text/javascript",
								"id": "b3bcf409-fd44-4d95-a6be-d03d30ed4929"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let ld = require('lodash');",
									"",
									"let noteCommunicationMethod = [\"Chat\", \"Email\", \"Inbound phone\", \"Outbound phone\", \"Video\"];",
									"let noteStatus = [\"signed\"];",
									"let activityWithName = [\"Case manager\", \"School\", \"Carer\", \"Patient\", \"Payor\", \"Provider\"];",
									"let noteType = [\"Admissions\", \"Authorization\", \"Billing\", \"Care coordination\", \"Custody Agreement\", \"Informed Consent\", \"Inquiry\", \"Insurance\", \"Insurance Card\", \"Intake session\", \"Medical Clearance\", \"Medical Records\", \"Patient chart\", \"Patient follow-up\", \"Phone Screen\", \"Provider Assignment\", \"Provider follow-up\", \"Referral\", \"Referral Correspondance\", \"Release of Information\", \"Treatment Consent\", \"Treatment session\"];",
									"",
									"let recentDateTime = pm.variables.replaceIn('{{$randomDateRecent}}');",
									"let noteContent = \"{\\\"blocks\\\":[{\\\"key\\\":\\\"9vf7r\\\",\\\"text\\\":\\\"\" + pm.variables.replaceIn('{{$randomLoremSentences}}') + \"\\\",\\\"type\\\":\\\"unstyled\\\",\\\"depth\\\":0,\\\"inlineStyleRanges\\\":[],\\\"entityRanges\\\":[],\\\"data\\\":{}}],\\\"entityMap\\\":{}}\";",
									"",
									"//Save the variables to be used in next request for validation",
									"pm.environment.set(\"noteCommunicationMethod\", ld.sample(noteCommunicationMethod));",
									"pm.environment.set(\"noteStatus\", ld.sample(noteStatus));",
									"pm.environment.set(\"noteTitle\", \"From Postman \" + recentDateTime + \" Equip Health\");",
									"pm.environment.set(\"noteContent\", JSON.stringify(noteContent));",
									"pm.environment.set(\"activityWithName\", ld.sample(activityWithName));",
									"pm.environment.set(\"noteType\", ld.sample(noteType));",
									"pm.environment.set(\"isActive\", pm.variables.replaceIn('{{$randomBoolean}}'));",
									"pm.environment.set(\"isConfidential\", pm.variables.replaceIn('{{$randomBoolean}}'));"
								],
								"type": "text/javascript",
								"id": "e239e015-dc88-4015-82c0-ea4888452be4"
							}
						}
					],
					"id": "ed1a0fe7-dfa8-4086-8820-1bde1c7b422e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"authoredByProviderExternalId\": \"{{authoredByProviderExternalId}}\",\n    \"patientExternalId\": \"{{patientId}}\",\n    \"title\": \"{{noteTitle}}\",\n    \"noteStatus\": \"{{noteStatus}}\",\n    \"noteContent\": {{noteContent}},\n    \"activityWith\": [\n        {\n            \"activityWithName\": \"{{activityWithName}}\",\n            \"otherName\": \"Postman otherName\",\n            \"isActive\": {{isActive}}\n        }\n    ],\n    \"noteCommunicationMethod\": \"{{noteCommunicationMethod}}\",\n    \"isConfidential\": {{isConfidential}},\n    \"noteType\": \"{{noteType}}\",\n    \"tags\": [\n        \"Test tag\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/clinical-data/notes",
							"host": [
								"{{host}}"
							],
							"path": [
								"clinical-data",
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update note with void reason",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify note external id is generated\", function () {",
									"    pm.expect(jsonData.noteExternalId).length.greaterThan(0);",
									"});"
								],
								"type": "text/javascript",
								"id": "a9a7b9d5-1611-40a6-9bdb-7e46014b2af6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// setTimeout(function(){}, [2000]);",
									"",
									"let ld = require('lodash');",
									"",
									"let voidReason = [\"Duplicate\", \"Made in error\"];",
									"",
									"//Save the variables to be used in next request for validation",
									"pm.environment.set(\"voidReason\", ld.sample(voidReason));",
									"pm.environment.set(\"noteStatus\", \"void\");"
								],
								"type": "text/javascript",
								"id": "237c47dd-7bfc-4644-968d-1d0054d993ca"
							}
						}
					],
					"id": "758db66e-f1b0-472d-be48-5cf331007c8d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"noteExternalId\": \"{{noteExternalId}}\",\n    \"authoredByProviderExternalId\": \"73f92e85-9596-46e0-aa18-2708cc8d7fc2\",\n    \"noteStatus\": \"{{noteStatus}}\",\n    \"voidReason\": \"{{voidReason}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/clinical-data/notes",
							"host": [
								"{{host}}"
							],
							"path": [
								"clinical-data",
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add notes with different note types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"const filNoteTypes = pm.environment.get(\"filNoteTypes\");",
									"",
									"if (filNoteTypes && filNoteTypes.length > 0) {",
									"    postman.setNextRequest(request.name);",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify note external id is generated\", function () {",
									"    pm.expect(jsonData.noteExternalId).length.greaterThan(0);",
									"});",
									"",
									"//set noteExternalId to be used in next request",
									"pm.environment.set(\"noteExternalId\", jsonData.noteExternalId);",
									""
								],
								"type": "text/javascript",
								"id": "e8bd9eda-0c4f-44df-8fbc-edaa444b07cb"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let ld = require('lodash');",
									"",
									"let filNoteTypes = pm.environment.get(\"filNoteTypes\");",
									"",
									"if (!filNoteTypes || filNoteTypes.length == 0) {",
									"    filNoteTypes = [\"Admissions\", \"Authorization\", \"Billing\", \"Care coordination\", \"Custody Agreement\", \"Informed Consent\", \"Inquiry\", \"Insurance\", \"Insurance Card\", \"Intake session\", \"Medical Clearance\", \"Medical Records\", \"Patient chart\", \"Patient follow-up\", \"Phone Screen\", \"Provider Assignment\", \"Provider follow-up\", \"Referral\", \"Referral Correspondance\", \"Release of Information\", \"Treatment Consent\", \"Treatment session\"];",
									"}",
									"",
									"let currentFilNoteType = filNoteTypes.shift();",
									"console.log(currentFilNoteType)",
									"pm.environment.set(\"filNoteType\", currentFilNoteType);",
									"pm.environment.set(\"filNoteTypes\", filNoteTypes);",
									"",
									"let noteCommunicationMethod = [\"Chat\", \"Email\", \"Inbound phone\", \"Outbound phone\", \"Video\"];",
									"let noteStatus = [\"draft\"];",
									"let activityWithName = [\"Case manager\", \"School\", \"Carer\", \"Patient\", \"Payor\", \"Provider\"];",
									"// let noteType = [\"Admissions\", \"Authorization\", \"Billing\", \"Care coordination\", \"Custody Agreement\", \"Informed Consent\", \"Inquiry\", \"Insurance\", \"Insurance Card\", \"Intake session\", \"Medical Clearance\", \"Medical Records\", \"Patient chart\", \"Patient follow-up\", \"Phone Screen\", \"Provider Assignment\", \"Provider follow-up\", \"Referral\", \"Referral Correspondance\", \"Release of Information\", \"Treatment Consent\", \"Treatment session\"];",
									"",
									"let recentDateTime = pm.variables.replaceIn('{{$randomDateRecent}}');",
									"let noteContent = \"{\\\"blocks\\\":[{\\\"key\\\":\\\"9vf7r\\\",\\\"text\\\":\\\"\" + pm.variables.replaceIn('{{$randomLoremSentences}}') + \"\\\",\\\"type\\\":\\\"unstyled\\\",\\\"depth\\\":0,\\\"inlineStyleRanges\\\":[],\\\"entityRanges\\\":[],\\\"data\\\":{}}],\\\"entityMap\\\":{}}\";",
									"",
									"//Save the variables to be used in next request for validation",
									"pm.environment.set(\"noteCommunicationMethod\", ld.sample(noteCommunicationMethod));",
									"pm.environment.set(\"noteStatus\", ld.sample(noteStatus));",
									"pm.environment.set(\"noteTitle\", \"From Postman \" + recentDateTime + \" Equip Health\");",
									"pm.environment.set(\"noteContent\", JSON.stringify(noteContent));",
									"pm.environment.set(\"activityWithName\", ld.sample(activityWithName));",
									"// pm.environment.set(\"noteType\", ld.sample(noteType));",
									"pm.environment.set(\"isActive\", pm.variables.replaceIn('{{$randomBoolean}}'));",
									"pm.environment.set(\"isConfidential\", pm.variables.replaceIn('{{$randomBoolean}}'));"
								],
								"type": "text/javascript",
								"id": "b39e9aee-1f99-40b0-b7c3-533c4f814358"
							}
						}
					],
					"id": "d6b0b60a-671e-45ad-be9e-3891cb46f5b6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"authoredByProviderExternalId\": \"{{authoredByProviderExternalId}}\",\n    \"patientExternalId\": \"{{patientId}}\",\n    \"title\": \"{{noteTitle}}\",\n    \"noteStatus\": \"{{noteStatus}}\",\n    \"noteContent\": {{noteContent}},\n    \"activityWith\": [\n        {\n            \"activityWithName\": \"{{activityWithName}}\",\n            \"otherName\": \"Postman otherName\",\n            \"isActive\": {{isActive}}\n        }\n    ],\n    \"noteCommunicationMethod\": \"{{noteCommunicationMethod}}\",\n    \"isConfidential\": {{isConfidential}},\n    \"noteType\": \"{{filNoteType}}\",\n    \"tags\": [\n        \"Test tag\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/clinical-data/notes",
							"host": [
								"{{host}}"
							],
							"path": [
								"clinical-data",
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter by note type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"const filNoteTypes = pm.environment.get(\"filNoteTypes\");",
									"",
									"if (filNoteTypes && filNoteTypes.length > 0) {",
									"    postman.setNextRequest(request.name);",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"if (jsonData.totalCount > 0) {",
									"    tests[\"Total number of note(s): \" + jsonData.totalCount] = pm.expect(jsonData.totalCount).to.be.eql(jsonData['data'].length);",
									"",
									"    pm.test(\"Verify notes filter by note type\", () => {",
									"        for (let i = 0; i < jsonData['data'].length; i++) {",
									"            tests[\"Note# \" + (i + 1) + \" has note type as \" + jsonData['data'][i].noteType] = pm.expect(jsonData['data'][i].noteType.toLowerCase()).to.eql(pm.environment.get(\"filNoteType\").toLowerCase());",
									"        }",
									"    });",
									"} else {",
									"    pm.test(\"Verify notes filter by note type\", () => {",
									"        throw new Error(\"No data with filter \" + pm.environment.get(\"filNoteType\") + \" is found\");",
									"    });",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "38bf9e71-2cd8-4c1b-87dc-fe6ffbacdf89"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let filNoteTypes = pm.environment.get(\"filNoteTypes\");",
									"",
									"if (!filNoteTypes || filNoteTypes.length == 0) {",
									"    filNoteTypes = [\"Admissions\", \"Authorization\", \"Billing\", \"Care coordination\", \"Custody Agreement\", \"Informed Consent\", \"Inquiry\", \"Insurance\", \"Insurance Card\", \"Intake session\", \"Medical Clearance\", \"Medical Records\", \"Patient chart\", \"Patient follow-up\", \"Phone Screen\", \"Provider Assignment\", \"Provider follow-up\", \"Referral\", \"Referral Correspondance\", \"Release of Information\", \"Treatment Consent\", \"Treatment session\"];",
									"}",
									"",
									"let currentFilNoteType = filNoteTypes.shift();",
									"console.log(currentFilNoteType)",
									"pm.environment.set(\"filNoteType\", currentFilNoteType);",
									"pm.environment.set(\"filNoteTypes\", filNoteTypes);"
								],
								"type": "text/javascript",
								"id": "56e96edb-2da4-48d9-b3e3-16f92557593f"
							}
						}
					],
					"id": "544312bd-98a1-44c2-b621-1688dfcfc72e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/notes?page-size=50&page-number=1&patientExternalId={{patientId}}&filter-by=note-type::{{filNoteType}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"notes"
							],
							"query": [
								{
									"key": "page-size",
									"value": "50"
								},
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "patientExternalId",
									"value": "{{patientId}}"
								},
								{
									"key": "filter-by",
									"value": "note-type::{{filNoteType}}"
								},
								{
									"key": "filter-by",
									"value": "created-by-provider-external-id::",
									"disabled": true
								},
								{
									"key": "filter-by",
									"value": "provider-role::",
									"disabled": true
								},
								{
									"key": "filter-by",
									"value": "note-status::",
									"disabled": true
								},
								{
									"key": "filter-by",
									"value": "title::",
									"disabled": true
								},
								{
									"key": "filter-by",
									"value": "has-attachments::true",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter by provider role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"if (jsonData.totalCount > 0) {",
									"    tests[\"Total number of note(s): \" + jsonData.totalCount] = pm.expect(jsonData.totalCount).to.be.eql(jsonData['data'].length);",
									"",
									"    pm.test(\"Verify notes filter by provider role\", () => {",
									"        for (let i = 0; i < jsonData['data'].length; i++) {",
									"            tests[\"Note# \" + (i + 1) + \" has provider role as \" + jsonData['data'][i].providerType] = pm.expect(jsonData['data'][i].providerType.toLowerCase()).to.eql(('Analyst').toLowerCase());",
									"        }",
									"    });",
									"} else {",
									"    pm.test(\"Verify notes filter by provider role\", () => {",
									"        throw new Error(\"No data with filter is found\");",
									"    });",
									"}",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "4e0383b8-74aa-4755-81a3-9890c0b62d31"
							}
						}
					],
					"id": "ea29d839-bed7-49d5-8ea0-b47131d23cac",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/notes?page-size=50&page-number=1&patientExternalId={{patientId}}&filter-by=provider-role::Analyst",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"notes"
							],
							"query": [
								{
									"key": "page-size",
									"value": "50"
								},
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "patientExternalId",
									"value": "{{patientId}}"
								},
								{
									"key": "filter-by",
									"value": "provider-role::Analyst"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter by provider name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"if (jsonData.totalCount > 0) {",
									"    tests[\"Total number of note(s): \" + jsonData.totalCount] = pm.expect(jsonData.totalCount).to.be.eql(jsonData['data'].length);",
									"",
									"    pm.test(\"Verify notes filter by provider name\", () => {",
									"        for (let i = 0; i < jsonData['data'].length; i++) {",
									"            tests[\"Note# \" + (i + 1) + \" has provider name as \" + jsonData['data'][i].providerFirstName + \" \" + jsonData['data'][i].providerLastName] = pm.expect(jsonData['data'][i].authoredByProviderExternalId.toLowerCase()).to.eql(pm.environment.get(\"createdByProviderExternalId\").toLowerCase());",
									"        }",
									"    });",
									"} else {",
									"    pm.test(\"Verify notes filter by provider name\", () => {",
									"        throw new Error(\"No data with filter is found\");",
									"    });",
									"}",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "30f0d197-3a7b-4031-a898-6829989e1747"
							}
						}
					],
					"id": "b21d5df8-e4f4-456c-be0c-c3d4cada6329",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/notes?page-size=500&page-number=1&patientExternalId={{patientId}}&filter-by=created-by-provider-external-id::{{createdByProviderExternalId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"notes"
							],
							"query": [
								{
									"key": "page-size",
									"value": "500"
								},
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "patientExternalId",
									"value": "{{patientId}}"
								},
								{
									"key": "filter-by",
									"value": "created-by-provider-external-id::{{createdByProviderExternalId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter by attachments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"if (jsonData.totalCount > 0) {",
									"    tests[\"Total number of note(s): \" + jsonData.totalCount] = pm.expect(jsonData.totalCount).to.be.eql(jsonData['data'].length);",
									"",
									"    pm.test(\"Verify notes filter by attachment\", () => {",
									"        for (let i = 0; i < jsonData['data'].length; i++) {",
									"            tests[\"Note# \" + (i + 1) + \" has an attachment\"] = pm.expect(jsonData['data'][i].attachments.length).to.be.greaterThan(0);",
									"        }",
									"    });",
									"} else {",
									"    pm.test(\"Verify notes filter by attachment\", () => {",
									"        throw new Error(\"No data with filter is found\");",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"id": "db6df7f8-39d9-488f-9183-0d91c0bf14f3"
							}
						}
					],
					"id": "f2ee4c47-4131-4aba-8228-d1a40e6d782c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/notes?page-size=50&page-number=1&patientExternalId={{patientId}}&filter-by=has-attachments::true",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"notes"
							],
							"query": [
								{
									"key": "page-size",
									"value": "50"
								},
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "patientExternalId",
									"value": "{{patientId}}"
								},
								{
									"key": "filter-by",
									"value": "has-attachments::true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter by note status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"const filNoteStatuses = pm.environment.get(\"filNoteStatuses\");",
									"",
									"if (filNoteStatuses && filNoteStatuses.length > 0) {",
									"    postman.setNextRequest(request.name);",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"if (jsonData.totalCount > 0) {",
									"    tests[\"Total number of note(s): \" + jsonData.totalCount] = pm.expect(jsonData.totalCount).to.be.eql(jsonData['data'].length);",
									"",
									"    pm.test(\"Verify notes filter by attachment\", () => {",
									"        for (let i = 0; i < jsonData['data'].length; i++) {",
									"            tests[\"Note# \" + (i + 1) + \" has note status as \" + jsonData['data'][i].noteStatus] = pm.expect(jsonData['data'][i].noteStatus.toLowerCase()).to.eql(pm.environment.get(\"filNoteStatus\").toLowerCase());",
									"        }",
									"    });",
									"} else {",
									"    pm.test(\"Verify notes filter by attachment\", () => {",
									"        throw new Error(\"No data with filter \" + pm.environment.get(\"filNoteStatus\") + \" is found\");",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "4d4bf0f4-47d6-4ee3-87f4-22dac4dbf7de"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let filNoteStatuses = pm.environment.get(\"filNoteStatuses\");",
									"",
									"if (!filNoteStatuses || filNoteStatuses.length == 0) {",
									"    filNoteStatuses = [\"draft\", \"signed\", \"void\"];",
									"}",
									"",
									"let currentFilNoteStatus = filNoteStatuses.shift();",
									"console.log(currentFilNoteStatus)",
									"pm.environment.set(\"filNoteStatus\", currentFilNoteStatus);",
									"pm.environment.set(\"filNoteStatuses\", filNoteStatuses);"
								],
								"type": "text/javascript",
								"id": "521b838c-26ee-4128-a99b-92401e843039"
							}
						}
					],
					"id": "30c66451-b002-425b-b72a-3246b8b63b08",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/notes?page-size=50&page-number=1&patientExternalId={{patientId}}&filter-by=note-status::{{filNoteStatus}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"notes"
							],
							"query": [
								{
									"key": "page-size",
									"value": "50"
								},
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "patientExternalId",
									"value": "{{patientId}}"
								},
								{
									"key": "filter-by",
									"value": "note-status::{{filNoteStatus}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add draft note with title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify note external id is generated\", function () {",
									"    pm.expect(jsonData.noteExternalId).length.greaterThan(0);",
									"});",
									"",
									"//set noteExternalId to be used in next request",
									"pm.environment.set(\"noteExternalId\", jsonData.noteExternalId);",
									""
								],
								"type": "text/javascript",
								"id": "7092636a-b61e-4ef0-9ea3-6976a331a51e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let ld = require('lodash');",
									"",
									"let noteCommunicationMethod = [\"Chat\", \"Email\", \"Inbound phone\", \"Outbound phone\", \"Video\"];",
									"let noteStatus = [\"draft\"];",
									"let activityWithName = [\"Case manager\", \"School\", \"Carer\", \"Patient\", \"Payor\", \"Provider\"];",
									"let noteType = [\"Admissions\", \"Authorization\", \"Billing\", \"Care coordination\", \"Custody Agreement\", \"Informed Consent\", \"Inquiry\", \"Insurance\", \"Insurance Card\", \"Intake session\", \"Medical Clearance\", \"Medical Records\", \"Patient chart\", \"Patient follow-up\", \"Phone Screen\", \"Provider Assignment\", \"Provider follow-up\", \"Referral\", \"Referral Correspondance\", \"Release of Information\", \"Treatment Consent\", \"Treatment session\"];",
									"",
									"let recentDateTime = pm.variables.replaceIn('{{$randomDateRecent}}');",
									"let noteContent = \"{\\\"blocks\\\":[{\\\"key\\\":\\\"9vf7r\\\",\\\"text\\\":\\\"\" + pm.variables.replaceIn('{{$randomLoremSentences}}') + \"\\\",\\\"type\\\":\\\"unstyled\\\",\\\"depth\\\":0,\\\"inlineStyleRanges\\\":[],\\\"entityRanges\\\":[],\\\"data\\\":{}}],\\\"entityMap\\\":{}}\";",
									"",
									"//Save the variables to be used in next request for validation",
									"pm.environment.set(\"noteCommunicationMethod\", ld.sample(noteCommunicationMethod));",
									"pm.environment.set(\"noteStatus\", ld.sample(noteStatus));",
									"pm.environment.set(\"noteTitle\", \"From Postman \" + recentDateTime + \" Equip Health\");",
									"pm.environment.set(\"noteContent\", JSON.stringify(noteContent));",
									"pm.environment.set(\"activityWithName\", ld.sample(activityWithName));",
									"pm.environment.set(\"noteType\", ld.sample(noteType));",
									"pm.environment.set(\"isActive\", pm.variables.replaceIn('{{$randomBoolean}}'));",
									"pm.environment.set(\"isConfidential\", pm.variables.replaceIn('{{$randomBoolean}}'));",
									"// pm.environment.set(\"filNoteTitle\", \"QA testing title\");"
								],
								"type": "text/javascript",
								"id": "b7ed99cb-a44a-44b5-a2b3-3b8b9466b1c4"
							}
						}
					],
					"id": "46df0b36-3552-42aa-aaee-1917c6ac9417",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"authoredByProviderExternalId\": \"{{authoredByProviderExternalId}}\",\n    \"patientExternalId\": \"{{patientId}}\",\n    \"title\": \"{{noteTitle}}\",\n    \"noteStatus\": \"{{noteStatus}}\",\n    \"noteContent\": {{noteContent}},\n    \"activityWith\": [\n        {\n            \"activityWithName\": \"{{activityWithName}}\",\n            \"otherName\": \"Postman otherName\",\n            \"isActive\": {{isActive}}\n        }\n    ],\n    \"noteCommunicationMethod\": \"{{noteCommunicationMethod}}\",\n    \"isConfidential\": {{isConfidential}},\n    \"noteType\": \"{{noteType}}\",\n    \"tags\": [\n        \"Test tag\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/clinical-data/notes",
							"host": [
								"{{host}}"
							],
							"path": [
								"clinical-data",
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter by note title",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "75c48a0f-dea1-4877-b15c-957fc18a435c",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"if (jsonData.totalCount > 0) {",
									"    tests[\"Total number of note(s): \" + jsonData.totalCount] = pm.expect(jsonData.totalCount).to.be.eql(jsonData['data'].length);",
									"",
									"    pm.test(\"Verify notes filter by title\", () => {",
									"        for (let i = 0; i < jsonData['data'].length; i++) {",
									"            tests[\"Note# \" + (i + 1) + \" has note title as \" + jsonData['data'][i].title] = pm.expect(jsonData['data'][i].title).to.include(\"From Postman\");",
									"        }",
									"    });",
									"} else {",
									"    pm.test(\"Verify notes filter by title\", () => {",
									"        throw new Error(\"No data with filter is found\");",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9fc5bea2-c9eb-4c50-8700-bd071c13ade1",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5043fc8f-1ec0-4e68-add7-3b8a09ebfce1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/notes?page-size=50&page-number=1&patientExternalId={{patientId}}&filter-by=title::From Postman",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"notes"
							],
							"query": [
								{
									"key": "page-size",
									"value": "50"
								},
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "patientExternalId",
									"value": "{{patientId}}"
								},
								{
									"key": "filter-by",
									"value": "title::From Postman"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter by isConfidential",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"if (jsonData.totalCount > 0) {",
									"    tests[\"Total number of note(s): \" + jsonData.totalCount] = pm.expect(jsonData.totalCount).to.be.eql(jsonData['data'].length);",
									"",
									"    pm.test(\"Verify notes filter by isConfidential\", () => {",
									"        for (let i = 0; i < jsonData['data'].length; i++) {",
									"            tests[\"Note# \" + (i + 1) + \" is confidential\"] = pm.expect(jsonData['data'][i].isConfidential).to.eql(true);",
									"        }",
									"    });",
									"} else {",
									"    pm.test(\"Verify notes filter by isConfidential\", () => {",
									"        throw new Error(\"No data with filter is found\");",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"id": "728e12f5-7e0e-4cd7-a5f6-eaeedf42830f"
							}
						}
					],
					"id": "64a287fd-aedb-45ba-a8bc-1f7f793c4f1a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/notes?page-size=50&page-number=1&patientExternalId={{patientId}}&filter-by=is-confidential::true",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"notes"
							],
							"query": [
								{
									"key": "page-size",
									"value": "50"
								},
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "patientExternalId",
									"value": "{{patientId}}"
								},
								{
									"key": "filter-by",
									"value": "is-confidential::true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get notes by patient id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e4600d29-7970-4a70-bea3-c2f7421f90a1",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"if (jsonData.totalCount > 0) {",
									"    pm.test(\"Verify notes filter by patient id\", () => {",
									"        for (let i = 0; i < jsonData['data'].length; i++) {",
									"            tests[\"Note# \" + (i + 1) + \" has patient id as \" + jsonData['data'][i].patientExternalId] = pm.expect(jsonData['data'][i].patientExternalId).to.eql(pm.environment.get(\"patientId\"));",
									"        }",
									"    });",
									"} else {",
									"    pm.test(\"Verify notes filter by patient id\", () => {",
									"        throw new Error(\"No data with filter is found\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "fb8fcdd1-5958-4d86-84bd-8ab3d6b8d2d2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/notes?page-size=20&page-number=1&patientExternalId={{patientId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"notes"
							],
							"query": [
								{
									"key": "page-size",
									"value": "20"
								},
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "patientExternalId",
									"value": "{{patientId}}"
								},
								{
									"key": "filter-by",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "17891776-cd3e-4c52-9039-965ef81984ea",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "28f9b688-047a-476d-8b8e-135d5ae566fc"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "25003be5-990a-4d25-8fa2-464749e6b62a"
					}
				}
			]
		},
		{
			"name": "Clinical measurements",
			"item": [
				{
					"name": "Add Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0c7c48e7-7656-446c-a7c9-2d41d78fa8fc",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify id is generated\", function () {",
									"    pm.expect(jsonData.id).length.greaterThan(0);",
									"});",
									"",
									"pm.environment.set(\"patientId\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8947b42e-dda7-4f2e-bf3f-4e75d5cf68c3",
								"exec": [
									"let ld = require('lodash');",
									"",
									"let gendersList = [",
									"    \"Cis-gender male\",",
									"    \"Cis-gender female\",",
									"    \"Non-binary\",",
									"    \"Other\",",
									"    \"Unknown\",",
									"    \"Transgender male\",",
									"    \"Transgender female\"",
									"];",
									"",
									"let pronounsList = [",
									"    \"He/Him/His\",",
									"    \"She/Her/Hers\",",
									"    \"They/Them/Theirs\",",
									"    \"Other\"",
									"];",
									"",
									"let ethnicitiesList = [",
									"    \"Asian\",",
									"    \"Black/African American\",",
									"    \"White/Caucasian\",",
									"    \"Hispanic/Latinx\",",
									"    \"Native American, Indian American, or Alaska Native\",",
									"    \"Native Hawaiian or other Pacific Islander\",",
									"    \"Middle Eastern or North African\",",
									"    \"Prefer not to answer\",",
									"    \"Other\"",
									"];",
									"",
									"let languagesList = [",
									"    \"English\",",
									"    \"Spanish\",",
									"    \"Chinese\",",
									"    \"French\",",
									"    \"Tagalog\",",
									"    \"Vietnamese\",",
									"    \"Korean\",",
									"    \"German\",",
									"    \"Russian\",",
									"    \"Italian\",",
									"    \"Portuguese\",",
									"    \"Polish\",",
									"    \"Japanese\",",
									"    \"Persian\",",
									"    \"Greek\",",
									"    \"Serbo-Croatian\",",
									"    \"Armenian\",",
									"    \"Yiddish\",",
									"    \"American Sign Language (ASL)\"",
									"];",
									"",
									"let sexList = [",
									"    \"Male\",",
									"    \"Female\"",
									"];",
									"",
									"let timezonesList = [",
									"    \"Hawaii Standard Time\",",
									"    \"Hawaii-Aleutian Time\",",
									"    \"Alaska Time\",",
									"    \"Pacific Time\",",
									"    \"Arizona\",",
									"    \"Mountain Time\",",
									"    \"Central Time\",",
									"    \"Eastern Time\"",
									"];",
									"",
									"let contactPreferences = [\"Email\", \"No preference\", \"Phone\", \"Unknown\"];",
									"",
									"let statesList = [\"AK\", \"AL\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"DC\", \"FL\", \"GA\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"OH\", \"OK\", \"OR\", \"PA\", \"PR\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\", \"Outside US\", \"Unknown\"];",
									"",
									"let addressLine2List = [\"Apt 1\", \"Apt 2\", \"Apt 3\", \"Unit #1\", \"Unit #2\", \"Unit #3\", \"Apt 2L\", \"Apt 2R\"];",
									"",
									"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let lastName = pm.variables.replaceIn('{{$randomLastName}}');",
									"let chosenName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let email = \"qa\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
									"let zip = Math.floor(10000 + Math.random() * 90000);",
									"",
									"//Generate random Date of Birth in YYYY-MM-DD Format",
									"function randomDate(start, end) {",
									"    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));",
									"}",
									"let date = randomDate(new Date(1990, 00, 01), new Date());",
									"let dateOfBirth = date.getFullYear() + '-' + (\"0\" + (date.getMonth() + 1)).slice(-2) + '-' + (\"0\" + date.getDate()).slice(-2);",
									"",
									"//Save the variables to be used in next request for validation",
									"pm.environment.set(\"patientFirstName\", firstName);",
									"pm.environment.set(\"patientLastName\", lastName);",
									"pm.environment.set(\"patientEmail\", email);",
									"pm.environment.set(\"patientPhoneNumber\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));",
									"pm.environment.set(\"patientChosenName\", chosenName);",
									"pm.environment.set(\"patientDateOfBirth\", dateOfBirth);",
									"pm.environment.set(\"patientAddressLine1\", pm.variables.replaceIn('{{$randomStreetAddress}}'));",
									"pm.environment.set(\"patientAddressLine2\", ld.sample(addressLine2List));",
									"pm.environment.set(\"patientCity\", pm.variables.replaceIn('{{$randomCity}}'));",
									"pm.environment.set(\"patientState\", ld.sample(statesList));",
									"pm.environment.set(\"patientCountry\", \"US\");",
									"pm.environment.set(\"patientZip\", zip.toString());",
									"pm.environment.set(\"patientLatitude\", pm.variables.replaceIn('{{$randomLatitude}}'));",
									"pm.environment.set(\"patientLongitude\", pm.variables.replaceIn('{{$randomLongitude}}'));",
									"pm.environment.set(\"patientEthnicities\", JSON.stringify(ld.sampleSize(ethnicitiesList, 2).sort()));",
									"pm.environment.set(\"patientLanguages\", JSON.stringify(ld.sampleSize(languagesList, 2).sort()));",
									"pm.environment.set(\"patientGenderOnRecord\", ld.sample(gendersList));",
									"pm.environment.set(\"patientGenderOffRecord\", ld.sample(gendersList));",
									"pm.environment.set(\"patientPronounsOnRecord\", ld.sample(pronounsList));",
									"pm.environment.set(\"patientPronounsOffRecord\", ld.sample(pronounsList));",
									"pm.environment.set(\"patientSex\", ld.sample(sexList));",
									"pm.environment.set(\"patientTimezone\", ld.sample(timezonesList));",
									"pm.environment.set(\"patientContactPreferences\", JSON.stringify(ld.sampleSize(contactPreferences, 2).sort()));"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ae01e5a7-a874-49fa-b95d-18e7b04be764",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{patientFirstName}}\",\n    \"lastName\": \"{{patientLastName}}\",\n    \"dateOfBirth\": \"{{patientDateOfBirth}}\",\n    \"email\": \"{{patientEmail}}\",\n    \"contactPreferences\": {{patientContactPreferences}},\n    \"ethnicities\": {{patientEthnicities}},\n    \"phoneNumber\": \"{{patientPhoneNumber}}\",\n    \"chosenName\": \"{{patientChosenName}}\",\n    \"languages\": {{patientLanguages}},\n    \"genderOnRecord\": \"{{patientGenderOnRecord}}\",\n    \"genderOffRecord\": \"{{patientGenderOffRecord}}\",\n    \"pronounsOnRecord\": \"{{patientPronounsOnRecord}}\",\n    \"pronounsOffRecord\": \"{{patientPronounsOffRecord}}\",\n    \"sex\": \"{{patientSex}}\",\n    \"timezone\": \"{{patientTimezone}}\",\n    \"latitude\": \"{{patientLatitude}}\",\n    \"longitude\": \"{{patientLongitude}}\",\n    \"addressLine1\": \"{{patientAddressLine1}}\",\n    \"addressLine2\": \"{{patientAddressLine2}}\",\n    \"city\": \"{{patientCity}}\",\n    \"country\": \"{{patientCountry}}\",\n    \"state\": \"{{patientState}}\",\n    \"zip\": \"{{patientZip}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/patients",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Provider",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "09b2d025-d49e-44d8-9c1c-256f10f071cb",
								"exec": [
									"let ld = require('lodash');",
									"let timezones = [\"Hawaii Standard Time\", \"Hawaii-Aleutian Time\", \"Alaska Time\", \"Pacific Time\", \"Arizona\", \"Mountain Time\", \"Central Time\", \"Eastern Time\", \"London/UK Time\"];",
									"let regions = [\"Northeast\", \"Southwest\", \"Southeast\", \"West\", \"Midwest\"];",
									"let providerTypes = [",
									"        \"Admissions Specialist\",",
									"        \"Analyst\",",
									"        \"Billing Specialist\",",
									"        \"Care Coordinator\",",
									"        \"Client Success\",",
									"        \"Clinical Ops\",",
									"        \"Clinical Supervisor\",",
									"        \"Dietitian\",",
									"        \"Family Experience Navigator\",",
									"        \"Family Mentor\",",
									"        \"Insurance Specialist\",",
									"        \"Nurse Practitioner\",",
									"        \"Patient Service Representative\",",
									"        \"Peer Mentor\",",
									"        \"Physician\",",
									"        \"Physician Assistant\",",
									"        \"Practice Coordinator\",",
									"        \"Product Support\",",
									"        \"Provider Partnerships\",",
									"        \"Psychiatrist\",",
									"        \"Therapist\"",
									"    ];",
									"",
									"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let lastName = pm.variables.replaceIn('{{$randomLastName}}')",
									"let email = \"qa\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
									"let phoneNumber = pm.variables.replaceIn('{{$randomPhoneNumber}}');",
									"",
									"let supervisorId = \"\";",
									"let capacities = [\"full-time\", \"part-time\"];",
									"let capacity = ld.sample(capacities);",
									"",
									"let hoursPerWeek;",
									"if (capacity == \"full-time\") {",
									"    hoursPerWeek = 40;",
									"} else {",
									"    hoursPerWeek = Math.floor(Math.random() * 90);",
									"}",
									"",
									"let accountStatus = \"active\";",
									"",
									"let permissions = [\"admin\", \"maud\", \"both\"];",
									"let permission = ld.sample(permissions);",
									"",
									"let roles = [\"admin:role:manage-users\",",
									"    \"maud:role:general-access\",",
									"    \"maud:role:advanced-access\"];",
									"",
									"if (permission === \"admin\") {",
									"    roles = [\"\\\"admin:role:manage-users\\\"\"];",
									"} else if (permission === \"maud\") {",
									"    roles = [\"\\\"maud:role:general-access\\\"\", \"\\\"maud:role:advanced-access\\\"\"];",
									"} else if (permission === \"both\") {",
									"    roles = [\"\\\"admin:role:manage-users\\\"\", \"\\\"maud:role:general-access\\\"\", \"\\\"maud:role:advanced-access\\\"\"];",
									"}",
									"",
									"pm.environment.set(\"providerFirstName\", firstName);",
									"pm.environment.set(\"providerLastName\", lastName);",
									"pm.environment.set(\"providerEmail\", email);",
									"pm.environment.set(\"providerPhoneNumber\", phoneNumber);",
									"pm.environment.set(\"providerTimezone\", ld.sample(timezones));",
									"pm.environment.set(\"providerRegion\", ld.sample(regions));",
									"pm.environment.set(\"providerType\", ld.sample(providerTypes));",
									"pm.environment.set(\"providerCapacity\", capacity);",
									"pm.environment.set(\"providerHoursPerWeek\", hoursPerWeek);",
									"pm.environment.set(\"providerAccountStatus\", accountStatus);",
									"pm.environment.set(\"providerRoles\", roles);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5810f953-c08c-4530-a830-82b7c4c22b71",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify id is generated\", function () {",
									"    pm.expect(jsonData.id).length.greaterThan(0);",
									"});",
									"",
									"pm.environment.set(\"providerId\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a76b3d98-8242-4da5-8b61-f0c4a04a00b8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{providerFirstName}}\",\n    \"lastName\": \"{{providerLastName}}\",\n    \"email\": \"{{providerEmail}}\",\n    \"phoneNumber\": \"{{providerPhoneNumber}}\",\n    \"timezone\": \"{{providerTimezone}}\",\n    \"region\": \"{{providerRegion}}\",\n    \"providerType\": \"{{providerType}}\",\n    \"capacity\": \"{{providerCapacity}}\",\n    \"hoursPerWeek\": \"{{providerHoursPerWeek}}\",\n    \"accountStatus\": \"{{providerAccountStatus}}\",\n    \"roles\": [\n        {{providerRoles}}\n    ],\n    \"supervisorId\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/providers",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"providers"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetObservationInterpretations",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fba0f50e-1905-4795-ba7b-5a3a19283e88",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b5ae1d83-f50c-4664-8ab3-72c6216edcad",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"let interpretations = [",
									"        {",
									"            \"interpretationId\": 1,",
									"            \"interpretation\": \"Normal\"",
									"        },",
									"        {",
									"            \"interpretationId\": 2,",
									"            \"interpretation\": \"Abnormal\"",
									"        },",
									"        {",
									"            \"interpretationId\": 3,",
									"            \"interpretation\": \"High\"",
									"        },",
									"        {",
									"            \"interpretationId\": 4,",
									"            \"interpretation\": \"Low\"",
									"        },",
									"        {",
									"            \"interpretationId\": 5,",
									"            \"interpretation\": \"N/A\"",
									"        }",
									"    ];",
									"",
									"pm.test(\"Validate observation interpretations values\", function () {",
									"    pm.expect(jsonData).to.eql(interpretations);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5b0905d0-9549-4b14-a4f2-e0ef18ef9c1f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/clinical-data/patients/clinical-profile/observation-interpretations",
							"host": [
								"{{host}}"
							],
							"path": [
								"clinical-data",
								"patients",
								"clinical-profile",
								"observation-interpretations"
							],
							"query": [
								{
									"key": "filter-by",
									"value": "observation-status::Void",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetObservationPositions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2a8b22bd-ce2d-4941-976c-2d241a4624e5",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f8ccec8b-2979-4ca0-8efe-ec0b987b712a",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"let positions = [",
									"    {",
									"        \"positionId\": 1,",
									"        \"positionName\": \"Standing\",",
									"        \"active\": true",
									"    },",
									"    {",
									"        \"positionId\": 2,",
									"        \"positionName\": \"Lying down\",",
									"        \"active\": true",
									"    },",
									"    {",
									"        \"positionId\": 3,",
									"        \"positionName\": \"Sitting\",",
									"        \"active\": true",
									"    },",
									"    {",
									"        \"positionId\": 34,",
									"        \"positionName\": \"Unknown\",",
									"        \"active\": true",
									"    }",
									"];",
									"",
									"pm.test(\"Validate observation positions values\", function () {",
									"    pm.expect(jsonData).to.eql(positions);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7995429c-9ee1-40b0-a25e-b0a06dfcecfa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/clinical-data/patients/clinical-profile/observation-positions",
							"host": [
								"{{host}}"
							],
							"path": [
								"clinical-data",
								"patients",
								"clinical-profile",
								"observation-positions"
							],
							"query": [
								{
									"key": "filter-by",
									"value": "observation-status::Void",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetObservationSources",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ba3878d8-f699-46f3-a903-7194a5e8b0c0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7b2604d0-3b39-47d0-a37e-62ca6d23d7d0",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"let sources = [",
									"    {",
									"        \"sourceId\": 1,",
									"        \"source\": \"Manual\"",
									"    },",
									"    {",
									"        \"sourceId\": 2,",
									"        \"source\": \"BodyTrace\"",
									"    }",
									"];",
									"",
									"pm.test(\"Validate observation sources values\", function () {",
									"    pm.expect(jsonData).to.eql(sources);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ab098724-956b-4afa-8437-6bc89bebf3aa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/clinical-data/patients/clinical-profile/observation-sources",
							"host": [
								"{{host}}"
							],
							"path": [
								"clinical-data",
								"patients",
								"clinical-profile",
								"observation-sources"
							],
							"query": [
								{
									"key": "filter-by",
									"value": "observation-status::Void",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetObservationStatus",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3c50ea62-c682-476c-bfe3-75f5f5d182fe",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b199f6dd-b333-40b3-aa29-56164ce9c258",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"let sources = [",
									"    {",
									"        \"statusId\": 1,",
									"        \"status\": \"Final\"",
									"    },",
									"    {",
									"        \"statusId\": 2,",
									"        \"status\": \"Corrected\"",
									"    },",
									"    {",
									"        \"statusId\": 3,",
									"        \"status\": \"Void\"",
									"    }",
									"];",
									"",
									"pm.test(\"Validate observation statuses values\", function () {",
									"    pm.expect(jsonData).to.eql(sources);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "65c03b21-2845-4371-b10a-de9cdc9ac18c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/clinical-data/patients/clinical-profile/observation-statuses",
							"host": [
								"{{host}}"
							],
							"path": [
								"clinical-data",
								"patients",
								"clinical-profile",
								"observation-statuses"
							],
							"query": [
								{
									"key": "filter-by",
									"value": "observation-status::Void",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetObservationTypes",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "31672283-9824-4436-92c0-f13f95be835e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8685b8e4-7a36-4ab4-a0e6-95bc57302864",
								"exec": [
									"let ld = require('lodash');",
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"let types = [",
									"    {",
									"        \"typeId\": 1,",
									"        \"type\": \"Heart rate\"",
									"    },",
									"    {",
									"        \"typeId\": 6,",
									"        \"type\": \"Blood pressure\"",
									"    },",
									"    {",
									"        \"typeId\": 4,",
									"        \"type\": \"Weight\"",
									"    },",
									"    {",
									"        \"typeId\": 5,",
									"        \"type\": \"Height\"",
									"    }",
									"];",
									"",
									"pm.test(\"Validate observation types values\", function () {",
									"",
									"    for(let i=0; i<jsonData.length; i++){",
									"        delete jsonData[i].typeId;",
									"        delete types[i].typeId;",
									"    }",
									"    pm.expect(ld.orderBy(jsonData, ['type'], ['asc'])).to.eql(ld.orderBy(types, ['type'], ['asc']));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f0dccf96-4d91-431e-814d-0115e53e7c0c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/clinical-data/patients/clinical-profile/observation-types",
							"host": [
								"{{host}}"
							],
							"path": [
								"clinical-data",
								"patients",
								"clinical-profile",
								"observation-types"
							],
							"query": [
								{
									"key": "filter-by",
									"value": "observation-status::Void",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetObservationVoidReasons",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fbe5a016-4129-42f6-8e11-59b8681621d2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ea3d63b7-82f0-4c15-a8dd-a6d81aa4f24a",
								"exec": [
									"let ld = require('lodash');",
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"let voidReasons = [",
									"    {",
									"        \"label\": \"Duplicate\",",
									"        \"isActive\": true",
									"    },",
									"    {",
									"        \"label\": \"Made in error\",",
									"        \"isActive\": true",
									"    }",
									"];",
									"",
									"pm.test(\"Validate observation voidReasons values\", function () {",
									"    ",
									"    for(let i=0; i<jsonData.length; i++) ",
									"        delete jsonData[i].externalId;",
									"",
									"    pm.expect(ld.orderBy(jsonData, ['label'], ['asc'])).to.eql(ld.orderBy(voidReasons, ['label'], ['asc']));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "07b74d04-2ac4-4ce9-a359-aba4ae8d8891",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/clinical-data/patients/observations/void-reasons",
							"host": [
								"{{host}}"
							],
							"path": [
								"clinical-data",
								"patients",
								"observations",
								"void-reasons"
							],
							"query": [
								{
									"key": "filter-by",
									"value": "observation-status::Void",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Register bodytrace device - scale",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var date_timestamp = new Date().toISOString();",
									"",
									"pm.environment.set(\"scale_device_id\", \"device_scale\"+date_timestamp);"
								],
								"type": "text/javascript",
								"id": "cc59527d-7c23-43fc-b97d-c49368a8e7cd"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "e0f6a115-a510-409a-90b0-20abb1030a7e"
							}
						}
					],
					"id": "038f3236-e9b3-4f48-bc1b-49ed4d07fad3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"deviceId\": \"{{scale_device_id}}\",\n    \"deviceType\": \"Scale\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/clinical-data/patients/{{patientId}}/bodytrace/devices",
							"host": [
								"{{host}}"
							],
							"path": [
								"clinical-data",
								"patients",
								"{{patientId}}",
								"bodytrace",
								"devices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register bodytrace device - BP",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"var date_timestamp = new Date().toISOString();",
									"",
									"pm.environment.set(\"BP_device_id\", \"device_scale\"+date_timestamp);"
								],
								"type": "text/javascript",
								"id": "bb3f7287-0fdf-438b-9f1f-0d379a619cbe"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "ab2cc231-ea7c-4fc5-85c9-5cda7cdc2240"
							}
						}
					],
					"id": "5bb2ec47-cdac-41e4-940e-02fd9ba3ce18",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"deviceId\": \"{{BP_device_id}}\",\n    \"deviceType\": \"Blood pressure monitor\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/clinical-data/patients/{{patientId}}/bodytrace/devices",
							"host": [
								"{{host}}"
							],
							"path": [
								"clinical-data",
								"patients",
								"{{patientId}}",
								"bodytrace",
								"devices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post to BodyTrace facing endpoint (scale)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a66fffe2-981b-4cf6-b7a4-fda5cbcd3a75"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "6eea3af2-9818-42ed-8c73-22f9e8fb80ad"
							}
						}
					],
					"id": "54db9751-7b47-4836-bab6-fb7a6b29abb3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "9OR+aK=okQww3jb5",
									"type": "string"
								},
								{
									"key": "username",
									"value": "]2pUKX5Eq%l$pGQ#",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"imei\":\"{{scale_device_id}}\",\n    \"ts\":1653581038922,\n    \"batteryVoltage\":5940,\n    \"signalStrength\":90,\n    \"values\":{\n        \"unit\": \"lbs\",\n        \"tare\":0,\n        \"weight\":49\n    },\n    \"rssi\":68,\n    \"deviceId\":321312312\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://bodytrace-dev.np.equip.health/records",
							"protocol": "https",
							"host": [
								"bodytrace-dev",
								"np",
								"equip",
								"health"
							],
							"path": [
								"records"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post to BodyTrace facing endpoint (blood pressure monitor)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c020ddde-1deb-4530-81b3-763d6599d72f"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "276728d0-1e23-4285-b1fc-197a82305226"
							}
						}
					],
					"id": "ad10cf30-e49b-4db9-934f-78825bc8bb60",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "]2pUKX5Eq%l$pGQ#",
									"type": "string"
								},
								{
									"key": "password",
									"value": "9OR+aK=okQww3jb5",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"imei\":\"{{BP_device_id}}\",\n    \"ts\":1653581039922,\n    \"batteryVoltage\":5940,\n    \"signalStrength\":90,\n    \"values\":{\n        \"systolic\":16400,\n        \"diastolic\":10533,\n        \"pulse\":88,\n        \"unit\":1,\n        \"irregular\":0\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://bodytrace-dev.np.equip.health/records",
							"protocol": "https",
							"host": [
								"bodytrace-dev",
								"np",
								"equip",
								"health"
							],
							"path": [
								"records"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save observation HeartRate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e75ef285-40f5-40a8-808e-c0d6d5b9f262",
								"exec": [
									"",
									"pm.environment.set(\"utc_time\" , (new Date()).toISOString());",
									"",
									"observation_interpretations = [\"Normal\",\"Abnormal\",\"High\",\"Low\",\"N/A\"];",
									"//observation_source = [\"Manual\",\"BodyTrace\"];",
									"status = [\"Final\",\"Corrected\"];",
									"observation_types = [\"Heart rate\",\"Blood pressure (systolic)\",\"Blood pressure (diastolic)\",\"Weight\",\"Height\"];",
									"observation_positions = [\"Standing\",\"Lying down\",\"Sitting\"];",
									"",
									"pm.environment.set(\"observation_interpretation\", observation_interpretations[Math.floor(Math.random() * observation_interpretations.length)]);",
									"pm.environment.set(\"observation_status\", status[Math.floor(Math.random() * status.length)]);",
									"pm.environment.set(\"observation_type\", observation_types[Math.floor(Math.random() * observation_types.length)]);",
									"pm.environment.set(\"observation_position\", observation_positions[Math.floor(Math.random() * observation_positions.length)]);",
									"",
									"//pm.environment.set(\"providerId\", \"f64a7075-a2bb-4c6c-8d2d-b8ac9a7f1ffc\");",
									"pm.environment.set(\"providerUserName\", pm.environment.get(\"providerFirstName\")+\" \"+pm.environment.get(\"providerLastName\"));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ade1bdde-adaf-4e75-b527-e96f0298f67b",
								"exec": [
									"var text = pm.response.text();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify Observation ExternalId is generated\", function () {",
									"    pm.expect(text).length.greaterThan(0);",
									"});",
									"",
									"pm.environment.set(\"heartRatetObservationid\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "94003d9c-617e-42e1-a2fb-63a8de2967df",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"observationDatetime\": \"{{utc_time}}\",\n  \"type\": \"Heart rate\",\n  \"value\": 60,\n  \"unit\": \"bpm\",\n  \"interpretation\": \"Low\",\n  \"source\": \"Manual\",\n  \"status\": \"Final\",\n  \"createdBy\": \"{{providerUserName}}\",\n  \"updatedByUserId\": \"{{providerId}}\",\n  \"position\": \"Standing\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/clinical-data/patients/{{patientId}}/clinical-profile/observations",
							"host": [
								"{{host}}"
							],
							"path": [
								"clinical-data",
								"patients",
								"{{patientId}}",
								"clinical-profile",
								"observations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save observation Weight",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"pm.environment.set(\"utc_time\" , (new Date()).toISOString());",
									"",
									"observation_interpretations = [\"Normal\",\"Abnormal\",\"High\",\"Low\",\"N/A\"];",
									"//observation_source = [\"Manual\",\"BodyTrace\"];",
									"status = [\"Final\",\"Corrected\"];",
									"observation_types = [\"Heart rate\",\"Blood pressure (systolic)\",\"Blood pressure (diastolic)\",\"Weight\",\"Height\"];",
									"observation_positions = [\"Standing\",\"Lying down\",\"Sitting\"];",
									"",
									"pm.environment.set(\"observation_interpretation\", observation_interpretations[Math.floor(Math.random() * observation_interpretations.length)]);",
									"pm.environment.set(\"observation_status\", status[Math.floor(Math.random() * status.length)]);",
									"pm.environment.set(\"observation_type\", observation_types[Math.floor(Math.random() * observation_types.length)]);",
									"pm.environment.set(\"observation_position\", observation_positions[Math.floor(Math.random() * observation_positions.length)]);"
								],
								"type": "text/javascript",
								"id": "d6b504cf-5c70-42bc-bc74-ca6d5674cca9"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var text = pm.response.text();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify Observation ExternalId is generated\", function () {",
									"    pm.expect(text).length.greaterThan(0);",
									"});",
									"",
									"pm.environment.set(\"weightObservationid\", pm.response.text());"
								],
								"type": "text/javascript",
								"id": "6ccae99f-e74b-44b8-a2ea-aa7ac8f728ad"
							}
						}
					],
					"id": "300567db-0dd3-497c-b1b1-c6b6faf80c35",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"observationDatetime\": \"{{utc_time}}\",\n  \"type\": \"Weight\",\n  \"value\": 60,\n  \"unit\": \"lbs\",\n  \"interpretation\": \"Normal\",\n  \"source\": \"Manual\",\n  \"status\": \"Corrected\",\n  \"createdBy\": \"{{providerUserName}}\",\n  \"updatedByUserId\": \"{{providerId}}\",\n  \"position\": \"Sitting\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/clinical-data/patients/{{patientId}}/clinical-profile/observations",
							"host": [
								"{{host}}"
							],
							"path": [
								"clinical-data",
								"patients",
								"{{patientId}}",
								"clinical-profile",
								"observations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save observation Height",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"pm.environment.set(\"utc_time\" , (new Date()).toISOString());",
									"",
									"observation_interpretations = [\"Normal\",\"Abnormal\",\"High\",\"Low\",\"N/A\"];",
									"//observation_source = [\"Manual\",\"BodyTrace\"];",
									"status = [\"Final\",\"Corrected\"];",
									"observation_types = [\"Heart rate\",\"Blood pressure (systolic)\",\"Blood pressure (diastolic)\",\"Weight\",\"Height\"];",
									"observation_positions = [\"Standing\",\"Lying down\",\"Sitting\"];",
									"",
									"pm.environment.set(\"observation_interpretation\", observation_interpretations[Math.floor(Math.random() * observation_interpretations.length)]);",
									"pm.environment.set(\"observation_status\", status[Math.floor(Math.random() * status.length)]);",
									"pm.environment.set(\"observation_type\", observation_types[Math.floor(Math.random() * observation_types.length)]);",
									"pm.environment.set(\"observation_position\", observation_positions[Math.floor(Math.random() * observation_positions.length)]);"
								],
								"type": "text/javascript",
								"id": "d43ddea0-4755-46d1-bdd9-31b23ca0ba0e"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var text = pm.response.text();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify Observation ExternalId is generated\", function () {",
									"    pm.expect(text).length.greaterThan(0);",
									"});",
									"",
									"pm.environment.set(\"heightObservationid\", pm.response.text());"
								],
								"type": "text/javascript",
								"id": "5df097ef-2475-481d-bd38-e48589e55337"
							}
						}
					],
					"id": "662a1be8-ea0d-4590-89a4-af92d3021b8e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"observationDatetime\": \"{{utc_time}}\",\n  \"type\": \"Height\",\n  \"value\": 160.04,\n  \"unit\": \"in\",\n  \"interpretation\": \"Normal\",\n  \"source\": \"Manual\",\n  \"status\": \"Corrected\",\n  \"createdBy\": \"{{providerUserName}}\",\n  \"updatedByUserId\": \"{{providerId}}\",\n  \"position\": \"Lying down\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/clinical-data/patients/{{patientId}}/clinical-profile/observations",
							"host": [
								"{{host}}"
							],
							"path": [
								"clinical-data",
								"patients",
								"{{patientId}}",
								"clinical-profile",
								"observations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save observation Blood pressure",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"pm.environment.set(\"utc_time\" , (new Date()).toISOString());",
									"",
									"observation_interpretations = [\"Normal\",\"Abnormal\",\"High\",\"Low\",\"N/A\"];",
									"//observation_source = [\"Manual\",\"BodyTrace\"];",
									"status = [\"Final\",\"Corrected\"];",
									"observation_types = [\"Heart rate\",\"Blood pressure (systolic)\",\"Blood pressure (diastolic)\",\"Weight\",\"Height\"];",
									"observation_positions = [\"Standing\",\"Lying down\",\"Sitting\"];",
									"",
									"pm.environment.set(\"observation_interpretation\", observation_interpretations[Math.floor(Math.random() * observation_interpretations.length)]);",
									"pm.environment.set(\"observation_status\", status[Math.floor(Math.random() * status.length)]);",
									"pm.environment.set(\"observation_type\", observation_types[Math.floor(Math.random() * observation_types.length)]);",
									"pm.environment.set(\"observation_position\", observation_positions[Math.floor(Math.random() * observation_positions.length)]);"
								],
								"type": "text/javascript",
								"id": "7cad8a9a-c7f3-44b9-b137-d35bf448417a"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var text = pm.response.text();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify Observation ExternalId is generated\", function () {",
									"    pm.expect(text).length.greaterThan(0);",
									"});",
									"",
									"pm.environment.set(\"BPSObservationid\", pm.response.text());"
								],
								"type": "text/javascript",
								"id": "bc6294ce-9aa0-4a5e-9d48-6b72b2a68c3b"
							}
						}
					],
					"id": "ee7047ee-8a7d-46ef-8ce5-cf7c71047362",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"observationDatetime\": \"{{utc_time}}\",\n \"type\": \"Blood pressure\",\n  \"value\": 120.32,\n  \"secondaryValue\": 86.04,\n  \"unit\": \"mmHG\",\n  \"interpretation\": \"Normal\",\n  \"source\": \"Manual\",\n  \"status\": \"Final\",\n  \"createdBy\": \"{{providerUserName}}\",\n  \"updatedByUserId\": \"{{providerId}}\",\n  \"position\": \"Sitting\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/clinical-data/patients/{{patientId}}/clinical-profile/observations",
							"host": [
								"{{host}}"
							],
							"path": [
								"clinical-data",
								"patients",
								"{{patientId}}",
								"clinical-profile",
								"observations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Void observation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"pm.environment.set(\"utc_time\" , (new Date()).toISOString());",
									"",
									"observation_interpretations = [\"Normal\",\"Abnormal\",\"High\",\"Low\",\"N/A\"];",
									"//observation_source = [\"Manual\",\"BodyTrace\"];",
									"status = [\"Final\",\"Corrected\"];",
									"observation_types = [\"Heart rate\",\"Blood pressure (systolic)\",\"Blood pressure (diastolic)\",\"Weight\",\"Height\"];",
									"observation_positions = [\"Standing\",\"Lying down\",\"Sitting\"];",
									"",
									"pm.environment.set(\"observation_interpretation\", observation_interpretations[Math.floor(Math.random() * observation_interpretations.length)]);",
									"pm.environment.set(\"observation_status\", status[Math.floor(Math.random() * status.length)]);",
									"pm.environment.set(\"observation_type\", observation_types[Math.floor(Math.random() * observation_types.length)]);",
									"pm.environment.set(\"observation_position\", observation_positions[Math.floor(Math.random() * observation_positions.length)]);"
								],
								"type": "text/javascript",
								"id": "5a467df3-1865-4035-aa9c-4679f17680ad"
							}
						}
					],
					"id": "a4db86cf-0ddd-4568-892c-37985408e46b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"observationDatetime\": \"{{utc_time}}\",\n  \"type\": \"Weight\",\n  \"value\": 100,\n  \"unit\": \"lbs\",\n  \"interpretation\": \"High\",\n  \"source\": \"Manual\",\n  \"status\": \"Void\",\n  \"createdBy\": \"Balakrishna Deema\",\n  \"updatedByUserId\": \"42bd1c96-995d-45c0-bd0b-cee0e167b864\",\n  \"position\": \"Standing\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/clinical-data/patients/{{patientId}}/clinical-profile/observations/{{weightObservationid}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"clinical-data",
								"patients",
								"{{patientId}}",
								"clinical-profile",
								"observations",
								"{{weightObservationid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter ClinicalMeasurement by Weight",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e38c9c23-6402-4472-b7b2-57f11616b7ad"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"if (jsonData.totalCount > 0) {",
									"    tests[\"Total number of patient(s): \" + jsonData.totalCount] = pm.expect(jsonData.totalCount).to.be.eql(jsonData['data'].length);",
									"",
									"    pm.test(\"Verify observation filter by type-Weight\", () => {",
									"        for (let i = 0; i < jsonData['data'].length; i++) {",
									"            tests[\"Observation# \" + (i + 1) + \" is of type: \" + jsonData['data'][i].type] = pm.expect(jsonData['data'][i].type.toLowerCase()).to.include(\"Weight\".toLowerCase());",
									"        }",
									"    });",
									"} else {",
									"    pm.test(\"Verify patients filter by name\", () => {",
									"        tests[\"Total number of patient(s): \" + jsonData.count] = pm.expect(jsonData.count).to.be.eql(jsonData['providers'].length);",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"id": "af10f872-240e-4875-bb63-8a80983fde46"
							}
						}
					],
					"id": "53c603fd-08a6-4964-ab3a-59df4fe49247",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/composition/patients/{{patientId}}/observations?page-size=10&page-number=1&filter-by=observation-type::Weight",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"patients",
								"{{patientId}}",
								"observations"
							],
							"query": [
								{
									"key": "page-size",
									"value": "10"
								},
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "filter-by",
									"value": "observation-type::Weight"
								},
								{
									"key": "filter-by",
									"value": "observation-status::Void",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter ClinicalMeasurement by Height",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6e563d80-d856-4890-a287-b644fe23e8ac",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0a6445b7-c6e6-47d1-be46-92d54c552ce1",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"if (jsonData.totalCount > 0) {",
									"    tests[\"Total number of patient(s): \" + jsonData.totalCount] = pm.expect(jsonData.totalCount).to.be.eql(jsonData['data'].length);",
									"",
									"    pm.test(\"Verify observation filter by type-Height\", () => {",
									"        for (let i = 0; i < jsonData['data'].length; i++) {",
									"            tests[\"Observation# \" + (i + 1) + \" is of type: \" + jsonData['data'][i].type] = pm.expect(jsonData['data'][i].type.toLowerCase()).to.include(\"Height\".toLowerCase());",
									"        }",
									"    });",
									"} else {",
									"    pm.test(\"Verify patients filter by name\", () => {",
									"        tests[\"Total number of patient(s): \" + jsonData.count] = pm.expect(jsonData.count).to.be.eql(jsonData['providers'].length);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a6a8eacc-8b98-452a-bb7a-cdc7f80529f4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/composition/patients/{{patientId}}/observations?page-size=10&page-number=1&filter-by=observation-type::Height",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"patients",
								"{{patientId}}",
								"observations"
							],
							"query": [
								{
									"key": "page-size",
									"value": "10"
								},
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "filter-by",
									"value": "observation-type::Height"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter ClinicalMeasurement by Heart rate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "434033bd-8b1e-49fb-ae5f-521ce7dc2577",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bb13cb66-4c52-4706-9c49-964a1cbda76b",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"if (jsonData.totalCount > 0) {",
									"    tests[\"Total number of patient(s): \" + jsonData.totalCount] = pm.expect(jsonData.totalCount).to.be.eql(jsonData['data'].length);",
									"",
									"    pm.test(\"Verify observation filter by type-Heart rate\", () => {",
									"        for (let i = 0; i < jsonData['data'].length; i++) {",
									"            tests[\"Observation# \" + (i + 1) + \" is of type: \" + jsonData['data'][i].type] = pm.expect(jsonData['data'][i].type.toLowerCase()).to.include(\"Heart rate\".toLowerCase());",
									"        }",
									"    });",
									"} else {",
									"    pm.test(\"Verify patients filter by name\", () => {",
									"        tests[\"Total number of patient(s): \" + jsonData.count] = pm.expect(jsonData.count).to.be.eql(jsonData['providers'].length);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "23fe6889-6fa8-46a6-9da3-b0ed36f0bca9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/composition/patients/{{patientId}}/observations?page-size=10&page-number=1&filter-by=observation-type::Heart rate",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"patients",
								"{{patientId}}",
								"observations"
							],
							"query": [
								{
									"key": "page-size",
									"value": "10"
								},
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "filter-by",
									"value": "observation-type::Heart rate"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter ClinicalMeasurement by Blood pressure",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "731d05ce-9ea0-4f43-a784-245ebfa3d4f1",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9f26f9e1-8712-428f-a7de-cb9be1f7a84d",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"if (jsonData.totalCount > 0) {",
									"    tests[\"Total number of patient(s): \" + jsonData.totalCount] = pm.expect(jsonData.totalCount).to.be.eql(jsonData['data'].length);",
									"",
									"    pm.test(\"Verify observation filter by type-Blood pressure (systolic)\", () => {",
									"        for (let i = 0; i < jsonData['data'].length; i++) {",
									"            tests[\"Observation# \" + (i + 1) + \" is of type: \" + jsonData['data'][i].type] = pm.expect(jsonData['data'][i].type.toLowerCase()).to.include(\"Blood pressure\".toLowerCase());",
									"        }",
									"    });",
									"} else {",
									"    pm.test(\"Verify patients filter by name\", () => {",
									"        tests[\"Total number of patient(s): \" + jsonData.count] = pm.expect(jsonData.count).to.be.eql(jsonData['providers'].length);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "000ca1fc-55d2-418e-9abd-3b8eaf6a5a82",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/composition/patients/{{patientId}}/observations?page-size=10&page-number=1&filter-by=observation-type::Blood pressure",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"patients",
								"{{patientId}}",
								"observations"
							],
							"query": [
								{
									"key": "page-size",
									"value": "10"
								},
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "filter-by",
									"value": "observation-type::Blood pressure"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter ClinicalMeasurement by Status Final",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6590ad93-aa1a-44aa-bb46-135f7c91bc06",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "34d6d119-5af0-4462-a77c-7a80ebbf8f12",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"if (jsonData.totalCount > 0) {",
									"    tests[\"Total number of patient(s): \" + jsonData.totalCount] = pm.expect(jsonData.totalCount).to.be.eql(jsonData['data'].length);",
									"",
									"    pm.test(\"Verify observation filter by status-Final\", () => {",
									"        for (let i = 0; i < jsonData['data'].length; i++) {",
									"            tests[\"Observation# \" + (i + 1) + \" is of status: \" + jsonData['data'][i].status] = pm.expect(jsonData['data'][i].status.toLowerCase()).to.include(\"Final\".toLowerCase());",
									"        }",
									"    });",
									"} else {",
									"    pm.test(\"Verify patients filter by name\", () => {",
									"        tests[\"Total number of patient(s): \" + jsonData.count] = pm.expect(jsonData.count).to.be.eql(jsonData['providers'].length);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f884de1c-d506-460f-bdac-06c4e4da3e7e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/composition/patients/{{patientId}}/observations?page-size=10&page-number=1&filter-by=observation-status::Final",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"patients",
								"{{patientId}}",
								"observations"
							],
							"query": [
								{
									"key": "page-size",
									"value": "10"
								},
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "filter-by",
									"value": "observation-status::Final"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter ClinicalMeasurement by Status Corrected",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d4b6c5ec-d522-4f2b-8131-f1e5253f4319",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "75a31175-d98b-40af-9611-5be0cd281c79",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"if (jsonData.totalCount > 0) {",
									"    tests[\"Total number of patient(s): \" + jsonData.totalCount] = pm.expect(jsonData.totalCount).to.be.eql(jsonData['data'].length);",
									"",
									"    pm.test(\"Verify observation filter by status-Corrected\", () => {",
									"        for (let i = 0; i < jsonData['data'].length; i++) {",
									"            tests[\"Observation# \" + (i + 1) + \" is of Corrected: \" + jsonData['data'][i].status] = pm.expect(jsonData['data'][i].status.toLowerCase()).to.include(\"Corrected\".toLowerCase());",
									"        }",
									"    });",
									"} else {",
									"    pm.test(\"Verify patients filter by name\", () => {",
									"        tests[\"Total number of patient(s): \" + jsonData.count] = pm.expect(jsonData.count).to.be.eql(jsonData['providers'].length);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "efd417e3-9ef8-49eb-a5ab-4874ee5edf8c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/composition/patients/{{patientId}}/observations?page-size=10&page-number=1&filter-by=observation-status::Corrected",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"patients",
								"{{patientId}}",
								"observations"
							],
							"query": [
								{
									"key": "page-size",
									"value": "10"
								},
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "filter-by",
									"value": "observation-status::Corrected"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter ClinicalMeasurement by Status Void",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9cae255a-4d74-4cab-8bec-1d83f61f93dc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "713776e4-1d27-4cd7-8b49-4e1733c50a96",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"if (jsonData.totalCount > 0) {",
									"    tests[\"Total number of patient(s): \" + jsonData.totalCount] = pm.expect(jsonData.totalCount).to.be.eql(jsonData['data'].length);",
									"",
									"    pm.test(\"Verify observation filter by status-Void\", () => {",
									"        for (let i = 0; i < jsonData['data'].length; i++) {",
									"            tests[\"Observation# \" + (i + 1) + \" is of Void: \" + jsonData['data'][i].status] = pm.expect(jsonData['data'][i].status.toLowerCase()).to.include(\"Void\".toLowerCase());",
									"        }",
									"    });",
									"} else {",
									"    pm.test(\"Verify patients filter by name\", () => {",
									"        tests[\"Total number of patient(s): \" + jsonData.count] = pm.expect(jsonData.count).to.be.eql(jsonData['providers'].length);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5f1bef9f-eead-42c2-892a-65e60d75fd9f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/composition/patients/{{patientId}}/observations?page-size=10&page-number=1&filter-by=observation-status::Void",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"patients",
								"{{patientId}}",
								"observations"
							],
							"query": [
								{
									"key": "page-size",
									"value": "10"
								},
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "filter-by",
									"value": "observation-status::Void"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get clinical measurement history",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b8a76ba4-ae01-489d-a64f-c61c4239cea9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5168d9d2-dea0-488f-96c2-192d137a54f1",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});",
									"",
									"pm.test(\"Verify clinical measurement history\", function () {",
									"",
									"    pm.expect(jsonData[0].type).to.eql(\"Weight\");",
									"    pm.expect(jsonData[0].value).to.eql(100.0);",
									"    pm.expect(jsonData[0].interpretation).to.eql(\"High\");",
									"    pm.expect(jsonData[0].status).to.eql(\"Void\");",
									"    pm.expect(jsonData[0].position).to.eql(\"Standing\");",
									"",
									"    pm.expect(jsonData[1].type).to.eql(\"Weight\");",
									"    pm.expect(jsonData[1].value).to.eql(60.0);",
									"    pm.expect(jsonData[1].interpretation).to.eql(\"Normal\");",
									"    pm.expect(jsonData[1].status).to.eql(\"Corrected\");",
									"    pm.expect(jsonData[1].position).to.eql(\"Sitting\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ab9b117b-987b-47c5-8573-114a4382d0f5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/composition/patients/observations/history/{{weightObservationid}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"patients",
								"observations",
								"history",
								"{{weightObservationid}}"
							],
							"query": [
								{
									"key": "filter-by",
									"value": "observation-type::Weight",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get mBMI",
					"id": "8f7a4b65-79ff-40c0-914f-2577a5b35fc1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/clinical-data/median-bmi?age=13.3&sex=male",
							"host": [
								"{{host}}"
							],
							"path": [
								"clinical-data",
								"median-bmi"
							],
							"query": [
								{
									"key": "age",
									"value": "13.3"
								},
								{
									"key": "sex",
									"value": "male"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "853e919a-150e-4856-9b94-38be0286f7d7"
		},
		{
			"name": "Patients list page",
			"item": [
				{
					"name": "Add Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5444a7d8-7317-46d5-b14a-0c4342d1be6a",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify id is generated\", function () {",
									"    pm.expect(jsonData.id).length.greaterThan(0);",
									"});",
									"",
									"pm.environment.set(\"patientId\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "867f11e0-bf1d-4f80-8e1a-bc1159ef7dd8",
								"exec": [
									"var date_timestamp = new Date().toISOString();",
									"let ld = require('lodash');",
									"",
									"let gendersList = [",
									"    \"Cis-gender male\",",
									"    \"Cis-gender female\",",
									"    \"Non-binary\",",
									"    \"Other\",",
									"    \"Unknown\",",
									"    \"Transgender male\",",
									"    \"Transgender female\"",
									"];",
									"",
									"let pronounsList = [",
									"    \"He/Him/His\",",
									"    \"She/Her/Hers\",",
									"    \"They/Them/Theirs\",",
									"    \"Other\"",
									"];",
									"",
									"let ethnicitiesList = [",
									"    \"Asian\",",
									"    \"Black/African American\",",
									"    \"White/Caucasian\",",
									"    \"Hispanic/Latinx\",",
									"    \"Native American, Indian American, or Alaska Native\",",
									"    \"Native Hawaiian or other Pacific Islander\",",
									"    \"Middle Eastern or North African\",",
									"    \"Prefer not to answer\",",
									"    \"Other\"",
									"];",
									"",
									"let languagesList = [",
									"    \"English\",",
									"    \"Spanish\",",
									"    \"Chinese\",",
									"    \"French\",",
									"    \"Tagalog\",",
									"    \"Vietnamese\",",
									"    \"Korean\",",
									"    \"German\",",
									"    \"Russian\",",
									"    \"Italian\",",
									"    \"Portuguese\",",
									"    \"Polish\",",
									"    \"Japanese\",",
									"    \"Persian\",",
									"    \"Greek\",",
									"    \"Serbo-Croatian\",",
									"    \"Armenian\",",
									"    \"Yiddish\",",
									"    \"American Sign Language (ASL)\"",
									"];",
									"",
									"let sexList = [",
									"    \"Male\",",
									"    \"Female\"",
									"];",
									"",
									"let timezonesList = [",
									"    \"Hawaii Standard Time\",",
									"    \"Hawaii-Aleutian Time\",",
									"    \"Alaska Time\",",
									"    \"Pacific Time\",",
									"    \"Arizona\",",
									"    \"Mountain Time\",",
									"    \"Central Time\",",
									"    \"Eastern Time\"",
									"];",
									"",
									"let contactPreferences = [\"Email\", \"No preference\", \"Phone\", \"Unknown\"];",
									"",
									"let statesList = [\"AK\", \"AL\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"DC\", \"FL\", \"GA\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"OH\", \"OK\", \"OR\", \"PA\", \"PR\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\", \"Outside US\", \"Unknown\"];",
									"",
									"let addressLine2List = [\"Apt 1\", \"Apt 2\", \"Apt 3\", \"Unit #1\", \"Unit #2\", \"Unit #3\", \"Apt 2L\", \"Apt 2R\"];",
									"",
									"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let lastName = pm.variables.replaceIn('{{$randomLastName}}');",
									"let chosenName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let email = \"qa\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
									"let zip = Math.floor(10000 + Math.random() * 90000);",
									"",
									"//Generate random Date of Birth in YYYY-MM-DD Format",
									"function randomDate(start, end) {",
									"    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));",
									"}",
									"let date = randomDate(new Date(1990, 00, 01), new Date());",
									"let dateOfBirth = date.getFullYear() + '-' + (\"0\" + (date.getMonth() + 1)).slice(-2) + '-' + (\"0\" + date.getDate()).slice(-2);",
									"",
									"//Save the variables to be used in next request for validation",
									"pm.environment.set(\"patientFirstName\", firstName+date_timestamp);",
									"pm.environment.set(\"patientLastName\", lastName);",
									"pm.environment.set(\"patientEmail\", email);",
									"pm.environment.set(\"patientPhoneNumber\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));",
									"pm.environment.set(\"patientChosenName\", chosenName);",
									"pm.environment.set(\"patientDateOfBirth\", dateOfBirth);",
									"pm.environment.set(\"patientAddressLine1\", pm.variables.replaceIn('{{$randomStreetAddress}}'));",
									"pm.environment.set(\"patientAddressLine2\", ld.sample(addressLine2List));",
									"pm.environment.set(\"patientCity\", pm.variables.replaceIn('{{$randomCity}}'));",
									"pm.environment.set(\"patientState\", ld.sample(statesList));",
									"pm.environment.set(\"patientCountry\", \"US\");",
									"pm.environment.set(\"patientZip\", zip.toString());",
									"pm.environment.set(\"patientLatitude\", pm.variables.replaceIn('{{$randomLatitude}}'));",
									"pm.environment.set(\"patientLongitude\", pm.variables.replaceIn('{{$randomLongitude}}'));",
									"pm.environment.set(\"patientEthnicities\", JSON.stringify(ld.sampleSize(ethnicitiesList, 2).sort()));",
									"pm.environment.set(\"patientLanguages\", JSON.stringify(ld.sampleSize(languagesList, 2).sort()));",
									"pm.environment.set(\"patientGenderOnRecord\", ld.sample(gendersList));",
									"pm.environment.set(\"patientGenderOffRecord\", ld.sample(gendersList));",
									"pm.environment.set(\"patientPronounsOnRecord\", ld.sample(pronounsList));",
									"pm.environment.set(\"patientPronounsOffRecord\", ld.sample(pronounsList));",
									"pm.environment.set(\"patientSex\", ld.sample(sexList));",
									"pm.environment.set(\"patientTimezone\", ld.sample(timezonesList));",
									"pm.environment.set(\"patientContactPreferences\", JSON.stringify(ld.sampleSize(contactPreferences, 2).sort()));"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9e8d2562-01d0-4a86-add2-4f3f1593f978",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{patientFirstName}}\",\n    \"lastName\": \"{{patientLastName}}\",\n    \"dateOfBirth\": \"{{patientDateOfBirth}}\",\n    \"email\": \"{{patientEmail}}\",\n    \"contactPreferences\": {{patientContactPreferences}},\n    \"ethnicities\": {{patientEthnicities}},\n    \"phoneNumber\": \"{{patientPhoneNumber}}\",\n    \"chosenName\": \"{{patientChosenName}}\",\n    \"languages\": {{patientLanguages}},\n    \"genderOnRecord\": \"{{patientGenderOnRecord}}\",\n    \"genderOffRecord\": \"{{patientGenderOffRecord}}\",\n    \"pronounsOnRecord\": \"{{patientPronounsOnRecord}}\",\n    \"pronounsOffRecord\": \"{{patientPronounsOffRecord}}\",\n    \"sex\": \"{{patientSex}}\",\n    \"timezone\": \"{{patientTimezone}}\",\n    \"latitude\": \"{{patientLatitude}}\",\n    \"longitude\": \"{{patientLongitude}}\",\n    \"addressLine1\": \"{{patientAddressLine1}}\",\n    \"addressLine2\": \"{{patientAddressLine2}}\",\n    \"city\": \"{{patientCity}}\",\n    \"country\": \"{{patientCountry}}\",\n    \"state\": \"{{patientState}}\",\n    \"zip\": \"{{patientZip}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/patients",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"patients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patient list - basic details",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "33616885-db85-4b68-80df-9c5db904f7c5",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify response have only patient basic info\", function () {",
									"    let keys = Object.keys(jsonData.data[0]);",
									"    pm.expect(keys.length).to.equal(9);",
									"    pm.expect(keys).to.include(\"externalId\");",
									"    pm.expect(keys).to.include(\"firstName\");",
									"    pm.expect(keys).to.include(\"lastName\");",
									"    pm.expect(keys).to.include(\"chosenName\");",
									"    pm.expect(keys).to.include(\"dateOfBirth\");",
									"    pm.expect(keys).to.include(\"state\");",
									"    pm.expect(keys).to.include(\"isPaused\");",
									"    pm.expect(keys).to.include(\"daysOfCare\");",
									"    pm.expect(keys).to.include(\"weeksAtEquip\");",
									"});",
									"",
									"pm.test(\"Verify response data\", function () {",
									"    let exp_response = {",
									"        \"data\": [",
									"            {",
									"                \"externalId\": \"\" + pm.environment.get(\"patientId\") + \"\",",
									"                \"firstName\": \"\" + pm.environment.get(\"patientFirstName\") + \"\",",
									"                \"chosenName\": \"\" + pm.environment.get(\"patientChosenName\") + \"\",",
									"                \"lastName\": \"\" + pm.environment.get(\"patientLastName\") + \"\",",
									"                \"dateOfBirth\": \"\" + pm.environment.get(\"patientDateOfBirth\") + \"\",",
									"                \"state\": \"\" + pm.environment.get(\"patientState\") + \"\",",
									"                \"isPaused\": false,",
									"                \"daysOfCare\": 0,",
									"                \"weeksAtEquip\": 0",
									"            }",
									"        ],",
									"        \"pageNumber\": 1,",
									"        \"pageSize\": 20,",
									"        \"totalCount\": 1",
									"    }",
									"",
									"    console.log(\"jsonData: \" + JSON.stringify(jsonData));",
									"    console.log(\"exp_response: \" + JSON.stringify(exp_response));",
									"    pm.expect(jsonData).to.eql(exp_response);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0c1392f9-6b3a-4bb9-85fd-8b23cb267912",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "45807b36-4c10-4fe5-a8f0-1fb8e7cd66fd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/patients?filter-by=patient-name::{{patientFirstName}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"patients"
							],
							"query": [
								{
									"key": "filter-by",
									"value": "patient-name::{{patientFirstName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add coverage 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "22ade4e7-bfa9-479d-ba51-6bbb603f3be7",
								"exec": [
									"let ld = require('lodash');",
									"",
									"var payorExternalids;",
									"",
									"if(pm.environment.name === \"qa\"){",
									"    payorExternalids = [",
									"        \"3e395a8c-521e-399e-c413-ada8965515da\",",
									"        \"9b2fcd52-eeee-9065-b299-fc4836f83bfc\",",
									"        \"0343b510-f5ef-0cc6-1bf6-dd0c3cd044e6\",",
									"        \"24a53322-147a-20b0-9a14-1b23a8924f50\",",
									"        \"ac958859-d141-aaa7-47ce-35edb54c2713\",",
									"        \"29f91d83-4744-0022-a013-742d993c3c2a\",",
									"        \"9b6a8c63-adc5-d34a-f4ca-219325fcd0dc\",",
									"        \"738027e6-d570-4c72-f506-87a1a88b4ef7\",",
									"        \"1824eb10-c504-d4dc-65cc-697d23d46454\",",
									"        \"1771abe3-0ea6-0da0-b1f2-16543d0c9235\",",
									"        \"166ea8c8-7541-b0ac-61d5-3dd4222b28b5\",",
									"        \"21ee4ad0-5a10-0ef4-67b9-c0e20c44e7c3\",",
									"        \"5921b11f-f1a3-9cc9-bffc-86eea8b431c2\",",
									"        \"b5bb240b-e71b-1704-a343-b976c05a3ef1\",",
									"        \"6d78d422-adbc-e9a0-ff5b-79f2934442af\",",
									"        \"5162fa95-e74e-2916-3771-ea5e2f59d65b\",",
									"        \"5d383e10-8748-0c8b-e9e7-073c52da34e7\",",
									"        \"04e0fd1e-3cba-f09d-7c4a-0966b52c9556\",",
									"        \"85587f25-1f1a-e245-b9ee-e5eb63964612\",",
									"        \"e8be450b-d0ce-ed34-95e7-821871ccf730\",",
									"        \"4e557e5c-17c2-84c0-7dda-82cd7593fa11\",",
									"        \"7113e37e-ff58-ba1e-1cf5-9902d698c232\",",
									"        \"649dec3f-910a-6147-a599-bee65689fc93\",",
									"        \"f0aa80ef-2592-2d2a-6cc3-fcd3c2937885\",",
									"        \"d8630164-6c15-2737-bc05-d605746ec9e9\",",
									"        \"e80cfead-15b8-f4f7-01cd-6ada6f73b727\",",
									"        \"c796b1e8-5a96-1243-8972-81830db39b41\",",
									"        \"a9d28970-647a-7fe1-f334-476e8840c05b\",",
									"        \"0ceff77d-a8ba-24aa-9c8a-980fbce8c181\",",
									"        \"6f160c82-f8b6-dad5-35b3-c659cac7bf90\",",
									"        \"c25397d2-4080-5273-b230-122085285f03\",",
									"        \"285b11eb-9ab5-2c2f-f75d-2b801f33cf46\",",
									"        \"8132da12-e499-767d-4375-0e5069c5d19b\",",
									"        \"5548c2e8-8920-104b-b9a6-c9ae02342b04\",",
									"        \"0e0f3757-77cb-bff2-b144-0421fe5ddebf\",",
									"        \"e9ffde28-cbaa-1ae0-a7b4-d14f119dc9b2\",",
									"        \"6cb52ff0-9d4b-6132-2ce4-84d44d0674f2\",",
									"        \"0017a4fd-0d32-0156-de21-7d109719af5f\",",
									"        \"3ec238c1-2327-43a5-48ea-18ae20295ed7\",",
									"        \"6da2522f-bb9c-4230-d013-d4221a1d08e1\",",
									"        \"b7cfd159-9a10-30f0-882b-7d1cc3ff2b32\",",
									"        \"9aceec39-d31a-6fb9-0a63-0a3c42df7080\",",
									"        \"7b350aa4-53bd-c9c6-6a8a-2d26d1dd0a37\",",
									"        \"b28710ed-3d49-3b34-e212-38d85391c9e1\",",
									"        \"bd48eea4-2d92-3963-8dab-95b926c24fe5\",",
									"        \"7bcbf445-b485-0b35-add4-9fb666d55e2f\",",
									"        \"4e3ba1c0-ea9e-b8f6-da77-73cc072d36d2\",",
									"        \"464baa99-597f-53b3-a070-401459c9802d\",",
									"        \"9f75cccf-4c48-fe1f-59f7-fce3b9f73e76\",",
									"        \"3bf1353e-9ace-7f4d-e25c-926feb16b680\",",
									"        \"601b9190-1e56-6593-6ed3-3ac9acf5de9d\",",
									"        \"979c2655-cc38-6c87-b1a0-b228a369e681\",",
									"        \"d96346bf-3bd1-cad6-c08b-fc178ed1c493\",",
									"        \"b5c9948f-dcf8-93a6-40a9-dece6c7e0e4c\",",
									"        \"c84af9f9-760a-841c-55d4-1176cce14df0\",",
									"        \"b1bce313-7550-a084-a8e4-fddfb79c50ee\",",
									"        \"3b5f1abf-ecc1-4a29-5c9a-96307b9066cd\",",
									"        \"cbf9b456-2ada-a1a8-c83c-eb32d727d09b\",",
									"        \"4a946da6-3548-fccb-6a4c-6a4b7ade0adf\",",
									"        \"9140daaa-17d3-388c-da0e-5eace3900dba\",",
									"        \"17d0a805-747f-e222-4008-6aef21dbca1c\",",
									"        \"4d9410fa-d602-7b71-7c2f-4cb7bbe61fa0\",",
									"        \"51eec5ff-02b5-b56a-a2df-e936d8f458ef\",",
									"        \"95d4720f-9682-2e69-886a-6aa6ae3010f8\",",
									"        \"ac183c90-507c-c6c7-530b-85c40ac629de\",",
									"        \"12bb63ae-dbda-52d3-3e9c-ea8825854e2b\",",
									"        \"322d274d-358f-2bde-3fae-66cd76bb5131\",",
									"        \"069293f9-2970-1107-20a7-c267d4ee2c75\",",
									"        \"3a5f7a55-3780-57d8-ed18-217faed78158\",",
									"        \"1b966e58-e358-68ad-7baf-cf3af7364298\",",
									"        \"74dd14d0-7f0e-bc10-eafe-034842b40f5c\",",
									"        \"d2943056-1599-a803-7fbf-efdeffa0bfc7\",",
									"        \"6086b2fa-2ace-6105-da0c-3ecbc68dfb51\",",
									"        \"d8292d3e-2872-bbe0-7ec2-62e281ba8e48\",",
									"        \"e399962f-6470-c2d6-a17c-9e88f46a0a92\",",
									"        \"8ba65606-9f14-e989-68a0-28e801dd8743\",",
									"        \"cfbb83c2-c371-c3f5-971f-955a9eff2f65\",",
									"        \"42004ef5-5469-254e-90ce-50bbbc34ad5f\",",
									"        \"e0f42ce1-64df-e79f-ae6a-d7731d51c80e\",",
									"        \"a69b3f9d-c490-ab0a-b0eb-3f7295cdf76a\",",
									"        \"55a26fd5-45d8-76d2-2878-6ee87835a356\",",
									"        \"957200ee-dfb9-ec80-f158-30d25aaedf4a\",",
									"        \"2bff21f9-ed17-62ba-16f9-4ac1a3dc3756\",",
									"        \"9ce66f04-49c5-e3d6-995a-b07e8dd3b9bf\",",
									"        \"a7abc99e-4c97-6b41-f836-ba455f00d55b\",",
									"        \"eda43b92-6865-3ae6-b36a-e8d37244829d\",",
									"        \"798b7d74-6b3c-2c2a-8014-953134d9e62a\",",
									"        \"2896cdec-ec99-7582-3121-58f76cc9474b\",",
									"        \"d727659f-0d75-72f3-574f-5ae300d40f8a\",",
									"        \"14890191-4561-8e7f-015b-74c85f93d1bd\",",
									"        \"58bbd1b6-d3ba-5ddc-f76e-62305c67144b\",",
									"        \"218332b0-51aa-8e8c-c215-b3835164c4c1\",",
									"        \"25599c3e-f84f-ff24-518a-23137741f837\",",
									"        \"2a880b89-199f-edfe-7c54-ec7bb0e564b8\",",
									"        \"c7dd2245-17b8-e318-a831-caddcd875d03\",",
									"        \"a33f25ed-7ae6-98ea-cbc1-d4cd1036967b\",",
									"        \"d03c6f2e-027b-006f-e8cb-ecd3e36b21b4\",",
									"        \"6a3b9a74-4ff4-bc62-077e-04b8b9c3947c\",",
									"        \"76ba20e4-7b06-1b8f-f46b-bac8d8d0493f\",",
									"        \"5b96ab81-9e1d-b668-d1c2-50709ae930ab\",",
									"        \"3454a1a3-20d6-ce99-4a8e-82f79a530e0b\",",
									"        \"bceda1b9-c26f-d4f1-e3b1-6104c8fb7de4\",",
									"        \"8b1862fc-f9c1-4c0e-901b-91aa6d853bb3\",",
									"        \"e37fd416-6b89-c30a-cb24-1e87fa6d864a\",",
									"        \"fe7bccd0-123d-9129-2bcc-91f8822eafbe\",",
									"        \"3b7d24fc-7878-ff8d-b7a4-ad1f14e92980\",",
									"        \"7c69925d-4a4b-9f62-5b83-266718fbaf4d\",",
									"        \"83d190e6-b27a-3f93-49e0-39818b67ce82\",",
									"        \"090ec465-f898-af35-534c-87fea52e1c91\",",
									"        \"2a2d778d-9c20-f0bd-4552-4b683c6c33d8\",",
									"        \"8cb1c24c-01af-be16-db43-4826612c86f9\",",
									"        \"fcba7519-1795-4569-e4c4-6521bd8549ef\",",
									"        \"e226589b-f5d9-11ef-f6c0-05a9731dd930\",",
									"        \"1ef8f3d7-3c05-0e70-727a-92eeebd9b475\",",
									"        \"95dfad88-c046-c396-aa58-5073fd2dc773\",",
									"        \"2118ba01-0081-9c19-3cef-bf700ae94e9d\",",
									"        \"ec1068bc-7a13-1d2c-1926-8cbfe22cd23a\",",
									"        \"37988ea8-84c6-ae8d-6468-b4099b358a28\",",
									"        \"c61e3fc8-78f8-6a39-37f1-d9bb70a51d49\",",
									"        \"ee891461-e022-5ffc-5208-c4c959d50d78\",",
									"        \"0e7a0066-9b4a-86be-2832-96da2216fca8\",",
									"        \"13e8cfa5-c421-b599-02b4-768ede0f843e\",",
									"        \"f46d0b5c-d723-975d-1e55-e3e1bdc7a602\",",
									"        \"04231804-8655-0d5f-a51b-157a13b427e8\",",
									"        \"9c20d0c9-f96c-5711-d161-7b47cde657f5\",",
									"        \"73bb3383-ac56-98a4-72e3-b1922b459741\",",
									"        \"d7b7bdb7-e89d-7783-194f-7fc424396b25\",",
									"        \"cc990363-d368-92b4-1984-329a4dfd0ce8\",",
									"        \"67c111ab-dd0a-16f5-bdd5-c112a7d47dfb\",",
									"        \"e99eb140-4f25-35b5-e6eb-7deeb0697dac\",",
									"        \"13514748-8b22-c0c4-abc2-744ccac0bd1a\",",
									"        \"54aef9d3-2623-b874-30ec-e375f432d1ee\",",
									"        \"a5e11fb1-25e1-8daf-2f41-619b953c305b\",",
									"        \"65fcf7ca-ff57-72a7-4756-b914bda630df\",",
									"        \"44bedf25-4661-1182-211d-1da66e5f7071\",",
									"        \"22f8939f-e2c6-fe4f-fb16-3722a6e6dd0d\",",
									"        \"4ab94f03-4e5f-8ad2-0b8e-0e98a8e1830b\",",
									"        \"001b3d9b-090e-1ee1-53c5-3b0e6efb2159\",",
									"        \"43165551-083b-595a-67e1-d44c3d81777a\",",
									"        \"8127ca30-a6af-bf5f-fe81-f5fcd12bf906\",",
									"        \"c0fc2936-0f80-d577-ea9e-0d28cc7040b2\",",
									"        \"fe05afbb-2db0-d186-3158-a2841cb73093\",",
									"        \"b1e868b1-db31-d7ef-9b82-5d68fcdd8a80\",",
									"        \"355b8a70-25a5-8548-89c5-0e220dc98245\",",
									"        \"0eaf8226-a620-bd45-1b9b-f7f489a1adfa\",",
									"        \"287a2bb1-f442-951a-2c38-18ef2bb60b26\",",
									"        \"ce921aee-b487-eaa0-f494-67791d635cdd\",",
									"        \"95ca6536-2c65-6243-c726-746acb05b98f\",",
									"        \"173318cf-1e53-4fd8-8fcf-6e20dc6c810f\",",
									"        \"d1ea553a-a481-f93b-57b1-9d54ea5457e0\",",
									"        \"b97caebd-314d-1bce-e04a-21e255613efc\",",
									"        \"27c0fdc8-1f18-019e-3224-09b61635d0a2\",",
									"        \"d3e41fdb-9ca6-af88-2ebf-f1e684089687\",",
									"        \"4d1e96a6-69d0-9bf4-0018-434d6b69ad23\",",
									"        \"f0afb453-a268-2648-35be-1e4e9bd852a8\",",
									"        \"cffd96ff-a5a7-416a-eff9-60f7a24a2bb0\",",
									"        \"d3ea5e4f-1d31-b9ac-be87-b6db286a16b0\",",
									"        \"b10db0e1-726c-de28-6c14-5ed630c9bac8\",",
									"        \"67818320-f1c6-5d1a-1ee5-33831c222c8a\",",
									"        \"25faa955-2e6c-bee3-5d88-b24b263a2f9f\",",
									"        \"79734e4d-c823-f891-1468-ec9b0671d821\",",
									"        \"0d95fb1e-fb08-ed0c-1017-ad35117a4251\",",
									"        \"6dd993d5-06fd-9d47-3225-89d7a62a71e6\",",
									"        \"c10fc3d0-cce8-8dff-88c7-cb789a7a4d27\",",
									"        \"2fd6a564-adcb-c9d8-8001-04d91d136f63\",",
									"        \"bf1d560d-6aed-eebc-bdb6-298fc59f42f1\",",
									"        \"a003b2b9-c317-6d08-70c0-ac5470f90a6e\",",
									"        \"d99f436d-7e1f-5f98-7855-8b62f4cd19da\",",
									"        \"06503ee0-56cd-1d3e-2a28-ff28d65565d0\",",
									"        \"c4dbe960-70ab-3273-25fb-c4b3e0672458\",",
									"        \"94fbba21-6630-bb25-ae1b-2ffe3e259a3c\",",
									"        \"6df5a799-0639-ae2f-5e89-15c9fdd3d895\",",
									"        \"1e9f40be-c4ec-a612-e42a-101e7eadf6d2\",",
									"        \"922e99af-b67d-86aa-cdb3-5ab0cb647a88\",",
									"        \"eb9984a7-de4e-fbbf-ece1-3a35507d7f20\",",
									"        \"537a3e68-32dd-0055-7d21-a1484adde6fe\",",
									"        \"2dac7037-035c-e9a2-525e-3d57f315b8b8\",",
									"        \"ff426d45-db6d-3f25-afed-1152f646a060\",",
									"        \"457c8acd-1923-9878-609c-7ca9bf95f5ad\",",
									"        \"8c6d260e-aa82-32b5-59b2-f648ce782347\",",
									"        \"0a9b49b5-9959-cf15-3338-d730d3d9bb3e\",",
									"        \"3d638c03-2b82-d1ed-420c-e5a7ca88a9eb\",",
									"        \"4753b9e8-4a23-7079-9a7a-0b4fb6b7755f\",",
									"        \"5f86c4ef-3e05-dc34-a06f-ef76c7458732\",",
									"        \"490a6e1f-7912-034d-92b1-f1f9e3fc78db\",",
									"        \"821cd139-a747-2831-de0a-4d7bc53d9598\",",
									"        \"a6385039-8816-0fda-15b9-f7a1b3844142\",",
									"        \"8eb6945d-6e6d-4c65-f3f5-f546a6b206f1\",",
									"        \"8f242e21-f1c5-6724-10d2-77c078c2963d\",",
									"        \"f09f9244-1bd0-bcc3-e6a7-f925de1ca431\",",
									"        \"f463f9bb-e126-ea74-055f-5604ccc6b9a0\",",
									"        \"4229f5f4-5230-a3c8-2fc3-31238c68b99a\",",
									"        \"3419aba2-b6ec-911f-3f20-94655fb379a5\",",
									"        \"35edb0a5-7fd3-02b3-5f73-0d20c63b7ca9\",",
									"        \"fb519ecb-1903-37c1-e8e1-f275797f4332\",",
									"        \"cfef1261-21b0-1cee-efa8-202191e1b24b\",",
									"        \"e0eff1f8-fbee-b486-455f-5659daf12cea\",",
									"        \"ae562f71-d2f6-0c0d-4d94-4c1e1224a6f6\",",
									"        \"7aa6e1dc-7c3d-fbe3-7058-72610dd78339\",",
									"        \"acb0ce16-dddb-45b9-3337-b15f70e8bd5f\",",
									"        \"cb29e242-6be5-6847-a618-132e894951e2\",",
									"        \"17463e82-fffd-0ce5-b290-6e69517be87b\",",
									"        \"dc88ebe5-aeb4-faec-1dc1-ce8b129257eb\"",
									"]",
									"}else if(pm.environment.name === \"dev\"){",
									"    payorExternalids = [",
									"        \"56e1db12-7e55-01fd-7e3e-ac646787d538\",",
									"        \"c99ff236-7f9b-71eb-b610-b79d3365e15a\",",
									"        \"56391f4e-db3b-1edd-f8d4-5af607d80e36\",",
									"        \"7fdf104b-0872-5f5e-e15e-2230612c93f7\",",
									"        \"6c852a69-85ab-ae65-4abd-b1a278ecc6bb\",",
									"        \"7c341c51-68aa-c919-821b-672aa406070c\",",
									"        \"f938a618-8dbf-d563-7858-333a7fe5433f\",",
									"        \"77b71493-e1b2-3d35-f26a-c1e0bb895827\",",
									"        \"d0cc155f-a8be-77a1-cb08-175d7ff48a70\",",
									"        \"8d03afa7-ceea-00be-9e2a-11eb047a0a99\",",
									"        \"e3e9ca54-3fe0-3068-2c9e-95022ccfd3a6\",",
									"        \"cee8a51f-79e4-bfad-9e5b-5d770fbfa31e\",",
									"        \"dc0feb71-161f-a80a-9074-2644f9a83e44\",",
									"        \"67414e30-57f7-1bd6-b708-f8657fdb85da\",",
									"        \"fc6a1381-b24a-b9cf-18f9-4ba74492015c\",",
									"        \"22f7196c-8e7d-29f3-2d57-a9af25724f3f\",",
									"        \"722f1795-d525-1b80-67b2-e7f756bcad44\",",
									"        \"8eceb97a-f94f-106e-0156-9372e40c952d\",",
									"        \"5c1f5574-6582-0d89-692b-cf099206d2bf\",",
									"        \"9546dc67-aef1-72ab-e340-983bddbcdb77\",",
									"        \"a0ade096-52ab-fc3e-8347-5dabf4ced886\",",
									"        \"5340cb8e-9d53-9be5-0af3-02afc24cd06e\",",
									"        \"9f58e2a8-ddfe-cda2-a844-9b1ed5879037\",",
									"        \"2f0a9b51-f311-2416-3b02-46f0876a1f1b\",",
									"        \"b5a7419c-7224-a65b-b940-75759394b4d0\",",
									"        \"9f5324a2-7d74-f4fe-b5ee-ecfc2e8959df\",",
									"        \"3ad62974-129f-5449-95dc-031e978a531b\",",
									"        \"828c09c5-aa47-6a23-bfda-c7c1fecfe063\",",
									"        \"5fb58801-58b4-9f72-ecaf-60f1999236de\",",
									"        \"2d51586e-2e4c-a822-f5ac-79687d949531\",",
									"        \"b7f1823a-0953-9225-6bdc-3f9414f356ff\",",
									"        \"0a36d50d-02b3-e36d-51e9-d745e26f94eb\",",
									"        \"bb0a2bdc-4a92-6c5e-0ee1-c59896729588\",",
									"        \"59815314-0a43-0412-9872-0349fcec9a87\",",
									"        \"da83815c-e2d3-40d7-e2c8-01e0cd7f74a4\",",
									"        \"3896b81d-ccec-4a05-e3dd-cae42f16453f\",",
									"        \"2caf83f0-8a2c-c622-db70-9faf471094df\",",
									"        \"8e21d58b-b05d-8771-70ee-371ec5555c3f\",",
									"        \"d619cf91-882c-712c-42a9-a9cf909bbcdb\",",
									"        \"9898f740-86c0-0869-beaa-1501a02fb404\",",
									"        \"2e32b236-3de4-8724-b93e-b121ffcdd663\",",
									"        \"1f78e27c-1656-163f-9272-b8022de03425\",",
									"        \"5d5e3fdc-b363-b45c-551c-5e0a2654a218\",",
									"        \"fbb105e4-82d0-3b8f-9a5f-35689bab4f63\",",
									"        \"780f2bcf-3065-13a3-adcf-490e84a49c8a\",",
									"        \"b3e5ed5c-2789-8e18-b949-f5e0a8e49c29\",",
									"        \"0d021e18-9f9a-7c07-e035-ed1c65820201\",",
									"        \"4cc2fdcc-39c5-204e-af17-d371797c8da5\",",
									"        \"43a43e5e-33f7-d659-ef54-b25bbdb0bf30\",",
									"        \"09a34d91-79ea-d8ca-90e6-ebc01e355eac\",",
									"        \"89f59190-ddd9-1037-9cf0-bf0526c522b3\",",
									"        \"3d3dcc62-b833-bd5c-5143-d67a920e34da\",",
									"        \"88c7c852-b957-f6c7-d261-55a81bae2eb7\",",
									"        \"d322bacf-a088-2e8b-f761-bc86d1f3f4ab\",",
									"        \"e714f5a3-1ea5-a87c-a4c0-38e06f8d2dc3\",",
									"        \"9298d74f-08cc-a58f-76db-2858befab318\",",
									"        \"420d036f-d8ff-31f1-13c6-f0ea7ae2004f\",",
									"        \"135554b1-d5da-ffd2-baf1-1d8e30615f24\",",
									"        \"e1dfdcb0-7fb2-1972-cbbf-b92510b739df\",",
									"        \"6d8afdad-6876-45d8-5dc1-82718bb38910\",",
									"        \"4d85e003-8414-3a00-2975-29feb860ce61\",",
									"        \"274008f5-1d1d-c2c3-8e6f-ebbf79a21d05\",",
									"        \"53994cf3-4bc6-7e33-a079-b2da9cfc1233\",",
									"        \"7df9b205-64c7-8a82-e7e4-f426c36da508\",",
									"        \"5be925ae-4d8e-3499-cffb-c805090c5b0e\",",
									"        \"37567775-9154-07eb-dc80-163144f8902d\",",
									"        \"7c2d8198-2d2d-caab-556e-421d3fdf4231\",",
									"        \"ae120eb4-783d-d12b-1cc0-a27faaa558dd\",",
									"        \"eac266f2-5520-142f-15e0-958b88453bf2\",",
									"        \"d142a418-153c-5ce5-8c0b-69613165c5b1\",",
									"        \"3588543a-c32e-4630-5aa3-07565bf5aff3\",",
									"        \"a2745127-1e5e-ddc9-5928-fc684a7f79b2\",",
									"        \"5634100f-c1f9-d774-7b3b-e890f7156282\",",
									"        \"2d70a060-62d3-8ecf-9753-3ace4682be87\",",
									"        \"6c8d21c9-112c-29bb-cb39-3031c17edac1\",",
									"        \"0a41322f-b1a3-0d75-4a6a-0cfe0cbb7584\",",
									"        \"b597c39d-7dc2-ec60-84f0-bc6cf3b3f04a\",",
									"        \"3eab1bc1-edc5-9ea3-22d3-7e94b68f7d81\",",
									"        \"2bc74ad3-29e1-218d-a332-1686e3fe3809\",",
									"        \"ec506779-54ae-507c-d190-6cda272f9646\",",
									"        \"c8b272f0-9e35-1274-0be1-92048540c4f6\",",
									"        \"418f9afc-9665-a69d-2e2d-90e76b062c1a\",",
									"        \"653bd3ac-2975-c806-7fa6-ece182481f96\",",
									"        \"f9ac8820-9eb6-20d5-92d6-b1d5b7afcec4\",",
									"        \"53795161-3e7b-cfda-b414-4380dbe73aab\",",
									"        \"f0058ecb-daf6-401d-119c-e2dc33965c63\",",
									"        \"6d29ab83-0a71-a508-8968-bdbf5cf14fb5\",",
									"        \"e92f03f1-6b6d-fff1-acd6-1cdeec6c7729\",",
									"        \"3015be5d-ab80-1e91-8897-78f940f91f81\",",
									"        \"e1dd302a-b8ba-98ba-e192-aee1c321e629\",",
									"        \"b3e5f2b5-39ba-dc32-d4b3-d10c42066ae9\",",
									"        \"6360eeaf-edbe-cd2d-1704-85bb4d9f0db8\",",
									"        \"c01f2394-aa8c-1356-7ead-0425e3f05aca\",",
									"        \"5bcaf9b1-ce54-6c78-2305-87107fc6be56\",",
									"        \"634a79c4-b0cd-3f42-6a03-092b716005e3\",",
									"        \"4581c883-c030-a270-76c0-48c8d6e6c8d9\",",
									"        \"1ad2cea9-789f-df99-c939-3aea441a687a\",",
									"        \"2558adad-06f4-c397-b87a-0ca9db1d463a\",",
									"        \"a93c50d6-aea1-5d39-164e-3adf8ec87431\",",
									"        \"72a8dd10-cdd0-8fbf-5859-660a25623f4c\",",
									"        \"ddf96a9b-f1b2-6298-ff96-2300f6a25b5c\",",
									"        \"5666829b-6619-bc42-4e89-3ab98323f8fc\",",
									"        \"3fe3c7bc-757b-312f-af20-18a426d91a4f\",",
									"        \"8413a34f-262c-5468-be04-4db1e7c66f2d\",",
									"        \"d4865c06-68cc-46f6-258c-ea75185855fe\",",
									"        \"7991f244-092e-9c37-6195-67992743e429\",",
									"        \"5137d30b-6ff2-240d-1fc7-8d18d3f5d4fd\",",
									"        \"a5c01c64-1f18-c180-da95-916c6626e920\",",
									"        \"21ea1122-f691-85a1-47ac-e265b58e3d68\",",
									"        \"d5a74ed6-70b8-0705-50b3-18e40463e267\",",
									"        \"45926898-0110-d28d-172c-e7717da65e88\",",
									"        \"5a95289b-48aa-890e-c16d-90708d0f4ef8\",",
									"        \"a4e4827b-2a65-eff2-7770-0942c13a5bbb\",",
									"        \"67e6b5f6-8244-f19e-a759-6fc61cf99c0c\",",
									"        \"f284d98f-1d80-0b5f-7052-83ac5faedf7d\",",
									"        \"eb784ccf-23a5-d0ea-dd6f-61346aa4983f\",",
									"        \"13727cf0-b2df-85c3-cfb7-86e7ae85616b\",",
									"        \"7f2a1331-2a9c-2c0d-55ec-8272114722c7\",",
									"        \"9db66f8e-345e-3d5d-492e-2e77077b968f\",",
									"        \"49fbb711-e493-673b-6a81-b258422cfd55\",",
									"        \"f909283f-34ef-9970-d1e9-6d302a6e6496\",",
									"        \"97c356c6-90fc-8b8b-3d7a-46ed87e439c5\",",
									"        \"0e5ce00a-4326-32d0-f433-02a6d62ef957\",",
									"        \"be5d7b0e-e919-b049-250d-63c0f40b527a\",",
									"        \"6710efef-31ff-4bf0-be7b-efa4e4c8d3e9\",",
									"        \"342587d3-684b-d0e7-5608-9bc7fa3dc024\",",
									"        \"1e6edb88-1e75-96c9-6976-dbd8702ab4c6\",",
									"        \"4cd89fd8-cdca-700f-36b6-25fc67b10c27\",",
									"        \"53cfd269-173a-070f-ef9a-6be3f62a077e\",",
									"        \"b67245ac-f0d0-1854-72e5-44ccff0afa35\",",
									"        \"b57019ec-eda6-1716-3bb7-abb27f54c4fc\",",
									"        \"e99586b8-bb31-8343-424e-b2be61e36479\",",
									"        \"1f470ccc-68b6-79d9-f7e2-e61ef653c18c\",",
									"        \"2335c152-d13c-6fcb-3162-ab66d6b703d6\",",
									"        \"266a7f8d-0e10-c7bb-077c-6ac63a5a88af\",",
									"        \"e5261244-6ab6-8617-11cf-8cdb64d47e52\",",
									"        \"79e4fa96-2bde-c033-247c-6f7815df29b0\",",
									"        \"8f0419a0-8303-752a-6094-e304360b34a6\",",
									"        \"88f1903b-33c4-fb54-fbd9-bcc1d6e790df\",",
									"        \"e96cf20f-5a39-54c9-17d3-236bed16e51c\",",
									"        \"f21d3a9f-d737-3964-56b1-cdeb83ec6baf\",",
									"        \"4b4aef22-7ce9-d5ef-7324-11949696dbf8\",",
									"        \"20775037-494d-cb9d-3d4c-ff9ecb2eadef\",",
									"        \"0f10b4b0-6af6-5c40-8ed2-2105e7a7b3bc\",",
									"        \"4d459557-317b-c0a8-adf9-f90ce4f111e9\",",
									"        \"c1acf4d0-e787-ab92-fa25-d1dddac56f03\",",
									"        \"84235458-5076-361d-67d5-c69dbbbbf507\",",
									"        \"6aa68889-4ab9-569d-87db-ac1f5c8eea04\",",
									"        \"824338c4-643b-65dc-d500-64b6fe04a7da\",",
									"        \"eccf06c9-8619-50e6-e1e4-b2b121d1b794\",",
									"        \"eb9b7f63-9775-8586-4360-52ce304306ce\",",
									"        \"18938217-5a13-21e4-27f6-f03e0ac5cd57\",",
									"        \"038ba477-943d-a75a-0570-29be87cdc493\",",
									"        \"b1f10152-309b-cdb6-a309-d041fc7e39e1\",",
									"        \"cb92c686-0ce2-e624-638e-07f221a634ad\",",
									"        \"42d50613-677d-34dd-7e74-d6859654418c\",",
									"        \"a65b22c3-36ea-27ff-d573-67f10d3dafff\",",
									"        \"7a846eb7-7bba-f92b-286d-10f5998eea81\",",
									"        \"adee981c-4efd-3ed1-1b1d-324c3df4a6d2\",",
									"        \"15c305e1-82db-3cb0-bc8e-01eb0c9faa29\",",
									"        \"59935283-a209-4ecc-9790-bfe035560b5a\",",
									"        \"4cd50ee2-30f3-3fa5-5ac9-d836d9e6a77e\",",
									"        \"2a1c7092-efdf-0b2e-4260-aa11b0000f49\",",
									"        \"5054af4a-4cdd-65b5-879f-9a14a500a551\",",
									"        \"5a68c519-9b49-7e95-833b-84268506b0d1\",",
									"        \"1c50c7cb-df74-8d69-f354-520b27415c3c\",",
									"        \"278520a4-15ac-2d17-fb51-9a099e75c5e0\",",
									"        \"953178e8-f534-a228-f968-60d3a974a9a1\",",
									"        \"58bb7c85-a9dc-f9e5-e160-6819857214ba\",",
									"        \"ad26d957-d231-0457-54d6-e0f071eab3b1\",",
									"        \"57ebea90-f0bf-5c73-0f3d-67eda0c04b59\",",
									"        \"17059ee6-904b-a5db-9626-9e32c6e7932c\",",
									"        \"1c1ce3de-c780-d727-2128-b96a62d17361\",",
									"        \"696d1b2e-4f85-d14c-a208-c4d7d9eb7153\",",
									"        \"df73f571-61a2-c420-94c1-6c1e0ef88418\",",
									"        \"d8fc2e5c-d3ed-3fc1-2750-c0982d4c82fd\",",
									"        \"21f8f9d6-785a-590a-e1a3-f136a4c1309a\",",
									"        \"301422fa-a3b7-b13b-012f-ac4d26242ef5\",",
									"        \"e40713d3-3c8b-072a-ec42-8d3eeced212a\",",
									"        \"adf8c833-d476-8edf-6e11-8652365061d9\",",
									"        \"bccbf46e-674a-9285-2a84-05a38c639418\",",
									"        \"aba32389-2f9a-cbdb-3990-fc51aaa076c2\",",
									"        \"42e4d78b-2ada-cf64-0205-215d170aba19\",",
									"        \"d9d7e79c-b2e4-e733-a4b6-1153fe6852e9\",",
									"        \"d4a192d6-f056-a0cb-35e1-dece578fcb5f\",",
									"        \"b4a2448f-5ea3-8246-9e7a-11e95f4338a1\",",
									"        \"24a76d7c-4222-d5e4-5187-97641617d1d5\",",
									"        \"219df6ae-a750-8e31-9eb1-aef6b3d38ab2\",",
									"        \"556302f6-8391-0008-7fdd-e5e703e1e5e1\",",
									"        \"4c77525d-1212-654b-cf43-3e1fa704c75a\",",
									"        \"c868f532-e2bb-4551-4367-5101d642cc1a\",",
									"        \"dcc34dee-b129-27f3-ecb7-653d3d3d37c7\",",
									"        \"348bfae4-76c0-2f1e-29ac-b83f8649ac08\",",
									"        \"ecd84403-8dce-b8ee-787d-3f59282d375e\",",
									"        \"a7de2fe9-13ef-52f0-b662-53b7910be768\",",
									"        \"c82cf87e-e9eb-a65f-1e8d-979b3397a214\",",
									"        \"d96148ca-2a64-2e76-3abc-6383c98b6698\",",
									"        \"788ca11a-6870-d7c2-b45b-07117a4f7da8\",",
									"        \"4b84b309-081e-4f41-ac45-a2433a8ca0c5\",",
									"        \"8a0f5f79-476a-6f08-3a16-cd8d26ed6923\",",
									"        \"10dcebdf-0df7-4b26-4c07-a71bdbbe6c55\",",
									"        \"9ec17e6b-c45d-1fc3-fad3-6ea63ecdcd5d\",",
									"        \"a810300d-94a2-5968-3f45-d50e786de84d\"",
									"    ];",
									"}",
									"",
									"const payor_names = [",
									"  \"Aetna\",",
									"  \"Affinity Health Plan\",",
									"  \"AgeRight Advantage Health Plan\",",
									"  \"AgeWell New York\",",
									"  \"AIDS Healthcare Foundation\",",
									"  \"Alameda Alliance for Health\",",
									"  \"Alignment Health Plan\",",
									"  \"AllCare IPA, fka Mid Rogue IPA HealthPlan\",",
									"  \"AltaMed PACE\",",
									"  \"AmeriHealth Insurance Company of New Jersey (AmeriHealth) and AmeriHealth HMO, Inc.\",",
									"  \"Amida Care\",",
									"  \"Anthem, Inc.\",",
									"  \"Arkansas Blue Cross and Blue Shield\",",
									"  \"Aspire Health Plan\",",
									"  \"Asuris Northwest Health\",",
									"  \"Atlanticare LIFE Connection\",",
									"  \"ATRIO Health Plans\",",
									"  \"Auxilio Salud Plus\",",
									"  \"Avera Health Plans, Inc.\",",
									"  \"Beacon Health and Social Service, Inc. dba Beacon of LIFE PACE Program\",",
									"  \"Bienvivir Senior Health Services\",",
									"  \"Blue Cross and Blue Shield of Alabama\",",
									"  \"Blue Cross and Blue Shield of Illinois\",",
									"  \"Blue Cross and Blue Shield of Montana\",",
									"  \"Blue Cross and Blue Shield of New Mexico\",",
									"  \"Blue Cross and Blue Shield of Texas\",",
									"  \"Blue Cross Blue Shield of Michigan\",",
									"  \"Blue Shield of California\",",
									"  \"BlueCross BlueShield of Tennessee\",",
									"  \"BlueCross BlueShield of Western New York and BlueShield of Northeastern New York\",",
									"  \"Brand New Day\",",
									"  \"Brandman Centers for Senior Care (BCSC)\",",
									"  \"BridgeSpan Health Company\",",
									"  \"Bright Health\",",
									"  \"CalOptima\",",
									"  \"CalViva Health\",",
									"  \"Capital District Physicians' Health Plan, Inc. (CDPHP)\",",
									"  \"Care N' Care Health Plan\",",
									"  \"CareFirst BCBS\",",
									"  \"CareOregon\",",
									"  \"Cascade Health Alliance, LLC\",",
									"  \"Catholic Health LIFE\",",
									"  \"CenCal Health\",",
									"  \"Centene Corporation\",",
									"  \"Center for Elders Independence\",",
									"  \"CenterLight Healthcare\",",
									"  \"Centers for Medicare and Medicaid Services (CMS)\",",
									"  \"Centers Plan for Healthy Living (CPHL)\",",
									"  \"Central California Alliance for Health\",",
									"  \"Central Health Plan of California, Inc.\",",
									"  \"Chinese Community Health Plan\",",
									"  \"CHRISTUS Health Plan\",",
									"  \"Cigna Corporation\",",
									"  \"Clover Health\",",
									"  \"Community Care Health Plan\",",
									"  \"Community First Health Plans\",",
									"  \"Community Health Choice, Inc. (CHC)\",",
									"  \"Community Health Group\",",
									"  \"Community Health Plan of Washington (CHPW)\",",
									"  \"Complete Senior Care\",",
									"  \"ConnectiCare, Inc.\",",
									"  \"Consolidated Association of Railroad Employees Health Care (CARE)\",",
									"  \"Contra Costa Health Plan\",",
									"  \"Cook Children's Health Plan (CCHP)\",",
									"  \"Crystal Run Health Plans\",",
									"  \"DAKOTACARE\",",
									"  \"Devoted Health\",",
									"  \"Driscoll Health Plan\",",
									"  \"Eddy SeniorCare\",",
									"  \"El Paso First Health Plans\",",
									"  \"ElderONE\",",
									"  \"Elderplan, Inc.\",",
									"  \"EMI Health\",",
									"  \"Excellus BlueCross BlueShield\",",
									"  \"Fallon Health\",",
									"  \"FamilyHealth Center for Older Adults (PACE)\",",
									"  \"First Medical Health Plan, Inc.\",",
									"  \"FirstCare Health Plans\",",
									"  \"Fresno PACE for Seniors\",",
									"  \"Gary and Mary West PACE\",",
									"  \"Geisinger Health Plan\",",
									"  \"GHI, an EmblemHealth Company\",",
									"  \"Gold Coast Health Plan\",",
									"  \"Golden State Medicare Health Plan\",",
									"  \"Health Alliance (fka Health Alliance Medical Plans, Inc.)\",",
									"  \"Health New England, Inc.\",",
									"  \"Health Plan of San Joaquin\",",
									"  \"Health Plan of San Mateo\",",
									"  \"Healthfirst\",",
									"  \"Highmark BCBS\",",
									"  \"Highmark Health\",",
									"  \"HIP, an EmblemHealth Company\",",
									"  \"Horizon Blue Cross Blue Shield of New Jersey\",",
									"  \"Humana Inc.\",",
									"  \"ICHS PACE\",",
									"  \"Imperial Health Plan\",",
									"  \"Independence Blue Cross, LLC (Independence)\",",
									"  \"Independent Health Association, Inc.\",",
									"  \"Inland Empire Health Plan\",",
									"  \"InnovaCare Health Solutions\",",
									"  \"InnovAge\",",
									"  \"Inspira LIFE\",",
									"  \"Inter Valley Health Plan\",",
									"  \"Kaiser Foundation Health Plan of the Northwest, Inc.\",",
									"  \"Kaiser Foundation Health Plan of Washington\",",
									"  \"Kaiser Foundation Health Plan, Inc.\",",
									"  \"Kaiser Foundation Health Plan, Inc.- Other\",",
									"  \"Kaiser Foundation Health Plan, Inc.- SoCal\",",
									"  \"Kalos Health\",",
									"  \"KelseyCare Advantage\",",
									"  \"Kern Health Systems, Inc.\",",
									"  \"L.A. Care Health Plan\",",
									"  \"Lasso Healthcare\",",
									"  \"LIFE at Lourdes, Inc.\",",
									"  \"LIFE St. Francis\",",
									"  \"LifeWise Health Plan of Washington\",",
									"  \"Longevity Health Plan\",",
									"  \"Lutheran Senior LIFE at Jersey City\",",
									"  \"Magellan\",",
									"  \"MAPFRE Puerto Rico\",",
									"  \"Medicaid\",",
									"  \"Medical Card System, Inc.\",",
									"  \"Medicare\",",
									"  \"MediExcel Health Plan\",",
									"  \"Memorial Hermann Health Insurance Company\",",
									"  \"MetroPlus Health Plan, Inc.\",",
									"  \"Moda Health\",",
									"  \"Molina Healthcare\",",
									"  \"Mutual of Omaha Insurance Company\",",
									"  \"MVP Health Care\",",
									"  \"No Insurance\",",
									"  \"NY Hotel Trades Council and Hotel Association of NYC\",",
									"  \"On Lok Lifeways\",",
									"  \"Optum\",",
									"  \"Oscar Insurance Corporation\",",
									"  \"Other\",",
									"  \"PACE CNY\",",
									"  \"PacificSource Health Plans\",",
									"  \"Parkland Community Health Plan\",",
									"  \"Partners Health Plan\",",
									"  \"Partnership HealthPlan of California\",",
									"  \"Physicians Health Plan of Northern Indiana, Inc.\",",
									"  \"Piedmont Community Health Plan\",",
									"  \"Plan de Salud Menonita\",",
									"  \"Plan Medico Bella Vista\",",
									"  \"Premera Blue Cross\",",
									"  \"Priority Health\",",
									"  \"Private Pay\",",
									"  \"ProCare Advantage\",",
									"  \"Prominence Health Plan\",",
									"  \"Providence Health Plan\",",
									"  \"Redwood Coast PACE\",",
									"  \"Regence BlueCross BlueShield of Oregon\",",
									"  \"Regence BlueShield\",",
									"  \"Regence BlueShield of Idaho\",",
									"  \"RiverSpring Health\",",
									"  \"Ryder Health Plan, Inc.\",",
									"  \"Samaritan Health Plans\",",
									"  \"San Diego PACE\",",
									"  \"San Francisco Health Plan (SFHP)\",",
									"  \"Santa Clara County dba Valley Health Plan\",",
									"  \"Santa Clara Family Health Plan\",",
									"  \"Santa Fe Employe's Hospital Association-Coast Lines\",",
									"  \"SCAN Health Plan\",",
									"  \"Scott and White Health Plan\",",
									"  \"Scripps Health Plan\",",
									"  \"Seaside Health Plan\",",
									"  \"Sendero Health Plan\",",
									"  \"Senior Whole Health\",",
									"  \"Sentara Health Plans, Inc. (fka Optima Health)\",",
									"  \"Seton Health Plan (dba Dell Children's Health Plan)\",",
									"  \"Sharp Health Plan\",",
									"  \"SIHO Holding, LLC dba SIHO Insurance Services\",",
									"  \"Silver Star Health Network\",",
									"  \"SIMNSA Health Plan\",",
									"  \"St. Paul's PACE\",",
									"  \"Stanford Health Care Advantage\",",
									"  \"State of California\",",
									"  \"State of New Jersey\",",
									"  \"State of New York\",",
									"  \"State of Oregon\",",
									"  \"State of Texas\",",
									"  \"State of Washington\",",
									"  \"Stockton PACE\",",
									"  \"Sunrise Advantage Plan\",",
									"  \"Sutter Health Plus\",",
									"  \"Sutter SeniorCare\",",
									"  \"Texas Children's Health Plan\",",
									"  \"The Basics at Jan Werner (fka Jan Werner Adult Day Care Center)\",",
									"  \"Total Senior Care, Inc.\",",
									"  \"Triple-S Management Corporation\",",
									"  \"True Health New Mexico\",",
									"  \"Umpqua Health Alliance\",",
									"  \"Union Pacific Railroad Employes Health Systems (UPREHS)\",",
									"  \"UnitedHealthcare\",",
									"  \"Univera Healthcare\",",
									"  \"VillageCareMAX\",",
									"  \"Vitality Health Plan of California\",",
									"  \"VNSNY CHOICE\",",
									"  \"WellCare Health Plans, Inc.\",",
									"  \"Western Health Advantage\",",
									"  \"Western Oregon Advanced Health, LLC\",",
									"  \"Yamhill Community Care Organization\"",
									"];",
									"",
									"var payorprogram_names_map = {",
									"    \"AIDS Healthcare Foundation\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"ATRIO Health Plans\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Aetna\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Affinity Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"AgeRight Advantage Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"AgeWell New York\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Alameda Alliance for Health\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Alignment Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"AllCare IPA, fka Mid Rogue IPA HealthPlan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"AltaMed PACE\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"AmeriHealth Insurance Company of New Jersey (AmeriHealth) and AmeriHealth HMO, Inc.\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Amida Care\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Anthem, Inc.\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Arkansas Blue Cross and Blue Shield\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Aspire Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Asuris Northwest Health\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Atlanticare LIFE Connection\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Auxilio Salud Plus\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Avera Health Plans, Inc.\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Beacon Health and Social Service, Inc. dba Beacon of LIFE PACE Program\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Bienvivir Senior Health Services\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Blue Cross Blue Shield of Michigan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Blue Cross and Blue Shield of Alabama\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Blue Cross and Blue Shield of Illinois\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Blue Cross and Blue Shield of Montana\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Blue Cross and Blue Shield of New Mexico\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Blue Cross and Blue Shield of Texas\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Blue Shield of California\": [\"Magellan, Project Heal, SCA, Private Pay\"],",
									"    \"BlueCross BlueShield of Tennessee\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Brand New Day\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Brandman Centers for Senior Care (BCSC)\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"BridgeSpan Health Company\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Bright Health\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"CHRISTUS Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"CalOptima\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"CalViva Health\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Capital District Physicians' Health Plan, Inc. (CDPHP)\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Care N' Care Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"CareFirst BCBS\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"CareOregon\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Cascade Health Alliance, LLC\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Catholic Health LIFE\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"CenCal Health\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Centene Corporation\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Center for Elders Independence\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"CenterLight Healthcare\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Centers Plan for Healthy Living (CPHL)\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Centers for Medicare and Medicaid Services (CMS)\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Central California Alliance for Health\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Central Health Plan of California, Inc.\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Chinese Community Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Cigna Corporation\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Clover Health\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Community Care Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Community First Health Plans\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Community Health Choice, Inc. (CHC)\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Community Health Group\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Community Health Plan of Washington (CHPW)\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Complete Senior Care\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"ConnectiCare, Inc.\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Consolidated Association of Railroad Employees Health Care (CARE)\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Contra Costa Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Cook Children's Health Plan (CCHP)\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Crystal Run Health Plans\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"DAKOTACARE\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Devoted Health\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Driscoll Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"EMI Health\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Eddy SeniorCare\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"El Paso First Health Plans\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"ElderONE\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Elderplan, Inc.\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Excellus BlueCross BlueShield\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Fallon Health\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"FamilyHealth Center for Older Adults (PACE)\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"First Medical Health Plan, Inc.\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"FirstCare Health Plans\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Fresno PACE for Seniors\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"GHI, an EmblemHealth Company\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Gary and Mary West PACE\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Geisinger Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Gold Coast Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Golden State Medicare Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"HIP, an EmblemHealth Company\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Health Alliance (fka Health Alliance Medical Plans, Inc.)\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Health New England, Inc.\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Health Plan of San Joaquin\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Health Plan of San Mateo\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Healthfirst\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Highmark BCBS\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Highmark Health\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Horizon Blue Cross Blue Shield of New Jersey\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Humana Inc.\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"ICHS PACE\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Imperial Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Independence Blue Cross, LLC (Independence)\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Independent Health Association, Inc.\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Inland Empire Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"InnovAge\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"InnovaCare Health Solutions\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Inspira LIFE\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Inter Valley Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Kaiser Foundation Health Plan of Washington\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Kaiser Foundation Health Plan of the Northwest, Inc.\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Kaiser Foundation Health Plan, Inc.\": [\"Central Valley\", \"Diablo\", \"Fresno\", \"San Francisco\", \"South San Francisco\", \"Greater Southern Alameda\", \"East Bay\", \"Marin/Sonoma, Redwood City, Roseville\", \"Sacramento\", \"South Sacramento\", \"San Jose\", \"Santa Clara\"],",
									"    \"Kaiser Foundation Health Plan, Inc.- Other\": [\"Orange County\", \"Project Heal\", \"SCA\", \"Private Pay\"],",
									"    \"Kaiser Foundation Health Plan, Inc.- SoCal\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Kalos Health\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"KelseyCare Advantage\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Kern Health Systems, Inc.\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"L.A. Care Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"LIFE St. Francis\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"LIFE at Lourdes, Inc.\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Lasso Healthcare\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"LifeWise Health Plan of Washington\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Longevity Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Lutheran Senior LIFE at Jersey City\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"MAPFRE Puerto Rico\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"MVP Health Care\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Magellan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"MediExcel Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Medicaid\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Medical Card System, Inc.\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Medicare\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Memorial Hermann Health Insurance Company\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"MetroPlus Health Plan, Inc.\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Moda Health\": [\"Optum Cares\", \"Project Heal\", \"SCA\", \"Private Pay\"],",
									"    \"Molina Healthcare\": [\"Optum Standard\", \"Project Heal\", \"SCA\", \"Private Pay\"],",
									"    \"Mutual of Omaha Insurance Company\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"NY Hotel Trades Council and Hotel Association of NYC\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"No Insurance\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"On Lok Lifeways\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Optum\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Optum\"],",
									"    \"Oscar Insurance Corporation\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Other\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"PACE CNY\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"PacificSource Health Plans\": [\"Navigator\", \"Voyager\", \"SmartChoice\", \"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Parkland Community Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Partners Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Partnership HealthPlan of California\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Physicians Health Plan of Northern Indiana, Inc.\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Piedmont Community Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Plan Medico Bella Vista\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Plan de Salud Menonita\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Premera Blue Cross\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Priority Health\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Private Pay\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"ProCare Advantage\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Prominence Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Providence Health Plan\": [\"Beacon\", \"Standard\", \"Private Pay\", \"Project Heal\", \"SCA\"],",
									"    \"Redwood Coast PACE\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Regence BlueCross BlueShield of Oregon\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Regence BlueShield\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Regence BlueShield of Idaho\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"RiverSpring Health\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Ryder Health Plan, Inc.\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"SCAN Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"SIHO Holding, LLC dba SIHO Insurance Services\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"SIMNSA Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Samaritan Health Plans\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"San Diego PACE\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"San Francisco Health Plan (SFHP)\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Santa Clara County dba Valley Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Santa Clara Family Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Santa Fe Employe's Hospital Association-Coast Lines\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Scott and White Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Scripps Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Seaside Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Sendero Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Senior Whole Health\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Sentara Health Plans, Inc. (fka Optima Health)\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Seton Health Plan (dba Dell Children's Health Plan)\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Sharp Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Silver Star Health Network\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"St. Paul's PACE\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Stanford Health Care Advantage\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"State of California\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"State of New Jersey\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"State of New York\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"State of Oregon\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"State of Texas\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"State of Washington\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Stockton PACE\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Sunrise Advantage Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Sutter Health Plus\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Sutter SeniorCare\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Texas Children's Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"The Basics at Jan Werner (fka Jan Werner Adult Day Care Center)\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Total Senior Care, Inc.\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Triple-S Management Corporation\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"True Health New Mexico\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Umpqua Health Alliance\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Union Pacific Railroad Employes Health Systems (UPREHS)\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"UnitedHealthcare\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Univera Healthcare\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"VNSNY CHOICE\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"VillageCareMAX\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Vitality Health Plan of California\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"WellCare Health Plans, Inc.\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Western Health Advantage\": [\"Magellan\", \"Private Pay\", \"Project Heal\", \"SCA\"],",
									"    \"Western Oregon Advanced Health, LLC\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Yamhill Community Care Organization\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"}",
									"",
									"let payor_name = payor_names[Math.floor(Math.random() * payor_names.length)];",
									"let payor_program;",
									"",
									"if (payor_name === \"BlueCross BlueShield of Western New York and BlueShield of Northeastern New York\") {",
									"    payor_program = \"\";",
									"}",
									"else {",
									"    //  var payors_list = payorprogram_map[payor_names[payor_index]];",
									"    var payors_program_name_list = payorprogram_names_map[payor_name];",
									"    payor_program = payors_program_name_list[Math.floor(Math.random() * payors_program_name_list.length)];",
									"}",
									"",
									"let patientRelation = [\"Self\", \"Spouse\", \"Child\",\"Child (Mother's Insurance)\", \"Child (Father's Insurance)\",\"Other\", \"Grandparent\", \"Grandchild\", \"Nephew or Niece\", \"Foster Child\",\"Ward\", \"Stepson or Stepdaughter\", \"Stepson or Stepdaughter (Stepmother's Insurance)\",\"Stepson or Stepdaughter (Stepfather's Insurance)\",\"Employee\", \"Unknown\", \"Handicapped Dependent\", \"Sponsored Dependent\", \"Dependent of a Minor Dependent\", \"Significant Other\",\"Mother\",  \"Father\",\"Emancipated Minor\",\"Organ Donor\",\"Cadaver Donor\", \"Injured Plaintiff\", \"Child (Ins. not Financial Respons.)\", \"Child (Mother's Ins., Ins. not Financially Respons.)\", \"Child (Father's Ins., Ins. not Financially Respons.)\", \"Life Partner\"];",
									"",
									"let statesList = [\"AL\", \"AK\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"DC\", \"FL\", \"GA\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"OH\", \"OK\", \"OR\", \"PA\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\"];",
									"",
									"//Generate random Date of Birth in YYYY-MM-DD Format",
									"function randomDate(start, end) {",
									"    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));",
									"}",
									"let date = randomDate(new Date(1990, 00, 01), new Date());",
									"let dateOfBirth = date.getFullYear() + '-' + (\"0\" + (date.getMonth() + 1)).slice(-2) + '-' + (\"0\" + date.getDate()).slice(-2);",
									"",
									"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let lastName = pm.variables.replaceIn('{{$randomLastName}}');",
									"",
									"//Coverage Start Date",
									"let coverageStartDate = collectionMethods.randomDate(new Date(), new Date());",
									"let coverageStartDateFormatted = coverageStartDate.getFullYear() + '-' + (\"0\" + (coverageStartDate.getMonth() + 1)).slice(-2) + '-' + (\"0\" + coverageStartDate.getDate()).slice(-2);",
									"",
									"//Coverage End Date",
									"//Add number of days to coverageStartDate to make the coverageEndDate in future",
									"let AddNumberOfDays = 90",
									"let coverageEndDate = coverageStartDate.setDate(coverageStartDate.getDate() + AddNumberOfDays);",
									"let coverageEndDateFormatted = new Date(coverageEndDate).getFullYear() + '-' + (\"0\" + (new Date(coverageEndDate).getMonth() + 1)).slice(-2) + '-' + (\"0\" + new Date(coverageEndDate).getDate()).slice(-2);",
									"",
									"let random = Math.floor(Math.random() * payor_names.length);",
									"",
									"pm.environment.set(\"group_id1\", Math.floor(Math.random() * (70 - 10) + 10));",
									"pm.environment.set(\"subscriber_id1\", Math.floor(Math.random() * (70 - 10) + 10));",
									"",
									"pm.environment.set(\"payor_name1\", payor_names[random]);",
									"pm.environment.set(\"payor_program1\", payor_program);",
									"// pm.environment.set(\"payor_program_name1\", payor_program);",
									"pm.environment.set(\"Coverage1StartDate\", coverageStartDateFormatted);",
									"pm.environment.set(\"Coverage1EndDate\", coverageEndDateFormatted); ",
									"pm.environment.set(\"payor_externalid1\", payorExternalids[random]);",
									"pm.environment.set(\"patientState1\", ld.sample(statesList));",
									"pm.environment.set(\"providerServicesPhoneNumber1\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));",
									"pm.environment.set(\"patient_relation1\", ld.sample(patientRelation));",
									"pm.environment.set(\"RelationFirstName1\", firstName);",
									"pm.environment.set(\"RelationLastName1\", lastName);",
									"pm.environment.set(\"RelationDateOfBirth1\", dateOfBirth);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b86cf00e-752a-4729-8faf-1e1bb01c55e8",
								"exec": [
									"var response_text = pm.response.text();",
									"",
									"//pm.environment.set(\"response_text\", response_text);",
									"//pm.environment.set(\"CoverageExternalId\", response_text);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// pm.test(\"Verify CoverageExternalId is generated\", function () {",
									"//     pm.expect(jsonData.id).length.greaterThan(0);",
									"// });",
									"",
									"pm.environment.set(\"coverageExternalId1\", response_text);",
									"console.log(\"response_text\"+response_text)",
									"pm.environment.set(\"filPatientPayor1\", pm.environment.get(\"payor_name1\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c5abaf2e-da89-4359-b0a6-49463984c849",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"payor\": \"{{payor_name1}}\",\n    \"isActive\": true,\n    \"groupId\": \"{{group_id1}}\",\n    \"subscriberId\": \"{{subscriber_id1}}\",\n    \"stateCode\": \"{{patientState1}}\",\n       \"startDate\": \"{{Coverage1StartDate}}\",\n    \"endDate\": \"{{Coverage1EndDate}}\",\n    \"providerServicesPhoneNumber\": \"+1 {{providerServicesPhoneNumber1}}\",\n    \"subscriberRelationToPatient\": \"{{patient_relation1}}\",  \n    \"subscriberFirstName\": \"{{RelationFirstName1}}\",\n    \"subscriberLastName\": \"{{RelationLastName1}}\",\n    \"subscriberDateOfBirth\":\"{{RelationDateOfBirth1}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/clinical-data/patients/{{patientId}}/coverages",
							"host": [
								"{{host}}"
							],
							"path": [
								"clinical-data",
								"patients",
								"{{patientId}}",
								"coverages"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add coverage 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "365d4bc9-9931-4230-8398-87c078db13fd",
								"exec": [
									"let ld = require('lodash');",
									"",
									"var payorExternalids;",
									"",
									"if(pm.environment.name === \"qa\"){",
									"    payorExternalids = [",
									"        \"3e395a8c-521e-399e-c413-ada8965515da\",",
									"        \"9b2fcd52-eeee-9065-b299-fc4836f83bfc\",",
									"        \"0343b510-f5ef-0cc6-1bf6-dd0c3cd044e6\",",
									"        \"24a53322-147a-20b0-9a14-1b23a8924f50\",",
									"        \"ac958859-d141-aaa7-47ce-35edb54c2713\",",
									"        \"29f91d83-4744-0022-a013-742d993c3c2a\",",
									"        \"9b6a8c63-adc5-d34a-f4ca-219325fcd0dc\",",
									"        \"738027e6-d570-4c72-f506-87a1a88b4ef7\",",
									"        \"1824eb10-c504-d4dc-65cc-697d23d46454\",",
									"        \"1771abe3-0ea6-0da0-b1f2-16543d0c9235\",",
									"        \"166ea8c8-7541-b0ac-61d5-3dd4222b28b5\",",
									"        \"21ee4ad0-5a10-0ef4-67b9-c0e20c44e7c3\",",
									"        \"5921b11f-f1a3-9cc9-bffc-86eea8b431c2\",",
									"        \"b5bb240b-e71b-1704-a343-b976c05a3ef1\",",
									"        \"6d78d422-adbc-e9a0-ff5b-79f2934442af\",",
									"        \"5162fa95-e74e-2916-3771-ea5e2f59d65b\",",
									"        \"5d383e10-8748-0c8b-e9e7-073c52da34e7\",",
									"        \"04e0fd1e-3cba-f09d-7c4a-0966b52c9556\",",
									"        \"85587f25-1f1a-e245-b9ee-e5eb63964612\",",
									"        \"e8be450b-d0ce-ed34-95e7-821871ccf730\",",
									"        \"4e557e5c-17c2-84c0-7dda-82cd7593fa11\",",
									"        \"7113e37e-ff58-ba1e-1cf5-9902d698c232\",",
									"        \"649dec3f-910a-6147-a599-bee65689fc93\",",
									"        \"f0aa80ef-2592-2d2a-6cc3-fcd3c2937885\",",
									"        \"d8630164-6c15-2737-bc05-d605746ec9e9\",",
									"        \"e80cfead-15b8-f4f7-01cd-6ada6f73b727\",",
									"        \"c796b1e8-5a96-1243-8972-81830db39b41\",",
									"        \"a9d28970-647a-7fe1-f334-476e8840c05b\",",
									"        \"0ceff77d-a8ba-24aa-9c8a-980fbce8c181\",",
									"        \"6f160c82-f8b6-dad5-35b3-c659cac7bf90\",",
									"        \"c25397d2-4080-5273-b230-122085285f03\",",
									"        \"285b11eb-9ab5-2c2f-f75d-2b801f33cf46\",",
									"        \"8132da12-e499-767d-4375-0e5069c5d19b\",",
									"        \"5548c2e8-8920-104b-b9a6-c9ae02342b04\",",
									"        \"0e0f3757-77cb-bff2-b144-0421fe5ddebf\",",
									"        \"e9ffde28-cbaa-1ae0-a7b4-d14f119dc9b2\",",
									"        \"6cb52ff0-9d4b-6132-2ce4-84d44d0674f2\",",
									"        \"0017a4fd-0d32-0156-de21-7d109719af5f\",",
									"        \"3ec238c1-2327-43a5-48ea-18ae20295ed7\",",
									"        \"6da2522f-bb9c-4230-d013-d4221a1d08e1\",",
									"        \"b7cfd159-9a10-30f0-882b-7d1cc3ff2b32\",",
									"        \"9aceec39-d31a-6fb9-0a63-0a3c42df7080\",",
									"        \"7b350aa4-53bd-c9c6-6a8a-2d26d1dd0a37\",",
									"        \"b28710ed-3d49-3b34-e212-38d85391c9e1\",",
									"        \"bd48eea4-2d92-3963-8dab-95b926c24fe5\",",
									"        \"7bcbf445-b485-0b35-add4-9fb666d55e2f\",",
									"        \"4e3ba1c0-ea9e-b8f6-da77-73cc072d36d2\",",
									"        \"464baa99-597f-53b3-a070-401459c9802d\",",
									"        \"9f75cccf-4c48-fe1f-59f7-fce3b9f73e76\",",
									"        \"3bf1353e-9ace-7f4d-e25c-926feb16b680\",",
									"        \"601b9190-1e56-6593-6ed3-3ac9acf5de9d\",",
									"        \"979c2655-cc38-6c87-b1a0-b228a369e681\",",
									"        \"d96346bf-3bd1-cad6-c08b-fc178ed1c493\",",
									"        \"b5c9948f-dcf8-93a6-40a9-dece6c7e0e4c\",",
									"        \"c84af9f9-760a-841c-55d4-1176cce14df0\",",
									"        \"b1bce313-7550-a084-a8e4-fddfb79c50ee\",",
									"        \"3b5f1abf-ecc1-4a29-5c9a-96307b9066cd\",",
									"        \"cbf9b456-2ada-a1a8-c83c-eb32d727d09b\",",
									"        \"4a946da6-3548-fccb-6a4c-6a4b7ade0adf\",",
									"        \"9140daaa-17d3-388c-da0e-5eace3900dba\",",
									"        \"17d0a805-747f-e222-4008-6aef21dbca1c\",",
									"        \"4d9410fa-d602-7b71-7c2f-4cb7bbe61fa0\",",
									"        \"51eec5ff-02b5-b56a-a2df-e936d8f458ef\",",
									"        \"95d4720f-9682-2e69-886a-6aa6ae3010f8\",",
									"        \"ac183c90-507c-c6c7-530b-85c40ac629de\",",
									"        \"12bb63ae-dbda-52d3-3e9c-ea8825854e2b\",",
									"        \"322d274d-358f-2bde-3fae-66cd76bb5131\",",
									"        \"069293f9-2970-1107-20a7-c267d4ee2c75\",",
									"        \"3a5f7a55-3780-57d8-ed18-217faed78158\",",
									"        \"1b966e58-e358-68ad-7baf-cf3af7364298\",",
									"        \"74dd14d0-7f0e-bc10-eafe-034842b40f5c\",",
									"        \"d2943056-1599-a803-7fbf-efdeffa0bfc7\",",
									"        \"6086b2fa-2ace-6105-da0c-3ecbc68dfb51\",",
									"        \"d8292d3e-2872-bbe0-7ec2-62e281ba8e48\",",
									"        \"e399962f-6470-c2d6-a17c-9e88f46a0a92\",",
									"        \"8ba65606-9f14-e989-68a0-28e801dd8743\",",
									"        \"cfbb83c2-c371-c3f5-971f-955a9eff2f65\",",
									"        \"42004ef5-5469-254e-90ce-50bbbc34ad5f\",",
									"        \"e0f42ce1-64df-e79f-ae6a-d7731d51c80e\",",
									"        \"a69b3f9d-c490-ab0a-b0eb-3f7295cdf76a\",",
									"        \"55a26fd5-45d8-76d2-2878-6ee87835a356\",",
									"        \"957200ee-dfb9-ec80-f158-30d25aaedf4a\",",
									"        \"2bff21f9-ed17-62ba-16f9-4ac1a3dc3756\",",
									"        \"9ce66f04-49c5-e3d6-995a-b07e8dd3b9bf\",",
									"        \"a7abc99e-4c97-6b41-f836-ba455f00d55b\",",
									"        \"eda43b92-6865-3ae6-b36a-e8d37244829d\",",
									"        \"798b7d74-6b3c-2c2a-8014-953134d9e62a\",",
									"        \"2896cdec-ec99-7582-3121-58f76cc9474b\",",
									"        \"d727659f-0d75-72f3-574f-5ae300d40f8a\",",
									"        \"14890191-4561-8e7f-015b-74c85f93d1bd\",",
									"        \"58bbd1b6-d3ba-5ddc-f76e-62305c67144b\",",
									"        \"218332b0-51aa-8e8c-c215-b3835164c4c1\",",
									"        \"25599c3e-f84f-ff24-518a-23137741f837\",",
									"        \"2a880b89-199f-edfe-7c54-ec7bb0e564b8\",",
									"        \"c7dd2245-17b8-e318-a831-caddcd875d03\",",
									"        \"a33f25ed-7ae6-98ea-cbc1-d4cd1036967b\",",
									"        \"d03c6f2e-027b-006f-e8cb-ecd3e36b21b4\",",
									"        \"6a3b9a74-4ff4-bc62-077e-04b8b9c3947c\",",
									"        \"76ba20e4-7b06-1b8f-f46b-bac8d8d0493f\",",
									"        \"5b96ab81-9e1d-b668-d1c2-50709ae930ab\",",
									"        \"3454a1a3-20d6-ce99-4a8e-82f79a530e0b\",",
									"        \"bceda1b9-c26f-d4f1-e3b1-6104c8fb7de4\",",
									"        \"8b1862fc-f9c1-4c0e-901b-91aa6d853bb3\",",
									"        \"e37fd416-6b89-c30a-cb24-1e87fa6d864a\",",
									"        \"fe7bccd0-123d-9129-2bcc-91f8822eafbe\",",
									"        \"3b7d24fc-7878-ff8d-b7a4-ad1f14e92980\",",
									"        \"7c69925d-4a4b-9f62-5b83-266718fbaf4d\",",
									"        \"83d190e6-b27a-3f93-49e0-39818b67ce82\",",
									"        \"090ec465-f898-af35-534c-87fea52e1c91\",",
									"        \"2a2d778d-9c20-f0bd-4552-4b683c6c33d8\",",
									"        \"8cb1c24c-01af-be16-db43-4826612c86f9\",",
									"        \"fcba7519-1795-4569-e4c4-6521bd8549ef\",",
									"        \"e226589b-f5d9-11ef-f6c0-05a9731dd930\",",
									"        \"1ef8f3d7-3c05-0e70-727a-92eeebd9b475\",",
									"        \"95dfad88-c046-c396-aa58-5073fd2dc773\",",
									"        \"2118ba01-0081-9c19-3cef-bf700ae94e9d\",",
									"        \"ec1068bc-7a13-1d2c-1926-8cbfe22cd23a\",",
									"        \"37988ea8-84c6-ae8d-6468-b4099b358a28\",",
									"        \"c61e3fc8-78f8-6a39-37f1-d9bb70a51d49\",",
									"        \"ee891461-e022-5ffc-5208-c4c959d50d78\",",
									"        \"0e7a0066-9b4a-86be-2832-96da2216fca8\",",
									"        \"13e8cfa5-c421-b599-02b4-768ede0f843e\",",
									"        \"f46d0b5c-d723-975d-1e55-e3e1bdc7a602\",",
									"        \"04231804-8655-0d5f-a51b-157a13b427e8\",",
									"        \"9c20d0c9-f96c-5711-d161-7b47cde657f5\",",
									"        \"73bb3383-ac56-98a4-72e3-b1922b459741\",",
									"        \"d7b7bdb7-e89d-7783-194f-7fc424396b25\",",
									"        \"cc990363-d368-92b4-1984-329a4dfd0ce8\",",
									"        \"67c111ab-dd0a-16f5-bdd5-c112a7d47dfb\",",
									"        \"e99eb140-4f25-35b5-e6eb-7deeb0697dac\",",
									"        \"13514748-8b22-c0c4-abc2-744ccac0bd1a\",",
									"        \"54aef9d3-2623-b874-30ec-e375f432d1ee\",",
									"        \"a5e11fb1-25e1-8daf-2f41-619b953c305b\",",
									"        \"65fcf7ca-ff57-72a7-4756-b914bda630df\",",
									"        \"44bedf25-4661-1182-211d-1da66e5f7071\",",
									"        \"22f8939f-e2c6-fe4f-fb16-3722a6e6dd0d\",",
									"        \"4ab94f03-4e5f-8ad2-0b8e-0e98a8e1830b\",",
									"        \"001b3d9b-090e-1ee1-53c5-3b0e6efb2159\",",
									"        \"43165551-083b-595a-67e1-d44c3d81777a\",",
									"        \"8127ca30-a6af-bf5f-fe81-f5fcd12bf906\",",
									"        \"c0fc2936-0f80-d577-ea9e-0d28cc7040b2\",",
									"        \"fe05afbb-2db0-d186-3158-a2841cb73093\",",
									"        \"b1e868b1-db31-d7ef-9b82-5d68fcdd8a80\",",
									"        \"355b8a70-25a5-8548-89c5-0e220dc98245\",",
									"        \"0eaf8226-a620-bd45-1b9b-f7f489a1adfa\",",
									"        \"287a2bb1-f442-951a-2c38-18ef2bb60b26\",",
									"        \"ce921aee-b487-eaa0-f494-67791d635cdd\",",
									"        \"95ca6536-2c65-6243-c726-746acb05b98f\",",
									"        \"173318cf-1e53-4fd8-8fcf-6e20dc6c810f\",",
									"        \"d1ea553a-a481-f93b-57b1-9d54ea5457e0\",",
									"        \"b97caebd-314d-1bce-e04a-21e255613efc\",",
									"        \"27c0fdc8-1f18-019e-3224-09b61635d0a2\",",
									"        \"d3e41fdb-9ca6-af88-2ebf-f1e684089687\",",
									"        \"4d1e96a6-69d0-9bf4-0018-434d6b69ad23\",",
									"        \"f0afb453-a268-2648-35be-1e4e9bd852a8\",",
									"        \"cffd96ff-a5a7-416a-eff9-60f7a24a2bb0\",",
									"        \"d3ea5e4f-1d31-b9ac-be87-b6db286a16b0\",",
									"        \"b10db0e1-726c-de28-6c14-5ed630c9bac8\",",
									"        \"67818320-f1c6-5d1a-1ee5-33831c222c8a\",",
									"        \"25faa955-2e6c-bee3-5d88-b24b263a2f9f\",",
									"        \"79734e4d-c823-f891-1468-ec9b0671d821\",",
									"        \"0d95fb1e-fb08-ed0c-1017-ad35117a4251\",",
									"        \"6dd993d5-06fd-9d47-3225-89d7a62a71e6\",",
									"        \"c10fc3d0-cce8-8dff-88c7-cb789a7a4d27\",",
									"        \"2fd6a564-adcb-c9d8-8001-04d91d136f63\",",
									"        \"bf1d560d-6aed-eebc-bdb6-298fc59f42f1\",",
									"        \"a003b2b9-c317-6d08-70c0-ac5470f90a6e\",",
									"        \"d99f436d-7e1f-5f98-7855-8b62f4cd19da\",",
									"        \"06503ee0-56cd-1d3e-2a28-ff28d65565d0\",",
									"        \"c4dbe960-70ab-3273-25fb-c4b3e0672458\",",
									"        \"94fbba21-6630-bb25-ae1b-2ffe3e259a3c\",",
									"        \"6df5a799-0639-ae2f-5e89-15c9fdd3d895\",",
									"        \"1e9f40be-c4ec-a612-e42a-101e7eadf6d2\",",
									"        \"922e99af-b67d-86aa-cdb3-5ab0cb647a88\",",
									"        \"eb9984a7-de4e-fbbf-ece1-3a35507d7f20\",",
									"        \"537a3e68-32dd-0055-7d21-a1484adde6fe\",",
									"        \"2dac7037-035c-e9a2-525e-3d57f315b8b8\",",
									"        \"ff426d45-db6d-3f25-afed-1152f646a060\",",
									"        \"457c8acd-1923-9878-609c-7ca9bf95f5ad\",",
									"        \"8c6d260e-aa82-32b5-59b2-f648ce782347\",",
									"        \"0a9b49b5-9959-cf15-3338-d730d3d9bb3e\",",
									"        \"3d638c03-2b82-d1ed-420c-e5a7ca88a9eb\",",
									"        \"4753b9e8-4a23-7079-9a7a-0b4fb6b7755f\",",
									"        \"5f86c4ef-3e05-dc34-a06f-ef76c7458732\",",
									"        \"490a6e1f-7912-034d-92b1-f1f9e3fc78db\",",
									"        \"821cd139-a747-2831-de0a-4d7bc53d9598\",",
									"        \"a6385039-8816-0fda-15b9-f7a1b3844142\",",
									"        \"8eb6945d-6e6d-4c65-f3f5-f546a6b206f1\",",
									"        \"8f242e21-f1c5-6724-10d2-77c078c2963d\",",
									"        \"f09f9244-1bd0-bcc3-e6a7-f925de1ca431\",",
									"        \"f463f9bb-e126-ea74-055f-5604ccc6b9a0\",",
									"        \"4229f5f4-5230-a3c8-2fc3-31238c68b99a\",",
									"        \"3419aba2-b6ec-911f-3f20-94655fb379a5\",",
									"        \"35edb0a5-7fd3-02b3-5f73-0d20c63b7ca9\",",
									"        \"fb519ecb-1903-37c1-e8e1-f275797f4332\",",
									"        \"cfef1261-21b0-1cee-efa8-202191e1b24b\",",
									"        \"e0eff1f8-fbee-b486-455f-5659daf12cea\",",
									"        \"ae562f71-d2f6-0c0d-4d94-4c1e1224a6f6\",",
									"        \"7aa6e1dc-7c3d-fbe3-7058-72610dd78339\",",
									"        \"acb0ce16-dddb-45b9-3337-b15f70e8bd5f\",",
									"        \"cb29e242-6be5-6847-a618-132e894951e2\",",
									"        \"17463e82-fffd-0ce5-b290-6e69517be87b\",",
									"        \"dc88ebe5-aeb4-faec-1dc1-ce8b129257eb\"",
									"]",
									"}else if(pm.environment.name === \"dev\"){",
									"    payorExternalids = [",
									"        \"56e1db12-7e55-01fd-7e3e-ac646787d538\",",
									"        \"c99ff236-7f9b-71eb-b610-b79d3365e15a\",",
									"        \"56391f4e-db3b-1edd-f8d4-5af607d80e36\",",
									"        \"7fdf104b-0872-5f5e-e15e-2230612c93f7\",",
									"        \"6c852a69-85ab-ae65-4abd-b1a278ecc6bb\",",
									"        \"7c341c51-68aa-c919-821b-672aa406070c\",",
									"        \"f938a618-8dbf-d563-7858-333a7fe5433f\",",
									"        \"77b71493-e1b2-3d35-f26a-c1e0bb895827\",",
									"        \"d0cc155f-a8be-77a1-cb08-175d7ff48a70\",",
									"        \"8d03afa7-ceea-00be-9e2a-11eb047a0a99\",",
									"        \"e3e9ca54-3fe0-3068-2c9e-95022ccfd3a6\",",
									"        \"cee8a51f-79e4-bfad-9e5b-5d770fbfa31e\",",
									"        \"dc0feb71-161f-a80a-9074-2644f9a83e44\",",
									"        \"67414e30-57f7-1bd6-b708-f8657fdb85da\",",
									"        \"fc6a1381-b24a-b9cf-18f9-4ba74492015c\",",
									"        \"22f7196c-8e7d-29f3-2d57-a9af25724f3f\",",
									"        \"722f1795-d525-1b80-67b2-e7f756bcad44\",",
									"        \"8eceb97a-f94f-106e-0156-9372e40c952d\",",
									"        \"5c1f5574-6582-0d89-692b-cf099206d2bf\",",
									"        \"9546dc67-aef1-72ab-e340-983bddbcdb77\",",
									"        \"a0ade096-52ab-fc3e-8347-5dabf4ced886\",",
									"        \"5340cb8e-9d53-9be5-0af3-02afc24cd06e\",",
									"        \"9f58e2a8-ddfe-cda2-a844-9b1ed5879037\",",
									"        \"2f0a9b51-f311-2416-3b02-46f0876a1f1b\",",
									"        \"b5a7419c-7224-a65b-b940-75759394b4d0\",",
									"        \"9f5324a2-7d74-f4fe-b5ee-ecfc2e8959df\",",
									"        \"3ad62974-129f-5449-95dc-031e978a531b\",",
									"        \"828c09c5-aa47-6a23-bfda-c7c1fecfe063\",",
									"        \"5fb58801-58b4-9f72-ecaf-60f1999236de\",",
									"        \"2d51586e-2e4c-a822-f5ac-79687d949531\",",
									"        \"b7f1823a-0953-9225-6bdc-3f9414f356ff\",",
									"        \"0a36d50d-02b3-e36d-51e9-d745e26f94eb\",",
									"        \"bb0a2bdc-4a92-6c5e-0ee1-c59896729588\",",
									"        \"59815314-0a43-0412-9872-0349fcec9a87\",",
									"        \"da83815c-e2d3-40d7-e2c8-01e0cd7f74a4\",",
									"        \"3896b81d-ccec-4a05-e3dd-cae42f16453f\",",
									"        \"2caf83f0-8a2c-c622-db70-9faf471094df\",",
									"        \"8e21d58b-b05d-8771-70ee-371ec5555c3f\",",
									"        \"d619cf91-882c-712c-42a9-a9cf909bbcdb\",",
									"        \"9898f740-86c0-0869-beaa-1501a02fb404\",",
									"        \"2e32b236-3de4-8724-b93e-b121ffcdd663\",",
									"        \"1f78e27c-1656-163f-9272-b8022de03425\",",
									"        \"5d5e3fdc-b363-b45c-551c-5e0a2654a218\",",
									"        \"fbb105e4-82d0-3b8f-9a5f-35689bab4f63\",",
									"        \"780f2bcf-3065-13a3-adcf-490e84a49c8a\",",
									"        \"b3e5ed5c-2789-8e18-b949-f5e0a8e49c29\",",
									"        \"0d021e18-9f9a-7c07-e035-ed1c65820201\",",
									"        \"4cc2fdcc-39c5-204e-af17-d371797c8da5\",",
									"        \"43a43e5e-33f7-d659-ef54-b25bbdb0bf30\",",
									"        \"09a34d91-79ea-d8ca-90e6-ebc01e355eac\",",
									"        \"89f59190-ddd9-1037-9cf0-bf0526c522b3\",",
									"        \"3d3dcc62-b833-bd5c-5143-d67a920e34da\",",
									"        \"88c7c852-b957-f6c7-d261-55a81bae2eb7\",",
									"        \"d322bacf-a088-2e8b-f761-bc86d1f3f4ab\",",
									"        \"e714f5a3-1ea5-a87c-a4c0-38e06f8d2dc3\",",
									"        \"9298d74f-08cc-a58f-76db-2858befab318\",",
									"        \"420d036f-d8ff-31f1-13c6-f0ea7ae2004f\",",
									"        \"135554b1-d5da-ffd2-baf1-1d8e30615f24\",",
									"        \"e1dfdcb0-7fb2-1972-cbbf-b92510b739df\",",
									"        \"6d8afdad-6876-45d8-5dc1-82718bb38910\",",
									"        \"4d85e003-8414-3a00-2975-29feb860ce61\",",
									"        \"274008f5-1d1d-c2c3-8e6f-ebbf79a21d05\",",
									"        \"53994cf3-4bc6-7e33-a079-b2da9cfc1233\",",
									"        \"7df9b205-64c7-8a82-e7e4-f426c36da508\",",
									"        \"5be925ae-4d8e-3499-cffb-c805090c5b0e\",",
									"        \"37567775-9154-07eb-dc80-163144f8902d\",",
									"        \"7c2d8198-2d2d-caab-556e-421d3fdf4231\",",
									"        \"ae120eb4-783d-d12b-1cc0-a27faaa558dd\",",
									"        \"eac266f2-5520-142f-15e0-958b88453bf2\",",
									"        \"d142a418-153c-5ce5-8c0b-69613165c5b1\",",
									"        \"3588543a-c32e-4630-5aa3-07565bf5aff3\",",
									"        \"a2745127-1e5e-ddc9-5928-fc684a7f79b2\",",
									"        \"5634100f-c1f9-d774-7b3b-e890f7156282\",",
									"        \"2d70a060-62d3-8ecf-9753-3ace4682be87\",",
									"        \"6c8d21c9-112c-29bb-cb39-3031c17edac1\",",
									"        \"0a41322f-b1a3-0d75-4a6a-0cfe0cbb7584\",",
									"        \"b597c39d-7dc2-ec60-84f0-bc6cf3b3f04a\",",
									"        \"3eab1bc1-edc5-9ea3-22d3-7e94b68f7d81\",",
									"        \"2bc74ad3-29e1-218d-a332-1686e3fe3809\",",
									"        \"ec506779-54ae-507c-d190-6cda272f9646\",",
									"        \"c8b272f0-9e35-1274-0be1-92048540c4f6\",",
									"        \"418f9afc-9665-a69d-2e2d-90e76b062c1a\",",
									"        \"653bd3ac-2975-c806-7fa6-ece182481f96\",",
									"        \"f9ac8820-9eb6-20d5-92d6-b1d5b7afcec4\",",
									"        \"53795161-3e7b-cfda-b414-4380dbe73aab\",",
									"        \"f0058ecb-daf6-401d-119c-e2dc33965c63\",",
									"        \"6d29ab83-0a71-a508-8968-bdbf5cf14fb5\",",
									"        \"e92f03f1-6b6d-fff1-acd6-1cdeec6c7729\",",
									"        \"3015be5d-ab80-1e91-8897-78f940f91f81\",",
									"        \"e1dd302a-b8ba-98ba-e192-aee1c321e629\",",
									"        \"b3e5f2b5-39ba-dc32-d4b3-d10c42066ae9\",",
									"        \"6360eeaf-edbe-cd2d-1704-85bb4d9f0db8\",",
									"        \"c01f2394-aa8c-1356-7ead-0425e3f05aca\",",
									"        \"5bcaf9b1-ce54-6c78-2305-87107fc6be56\",",
									"        \"634a79c4-b0cd-3f42-6a03-092b716005e3\",",
									"        \"4581c883-c030-a270-76c0-48c8d6e6c8d9\",",
									"        \"1ad2cea9-789f-df99-c939-3aea441a687a\",",
									"        \"2558adad-06f4-c397-b87a-0ca9db1d463a\",",
									"        \"a93c50d6-aea1-5d39-164e-3adf8ec87431\",",
									"        \"72a8dd10-cdd0-8fbf-5859-660a25623f4c\",",
									"        \"ddf96a9b-f1b2-6298-ff96-2300f6a25b5c\",",
									"        \"5666829b-6619-bc42-4e89-3ab98323f8fc\",",
									"        \"3fe3c7bc-757b-312f-af20-18a426d91a4f\",",
									"        \"8413a34f-262c-5468-be04-4db1e7c66f2d\",",
									"        \"d4865c06-68cc-46f6-258c-ea75185855fe\",",
									"        \"7991f244-092e-9c37-6195-67992743e429\",",
									"        \"5137d30b-6ff2-240d-1fc7-8d18d3f5d4fd\",",
									"        \"a5c01c64-1f18-c180-da95-916c6626e920\",",
									"        \"21ea1122-f691-85a1-47ac-e265b58e3d68\",",
									"        \"d5a74ed6-70b8-0705-50b3-18e40463e267\",",
									"        \"45926898-0110-d28d-172c-e7717da65e88\",",
									"        \"5a95289b-48aa-890e-c16d-90708d0f4ef8\",",
									"        \"a4e4827b-2a65-eff2-7770-0942c13a5bbb\",",
									"        \"67e6b5f6-8244-f19e-a759-6fc61cf99c0c\",",
									"        \"f284d98f-1d80-0b5f-7052-83ac5faedf7d\",",
									"        \"eb784ccf-23a5-d0ea-dd6f-61346aa4983f\",",
									"        \"13727cf0-b2df-85c3-cfb7-86e7ae85616b\",",
									"        \"7f2a1331-2a9c-2c0d-55ec-8272114722c7\",",
									"        \"9db66f8e-345e-3d5d-492e-2e77077b968f\",",
									"        \"49fbb711-e493-673b-6a81-b258422cfd55\",",
									"        \"f909283f-34ef-9970-d1e9-6d302a6e6496\",",
									"        \"97c356c6-90fc-8b8b-3d7a-46ed87e439c5\",",
									"        \"0e5ce00a-4326-32d0-f433-02a6d62ef957\",",
									"        \"be5d7b0e-e919-b049-250d-63c0f40b527a\",",
									"        \"6710efef-31ff-4bf0-be7b-efa4e4c8d3e9\",",
									"        \"342587d3-684b-d0e7-5608-9bc7fa3dc024\",",
									"        \"1e6edb88-1e75-96c9-6976-dbd8702ab4c6\",",
									"        \"4cd89fd8-cdca-700f-36b6-25fc67b10c27\",",
									"        \"53cfd269-173a-070f-ef9a-6be3f62a077e\",",
									"        \"b67245ac-f0d0-1854-72e5-44ccff0afa35\",",
									"        \"b57019ec-eda6-1716-3bb7-abb27f54c4fc\",",
									"        \"e99586b8-bb31-8343-424e-b2be61e36479\",",
									"        \"1f470ccc-68b6-79d9-f7e2-e61ef653c18c\",",
									"        \"2335c152-d13c-6fcb-3162-ab66d6b703d6\",",
									"        \"266a7f8d-0e10-c7bb-077c-6ac63a5a88af\",",
									"        \"e5261244-6ab6-8617-11cf-8cdb64d47e52\",",
									"        \"79e4fa96-2bde-c033-247c-6f7815df29b0\",",
									"        \"8f0419a0-8303-752a-6094-e304360b34a6\",",
									"        \"88f1903b-33c4-fb54-fbd9-bcc1d6e790df\",",
									"        \"e96cf20f-5a39-54c9-17d3-236bed16e51c\",",
									"        \"f21d3a9f-d737-3964-56b1-cdeb83ec6baf\",",
									"        \"4b4aef22-7ce9-d5ef-7324-11949696dbf8\",",
									"        \"20775037-494d-cb9d-3d4c-ff9ecb2eadef\",",
									"        \"0f10b4b0-6af6-5c40-8ed2-2105e7a7b3bc\",",
									"        \"4d459557-317b-c0a8-adf9-f90ce4f111e9\",",
									"        \"c1acf4d0-e787-ab92-fa25-d1dddac56f03\",",
									"        \"84235458-5076-361d-67d5-c69dbbbbf507\",",
									"        \"6aa68889-4ab9-569d-87db-ac1f5c8eea04\",",
									"        \"824338c4-643b-65dc-d500-64b6fe04a7da\",",
									"        \"eccf06c9-8619-50e6-e1e4-b2b121d1b794\",",
									"        \"eb9b7f63-9775-8586-4360-52ce304306ce\",",
									"        \"18938217-5a13-21e4-27f6-f03e0ac5cd57\",",
									"        \"038ba477-943d-a75a-0570-29be87cdc493\",",
									"        \"b1f10152-309b-cdb6-a309-d041fc7e39e1\",",
									"        \"cb92c686-0ce2-e624-638e-07f221a634ad\",",
									"        \"42d50613-677d-34dd-7e74-d6859654418c\",",
									"        \"a65b22c3-36ea-27ff-d573-67f10d3dafff\",",
									"        \"7a846eb7-7bba-f92b-286d-10f5998eea81\",",
									"        \"adee981c-4efd-3ed1-1b1d-324c3df4a6d2\",",
									"        \"15c305e1-82db-3cb0-bc8e-01eb0c9faa29\",",
									"        \"59935283-a209-4ecc-9790-bfe035560b5a\",",
									"        \"4cd50ee2-30f3-3fa5-5ac9-d836d9e6a77e\",",
									"        \"2a1c7092-efdf-0b2e-4260-aa11b0000f49\",",
									"        \"5054af4a-4cdd-65b5-879f-9a14a500a551\",",
									"        \"5a68c519-9b49-7e95-833b-84268506b0d1\",",
									"        \"1c50c7cb-df74-8d69-f354-520b27415c3c\",",
									"        \"278520a4-15ac-2d17-fb51-9a099e75c5e0\",",
									"        \"953178e8-f534-a228-f968-60d3a974a9a1\",",
									"        \"58bb7c85-a9dc-f9e5-e160-6819857214ba\",",
									"        \"ad26d957-d231-0457-54d6-e0f071eab3b1\",",
									"        \"57ebea90-f0bf-5c73-0f3d-67eda0c04b59\",",
									"        \"17059ee6-904b-a5db-9626-9e32c6e7932c\",",
									"        \"1c1ce3de-c780-d727-2128-b96a62d17361\",",
									"        \"696d1b2e-4f85-d14c-a208-c4d7d9eb7153\",",
									"        \"df73f571-61a2-c420-94c1-6c1e0ef88418\",",
									"        \"d8fc2e5c-d3ed-3fc1-2750-c0982d4c82fd\",",
									"        \"21f8f9d6-785a-590a-e1a3-f136a4c1309a\",",
									"        \"301422fa-a3b7-b13b-012f-ac4d26242ef5\",",
									"        \"e40713d3-3c8b-072a-ec42-8d3eeced212a\",",
									"        \"adf8c833-d476-8edf-6e11-8652365061d9\",",
									"        \"bccbf46e-674a-9285-2a84-05a38c639418\",",
									"        \"aba32389-2f9a-cbdb-3990-fc51aaa076c2\",",
									"        \"42e4d78b-2ada-cf64-0205-215d170aba19\",",
									"        \"d9d7e79c-b2e4-e733-a4b6-1153fe6852e9\",",
									"        \"d4a192d6-f056-a0cb-35e1-dece578fcb5f\",",
									"        \"b4a2448f-5ea3-8246-9e7a-11e95f4338a1\",",
									"        \"24a76d7c-4222-d5e4-5187-97641617d1d5\",",
									"        \"219df6ae-a750-8e31-9eb1-aef6b3d38ab2\",",
									"        \"556302f6-8391-0008-7fdd-e5e703e1e5e1\",",
									"        \"4c77525d-1212-654b-cf43-3e1fa704c75a\",",
									"        \"c868f532-e2bb-4551-4367-5101d642cc1a\",",
									"        \"dcc34dee-b129-27f3-ecb7-653d3d3d37c7\",",
									"        \"348bfae4-76c0-2f1e-29ac-b83f8649ac08\",",
									"        \"ecd84403-8dce-b8ee-787d-3f59282d375e\",",
									"        \"a7de2fe9-13ef-52f0-b662-53b7910be768\",",
									"        \"c82cf87e-e9eb-a65f-1e8d-979b3397a214\",",
									"        \"d96148ca-2a64-2e76-3abc-6383c98b6698\",",
									"        \"788ca11a-6870-d7c2-b45b-07117a4f7da8\",",
									"        \"4b84b309-081e-4f41-ac45-a2433a8ca0c5\",",
									"        \"8a0f5f79-476a-6f08-3a16-cd8d26ed6923\",",
									"        \"10dcebdf-0df7-4b26-4c07-a71bdbbe6c55\",",
									"        \"9ec17e6b-c45d-1fc3-fad3-6ea63ecdcd5d\",",
									"        \"a810300d-94a2-5968-3f45-d50e786de84d\"",
									"    ];",
									"}",
									"",
									"const payor_names = [",
									"  \"Aetna\",",
									"  \"Affinity Health Plan\",",
									"  \"AgeRight Advantage Health Plan\",",
									"  \"AgeWell New York\",",
									"  \"AIDS Healthcare Foundation\",",
									"  \"Alameda Alliance for Health\",",
									"  \"Alignment Health Plan\",",
									"  \"AllCare IPA, fka Mid Rogue IPA HealthPlan\",",
									"  \"AltaMed PACE\",",
									"  \"AmeriHealth Insurance Company of New Jersey (AmeriHealth) and AmeriHealth HMO, Inc.\",",
									"  \"Amida Care\",",
									"  \"Anthem, Inc.\",",
									"  \"Arkansas Blue Cross and Blue Shield\",",
									"  \"Aspire Health Plan\",",
									"  \"Asuris Northwest Health\",",
									"  \"Atlanticare LIFE Connection\",",
									"  \"ATRIO Health Plans\",",
									"  \"Auxilio Salud Plus\",",
									"  \"Avera Health Plans, Inc.\",",
									"  \"Beacon Health and Social Service, Inc. dba Beacon of LIFE PACE Program\",",
									"  \"Bienvivir Senior Health Services\",",
									"  \"Blue Cross and Blue Shield of Alabama\",",
									"  \"Blue Cross and Blue Shield of Illinois\",",
									"  \"Blue Cross and Blue Shield of Montana\",",
									"  \"Blue Cross and Blue Shield of New Mexico\",",
									"  \"Blue Cross and Blue Shield of Texas\",",
									"  \"Blue Cross Blue Shield of Michigan\",",
									"  \"Blue Shield of California\",",
									"  \"BlueCross BlueShield of Tennessee\",",
									"  \"BlueCross BlueShield of Western New York and BlueShield of Northeastern New York\",",
									"  \"Brand New Day\",",
									"  \"Brandman Centers for Senior Care (BCSC)\",",
									"  \"BridgeSpan Health Company\",",
									"  \"Bright Health\",",
									"  \"CalOptima\",",
									"  \"CalViva Health\",",
									"  \"Capital District Physicians' Health Plan, Inc. (CDPHP)\",",
									"  \"Care N' Care Health Plan\",",
									"  \"CareFirst BCBS\",",
									"  \"CareOregon\",",
									"  \"Cascade Health Alliance, LLC\",",
									"  \"Catholic Health LIFE\",",
									"  \"CenCal Health\",",
									"  \"Centene Corporation\",",
									"  \"Center for Elders Independence\",",
									"  \"CenterLight Healthcare\",",
									"  \"Centers for Medicare and Medicaid Services (CMS)\",",
									"  \"Centers Plan for Healthy Living (CPHL)\",",
									"  \"Central California Alliance for Health\",",
									"  \"Central Health Plan of California, Inc.\",",
									"  \"Chinese Community Health Plan\",",
									"  \"CHRISTUS Health Plan\",",
									"  \"Cigna Corporation\",",
									"  \"Clover Health\",",
									"  \"Community Care Health Plan\",",
									"  \"Community First Health Plans\",",
									"  \"Community Health Choice, Inc. (CHC)\",",
									"  \"Community Health Group\",",
									"  \"Community Health Plan of Washington (CHPW)\",",
									"  \"Complete Senior Care\",",
									"  \"ConnectiCare, Inc.\",",
									"  \"Consolidated Association of Railroad Employees Health Care (CARE)\",",
									"  \"Contra Costa Health Plan\",",
									"  \"Cook Children's Health Plan (CCHP)\",",
									"  \"Crystal Run Health Plans\",",
									"  \"DAKOTACARE\",",
									"  \"Devoted Health\",",
									"  \"Driscoll Health Plan\",",
									"  \"Eddy SeniorCare\",",
									"  \"El Paso First Health Plans\",",
									"  \"ElderONE\",",
									"  \"Elderplan, Inc.\",",
									"  \"EMI Health\",",
									"  \"Excellus BlueCross BlueShield\",",
									"  \"Fallon Health\",",
									"  \"FamilyHealth Center for Older Adults (PACE)\",",
									"  \"First Medical Health Plan, Inc.\",",
									"  \"FirstCare Health Plans\",",
									"  \"Fresno PACE for Seniors\",",
									"  \"Gary and Mary West PACE\",",
									"  \"Geisinger Health Plan\",",
									"  \"GHI, an EmblemHealth Company\",",
									"  \"Gold Coast Health Plan\",",
									"  \"Golden State Medicare Health Plan\",",
									"  \"Health Alliance (fka Health Alliance Medical Plans, Inc.)\",",
									"  \"Health New England, Inc.\",",
									"  \"Health Plan of San Joaquin\",",
									"  \"Health Plan of San Mateo\",",
									"  \"Healthfirst\",",
									"  \"Highmark BCBS\",",
									"  \"Highmark Health\",",
									"  \"HIP, an EmblemHealth Company\",",
									"  \"Horizon Blue Cross Blue Shield of New Jersey\",",
									"  \"Humana Inc.\",",
									"  \"ICHS PACE\",",
									"  \"Imperial Health Plan\",",
									"  \"Independence Blue Cross, LLC (Independence)\",",
									"  \"Independent Health Association, Inc.\",",
									"  \"Inland Empire Health Plan\",",
									"  \"InnovaCare Health Solutions\",",
									"  \"InnovAge\",",
									"  \"Inspira LIFE\",",
									"  \"Inter Valley Health Plan\",",
									"  \"Kaiser Foundation Health Plan of the Northwest, Inc.\",",
									"  \"Kaiser Foundation Health Plan of Washington\",",
									"  \"Kaiser Foundation Health Plan, Inc.\",",
									"  \"Kaiser Foundation Health Plan, Inc.- Other\",",
									"  \"Kaiser Foundation Health Plan, Inc.- SoCal\",",
									"  \"Kalos Health\",",
									"  \"KelseyCare Advantage\",",
									"  \"Kern Health Systems, Inc.\",",
									"  \"L.A. Care Health Plan\",",
									"  \"Lasso Healthcare\",",
									"  \"LIFE at Lourdes, Inc.\",",
									"  \"LIFE St. Francis\",",
									"  \"LifeWise Health Plan of Washington\",",
									"  \"Longevity Health Plan\",",
									"  \"Lutheran Senior LIFE at Jersey City\",",
									"  \"Magellan\",",
									"  \"MAPFRE Puerto Rico\",",
									"  \"Medicaid\",",
									"  \"Medical Card System, Inc.\",",
									"  \"Medicare\",",
									"  \"MediExcel Health Plan\",",
									"  \"Memorial Hermann Health Insurance Company\",",
									"  \"MetroPlus Health Plan, Inc.\",",
									"  \"Moda Health\",",
									"  \"Molina Healthcare\",",
									"  \"Mutual of Omaha Insurance Company\",",
									"  \"MVP Health Care\",",
									"  \"No Insurance\",",
									"  \"NY Hotel Trades Council and Hotel Association of NYC\",",
									"  \"On Lok Lifeways\",",
									"  \"Optum\",",
									"  \"Oscar Insurance Corporation\",",
									"  \"Other\",",
									"  \"PACE CNY\",",
									"  \"PacificSource Health Plans\",",
									"  \"Parkland Community Health Plan\",",
									"  \"Partners Health Plan\",",
									"  \"Partnership HealthPlan of California\",",
									"  \"Physicians Health Plan of Northern Indiana, Inc.\",",
									"  \"Piedmont Community Health Plan\",",
									"  \"Plan de Salud Menonita\",",
									"  \"Plan Medico Bella Vista\",",
									"  \"Premera Blue Cross\",",
									"  \"Priority Health\",",
									"  \"Private Pay\",",
									"  \"ProCare Advantage\",",
									"  \"Prominence Health Plan\",",
									"  \"Providence Health Plan\",",
									"  \"Redwood Coast PACE\",",
									"  \"Regence BlueCross BlueShield of Oregon\",",
									"  \"Regence BlueShield\",",
									"  \"Regence BlueShield of Idaho\",",
									"  \"RiverSpring Health\",",
									"  \"Ryder Health Plan, Inc.\",",
									"  \"Samaritan Health Plans\",",
									"  \"San Diego PACE\",",
									"  \"San Francisco Health Plan (SFHP)\",",
									"  \"Santa Clara County dba Valley Health Plan\",",
									"  \"Santa Clara Family Health Plan\",",
									"  \"Santa Fe Employe's Hospital Association-Coast Lines\",",
									"  \"SCAN Health Plan\",",
									"  \"Scott and White Health Plan\",",
									"  \"Scripps Health Plan\",",
									"  \"Seaside Health Plan\",",
									"  \"Sendero Health Plan\",",
									"  \"Senior Whole Health\",",
									"  \"Sentara Health Plans, Inc. (fka Optima Health)\",",
									"  \"Seton Health Plan (dba Dell Children's Health Plan)\",",
									"  \"Sharp Health Plan\",",
									"  \"SIHO Holding, LLC dba SIHO Insurance Services\",",
									"  \"Silver Star Health Network\",",
									"  \"SIMNSA Health Plan\",",
									"  \"St. Paul's PACE\",",
									"  \"Stanford Health Care Advantage\",",
									"  \"State of California\",",
									"  \"State of New Jersey\",",
									"  \"State of New York\",",
									"  \"State of Oregon\",",
									"  \"State of Texas\",",
									"  \"State of Washington\",",
									"  \"Stockton PACE\",",
									"  \"Sunrise Advantage Plan\",",
									"  \"Sutter Health Plus\",",
									"  \"Sutter SeniorCare\",",
									"  \"Texas Children's Health Plan\",",
									"  \"The Basics at Jan Werner (fka Jan Werner Adult Day Care Center)\",",
									"  \"Total Senior Care, Inc.\",",
									"  \"Triple-S Management Corporation\",",
									"  \"True Health New Mexico\",",
									"  \"Umpqua Health Alliance\",",
									"  \"Union Pacific Railroad Employes Health Systems (UPREHS)\",",
									"  \"UnitedHealthcare\",",
									"  \"Univera Healthcare\",",
									"  \"VillageCareMAX\",",
									"  \"Vitality Health Plan of California\",",
									"  \"VNSNY CHOICE\",",
									"  \"WellCare Health Plans, Inc.\",",
									"  \"Western Health Advantage\",",
									"  \"Western Oregon Advanced Health, LLC\",",
									"  \"Yamhill Community Care Organization\"",
									"];",
									"",
									"var payorprogram_names_map = {",
									"    \"AIDS Healthcare Foundation\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"ATRIO Health Plans\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Aetna\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Affinity Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"AgeRight Advantage Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"AgeWell New York\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Alameda Alliance for Health\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Alignment Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"AllCare IPA, fka Mid Rogue IPA HealthPlan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"AltaMed PACE\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"AmeriHealth Insurance Company of New Jersey (AmeriHealth) and AmeriHealth HMO, Inc.\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Amida Care\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Anthem, Inc.\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Arkansas Blue Cross and Blue Shield\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Aspire Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Asuris Northwest Health\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Atlanticare LIFE Connection\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Auxilio Salud Plus\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Avera Health Plans, Inc.\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Beacon Health and Social Service, Inc. dba Beacon of LIFE PACE Program\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Bienvivir Senior Health Services\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Blue Cross Blue Shield of Michigan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Blue Cross and Blue Shield of Alabama\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Blue Cross and Blue Shield of Illinois\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Blue Cross and Blue Shield of Montana\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Blue Cross and Blue Shield of New Mexico\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Blue Cross and Blue Shield of Texas\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Blue Shield of California\": [\"Magellan, Project Heal, SCA, Private Pay\"],",
									"    \"BlueCross BlueShield of Tennessee\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Brand New Day\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Brandman Centers for Senior Care (BCSC)\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"BridgeSpan Health Company\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Bright Health\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"CHRISTUS Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"CalOptima\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"CalViva Health\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Capital District Physicians' Health Plan, Inc. (CDPHP)\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Care N' Care Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"CareFirst BCBS\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"CareOregon\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Cascade Health Alliance, LLC\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Catholic Health LIFE\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"CenCal Health\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Centene Corporation\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Center for Elders Independence\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"CenterLight Healthcare\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Centers Plan for Healthy Living (CPHL)\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Centers for Medicare and Medicaid Services (CMS)\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Central California Alliance for Health\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Central Health Plan of California, Inc.\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Chinese Community Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Cigna Corporation\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Clover Health\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Community Care Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Community First Health Plans\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Community Health Choice, Inc. (CHC)\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Community Health Group\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Community Health Plan of Washington (CHPW)\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Complete Senior Care\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"ConnectiCare, Inc.\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Consolidated Association of Railroad Employees Health Care (CARE)\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Contra Costa Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Cook Children's Health Plan (CCHP)\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Crystal Run Health Plans\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"DAKOTACARE\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Devoted Health\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Driscoll Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"EMI Health\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Eddy SeniorCare\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"El Paso First Health Plans\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"ElderONE\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Elderplan, Inc.\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Excellus BlueCross BlueShield\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Fallon Health\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"FamilyHealth Center for Older Adults (PACE)\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"First Medical Health Plan, Inc.\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"FirstCare Health Plans\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Fresno PACE for Seniors\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"GHI, an EmblemHealth Company\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Gary and Mary West PACE\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Geisinger Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Gold Coast Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Golden State Medicare Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"HIP, an EmblemHealth Company\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Health Alliance (fka Health Alliance Medical Plans, Inc.)\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Health New England, Inc.\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Health Plan of San Joaquin\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Health Plan of San Mateo\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Healthfirst\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Highmark BCBS\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Highmark Health\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Horizon Blue Cross Blue Shield of New Jersey\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Humana Inc.\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"ICHS PACE\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Imperial Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Independence Blue Cross, LLC (Independence)\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Independent Health Association, Inc.\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Inland Empire Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"InnovAge\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"InnovaCare Health Solutions\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Inspira LIFE\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Inter Valley Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Kaiser Foundation Health Plan of Washington\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Kaiser Foundation Health Plan of the Northwest, Inc.\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Kaiser Foundation Health Plan, Inc.\": [\"Central Valley\", \"Diablo\", \"Fresno\", \"San Francisco\", \"South San Francisco\", \"Greater Southern Alameda\", \"East Bay\", \"Marin/Sonoma, Redwood City, Roseville\", \"Sacramento\", \"South Sacramento\", \"San Jose\", \"Santa Clara\"],",
									"    \"Kaiser Foundation Health Plan, Inc.- Other\": [\"Orange County\", \"Project Heal\", \"SCA\", \"Private Pay\"],",
									"    \"Kaiser Foundation Health Plan, Inc.- SoCal\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Kalos Health\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"KelseyCare Advantage\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Kern Health Systems, Inc.\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"L.A. Care Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"LIFE St. Francis\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"LIFE at Lourdes, Inc.\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Lasso Healthcare\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"LifeWise Health Plan of Washington\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Longevity Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Lutheran Senior LIFE at Jersey City\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"MAPFRE Puerto Rico\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"MVP Health Care\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Magellan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"MediExcel Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Medicaid\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Medical Card System, Inc.\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Medicare\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Memorial Hermann Health Insurance Company\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"MetroPlus Health Plan, Inc.\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Moda Health\": [\"Optum Cares\", \"Project Heal\", \"SCA\", \"Private Pay\"],",
									"    \"Molina Healthcare\": [\"Optum Standard\", \"Project Heal\", \"SCA\", \"Private Pay\"],",
									"    \"Mutual of Omaha Insurance Company\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"NY Hotel Trades Council and Hotel Association of NYC\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"No Insurance\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"On Lok Lifeways\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Optum\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Optum\"],",
									"    \"Oscar Insurance Corporation\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Other\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"PACE CNY\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"PacificSource Health Plans\": [\"Navigator\", \"Voyager\", \"SmartChoice\", \"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Parkland Community Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Partners Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Partnership HealthPlan of California\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Physicians Health Plan of Northern Indiana, Inc.\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Piedmont Community Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Plan Medico Bella Vista\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Plan de Salud Menonita\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Premera Blue Cross\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Priority Health\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Private Pay\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"ProCare Advantage\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Prominence Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Providence Health Plan\": [\"Beacon\", \"Standard\", \"Private Pay\", \"Project Heal\", \"SCA\"],",
									"    \"Redwood Coast PACE\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Regence BlueCross BlueShield of Oregon\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Regence BlueShield\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Regence BlueShield of Idaho\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"RiverSpring Health\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Ryder Health Plan, Inc.\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"SCAN Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"SIHO Holding, LLC dba SIHO Insurance Services\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"SIMNSA Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Samaritan Health Plans\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"San Diego PACE\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"San Francisco Health Plan (SFHP)\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Santa Clara County dba Valley Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Santa Clara Family Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Santa Fe Employe's Hospital Association-Coast Lines\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Scott and White Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Scripps Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Seaside Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Sendero Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Senior Whole Health\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Sentara Health Plans, Inc. (fka Optima Health)\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Seton Health Plan (dba Dell Children's Health Plan)\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Sharp Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Silver Star Health Network\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"St. Paul's PACE\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Stanford Health Care Advantage\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"State of California\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"State of New Jersey\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"State of New York\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"State of Oregon\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"State of Texas\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"State of Washington\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Stockton PACE\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Sunrise Advantage Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Sutter Health Plus\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Sutter SeniorCare\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Texas Children's Health Plan\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"The Basics at Jan Werner (fka Jan Werner Adult Day Care Center)\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Total Senior Care, Inc.\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Triple-S Management Corporation\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"True Health New Mexico\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Umpqua Health Alliance\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Union Pacific Railroad Employes Health Systems (UPREHS)\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"UnitedHealthcare\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Univera Healthcare\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"VNSNY CHOICE\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"VillageCareMAX\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Vitality Health Plan of California\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"WellCare Health Plans, Inc.\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Western Health Advantage\": [\"Magellan\", \"Private Pay\", \"Project Heal\", \"SCA\"],",
									"    \"Western Oregon Advanced Health, LLC\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"    \"Yamhill Community Care Organization\": [\"Private Pay\", \"Project Heal\", \"SCA\", \"Standard\"],",
									"}",
									"",
									"let payor_name = payor_names[Math.floor(Math.random() * payor_names.length)];",
									"let payor_program;",
									"",
									"if (payor_name === \"BlueCross BlueShield of Western New York and BlueShield of Northeastern New York\") {",
									"    payor_program = \"\";",
									"}",
									"else {",
									"    //  var payors_list = payorprogram_map[payor_names[payor_index]];",
									"    var payors_program_name_list = payorprogram_names_map[payor_name];",
									"    payor_program = payors_program_name_list[Math.floor(Math.random() * payors_program_name_list.length)];",
									"}",
									"",
									"let patientRelation = [\"Self\", \"Spouse\", \"Child\",\"Child (Mother's Insurance)\", \"Child (Father's Insurance)\",\"Other\", \"Grandparent\", \"Grandchild\", \"Nephew or Niece\", \"Foster Child\",\"Ward\", \"Stepson or Stepdaughter\", \"Stepson or Stepdaughter (Stepmother's Insurance)\",\"Stepson or Stepdaughter (Stepfather's Insurance)\",\"Employee\", \"Unknown\", \"Handicapped Dependent\", \"Sponsored Dependent\", \"Dependent of a Minor Dependent\", \"Significant Other\",\"Mother\",  \"Father\",\"Emancipated Minor\",\"Organ Donor\",\"Cadaver Donor\", \"Injured Plaintiff\", \"Child (Ins. not Financial Respons.)\", \"Child (Mother's Ins., Ins. not Financially Respons.)\", \"Child (Father's Ins., Ins. not Financially Respons.)\", \"Life Partner\"];",
									"",
									"let statesList = [\"AL\", \"AK\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"DC\", \"FL\", \"GA\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"OH\", \"OK\", \"OR\", \"PA\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\"];",
									"",
									"//Generate random Date of Birth in YYYY-MM-DD Format",
									"function randomDate(start, end) {",
									"    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));",
									"}",
									"let date = randomDate(new Date(1990, 00, 01), new Date());",
									"let dateOfBirth = date.getFullYear() + '-' + (\"0\" + (date.getMonth() + 1)).slice(-2) + '-' + (\"0\" + date.getDate()).slice(-2);",
									"",
									"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let lastName = pm.variables.replaceIn('{{$randomLastName}}');",
									"",
									"//Coverage Start Date",
									"let coverageStartDate = collectionMethods.randomDate(new Date(), new Date());",
									"let coverageStartDateFormatted = coverageStartDate.getFullYear() + '-' + (\"0\" + (coverageStartDate.getMonth() + 1)).slice(-2) + '-' + (\"0\" + coverageStartDate.getDate()).slice(-2);",
									"",
									"//Coverage End Date",
									"//Add number of days to coverageStartDate to make the coverageEndDate in future",
									"let AddNumberOfDays = 90",
									"let coverageEndDate = coverageStartDate.setDate(coverageStartDate.getDate() + AddNumberOfDays);",
									"let coverageEndDateFormatted = new Date(coverageEndDate).getFullYear() + '-' + (\"0\" + (new Date(coverageEndDate).getMonth() + 1)).slice(-2) + '-' + (\"0\" + new Date(coverageEndDate).getDate()).slice(-2);",
									"",
									"let random = Math.floor(Math.random() * payor_names.length);",
									"",
									"pm.environment.set(\"group_id1\", Math.floor(Math.random() * (70 - 10) + 10));",
									"pm.environment.set(\"subscriber_id1\", Math.floor(Math.random() * (70 - 10) + 10));",
									"",
									"pm.environment.set(\"payor_name2\", payor_names[random]);",
									"pm.environment.set(\"payor_program2\", payor_program);",
									"// pm.environment.set(\"payor_program_name1\", payor_program);",
									"pm.environment.set(\"Coverage1StartDate\", coverageStartDateFormatted);",
									"pm.environment.set(\"Coverage1EndDate\", coverageEndDateFormatted); ",
									"pm.environment.set(\"payor_externalid2\", payorExternalids[random]);",
									"pm.environment.set(\"patientState1\", ld.sample(statesList));",
									"pm.environment.set(\"providerServicesPhoneNumber1\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));",
									"pm.environment.set(\"patient_relation1\", ld.sample(patientRelation));",
									"pm.environment.set(\"RelationFirstName1\", firstName);",
									"pm.environment.set(\"RelationLastName1\", lastName);",
									"pm.environment.set(\"RelationDateOfBirth1\", dateOfBirth);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7a0d3c02-e138-44dd-91c4-ae15b099362e",
								"exec": [
									"var response_text = pm.response.text();",
									"",
									"//pm.environment.set(\"response_text\", response_text);",
									"//pm.environment.set(\"CoverageExternalId\", response_text);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// pm.test(\"Verify CoverageExternalId is generated\", function () {",
									"//     pm.expect(jsonData.id).length.greaterThan(0);",
									"// });",
									"",
									"pm.environment.set(\"coverageExternalId2\", response_text);",
									"console.log(\"response_text\"+response_text)",
									"pm.environment.set(\"filPatientPayor2\", pm.environment.get(\"payor_name2\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "349b95fb-e1e2-471f-b227-6a4ccc158882",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"payor\": \"{{payor_name2}}\",\n    \"isActive\": true,\n    \"groupId\": \"{{group_id1}}\",\n    \"subscriberId\": \"{{subscriber_id1}}\",\n    \"stateCode\": \"{{patientState1}}\",\n       \"startDate\": \"{{Coverage1StartDate}}\",\n    \"endDate\": \"{{Coverage1EndDate}}\",\n    \"providerServicesPhoneNumber\": \"+1 {{providerServicesPhoneNumber1}}\",\n    \"subscriberRelationToPatient\": \"{{patient_relation1}}\",  \n    \"subscriberFirstName\": \"{{RelationFirstName1}}\",\n    \"subscriberLastName\": \"{{RelationLastName1}}\",\n    \"subscriberDateOfBirth\":\"{{RelationDateOfBirth1}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/clinical-data/patients/{{patientId}}/coverages",
							"host": [
								"{{host}}"
							],
							"path": [
								"clinical-data",
								"patients",
								"{{patientId}}",
								"coverages"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add episode",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f6bd776f-560a-413e-8e0b-d56003f3b816",
								"exec": [
									"let ld = require('lodash');",
									"",
									"let episodeStatusList = [\"New\"];",
									"let treatmentProgramList = [\"Equip treatment\"];",
									"let episodeStatusReasonList = [\"Declined - Admin/Equip delay\", \"Declined - Chose HLOC (IOP/PHP/RTC)\", \"Declined - Chose new outpt team\", \"Declined - Continue w current team\", \"Declined - Unknown tx choice\", \"Discharged - AEA - Declined relapse prevention\", \"Discharged - AEA - Inpatient\", \"Discharged - AEA - No care\", \"Discharged - AEA - Outpatient\", \"Discharged - AEA - PHP\", \"Discharged - AEA - RTC\", \"Discharged - Admin - Change in payor\", \"Discharged - Admin - Disengaged\", \"Discharged - Admin - Financial\", \"Discharged - Admin - Ins denial\", \"Discharged - HLOC - IOP\", \"Discharged - HLOC - Inpt med\", \"Discharged - HLOC - Inpt psych\", \"Discharged - HLOC - PHP\", \"Discharged - HLOC - RTC\", \"HLOC - Inpatient Med\", \"HLOC - Inpatient Psych\", \"MIA - Lost contact\", \"MIA - No contact\", \"Not eligible - Wrong age\", \"Not eligible - Wrong state\", \"Not qualified - Equip referred to clinical HLOC\", \"Not qualified - Equip referred to medical HLOC\", \"Not qualified - Family unwilling to participate in tx\", \"Not qualified - Financial - Insurance not in-network\", \"Not qualified - Financial - can't afford OOP $\", \"Not qualified - No eating disorder\", \"Not qualified - Not living with family\"];",
									"",
									"let medicalClearanceStatuses = [\"Cleared\", \"In progress\", \"Not cleared\", \"Not ready\", \"Ready for review\"];",
									"let insuranceVerificationStatuses = [\"Approved\", \"Denied\", \"Not ready\", \"Pre-authorization in progress\", \"Ready for review\", \"Verification in progress\"];",
									"",
									"let randomLengthInWeeks = Math.floor(1 + Math.random() * 10);",
									"let levelList = [\"1\", \"2a\", \"2b\", \"3\", \"4a\", \"4b\", \"4c\"];",
									"",
									"let date = collectionMethods.randomDate(new Date(2020, 00, 01), new Date());",
									"let episodeStartDate = date.getFullYear() + '-' + (\"0\" + (date.getMonth() + 1)).slice(-2) + '-' + (\"0\" + date.getDate()).slice(-2);",
									"",
									"//Save the variables to be used in next request for validation",
									"pm.environment.set(\"cdsEpisodeStatus\", ld.sample(episodeStatusList));",
									"pm.environment.set(\"cdsTreatmentProgramName\", ld.sample(treatmentProgramList));",
									"pm.environment.set(\"cdsLengthInWeeks\", randomLengthInWeeks);",
									"pm.environment.set(\"cdsEpisodeStartDate\", episodeStartDate);",
									"pm.environment.set(\"cdsLevel\", ld.sample(levelList));",
									"pm.environment.set(\"medicalClearanceStatus\", ld.sample(medicalClearanceStatuses));",
									"pm.environment.set(\"insuranceVerificationStatus\", ld.sample(insuranceVerificationStatuses));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c8faf3ee-93e6-4bb6-9e31-21054b544d39",
								"exec": [
									"var jsonData = pm.response;",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify episode id is generated\", function () {",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"",
									"//set episodeExternalId to be used in next request",
									"pm.environment.set(\"episodeExternalId\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d7b0af6d-ad79-474b-8419-f93e39d6a71a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"authorizationDetails\": [\n        {\n            \"authorizationNumber\": null,\n            \"startDate\": \"\",\n            \"endDate\": \"\",\n            \"coverageExternalId\": \"{{coverageExternalId1}}\",\n            \"payorProgram\": \"{{payor_program1}}\",\n            \"approvedSessions\": null,\n            \"approvedSessionUnits\": null,\n            \"isAuthRequired\": null\n        }\n    ],\n    \"episodeClosedDate\": \"\",\n    \"episodeStatus\": \"{{cdsEpisodeStatus}}\",\n    \"firstInquiryReferralDate\": \"2022-06-22\",\n    \"lengthInWeeks\": 6,\n    \"insuranceVerification\": {\n        \"completedDate\": \"\",\n        \"insuranceVerificationStatus\": \"{{insuranceVerificationStatus}}\",\n        \"isCompletedDateValid\": true,\n        \"isRequestedDateValid\": true,\n        \"requestedDate\": \"2022-07-12\"\n    },\n    \"medicalClearance\": {\n        \"completedDate\": \"\",\n        \"isCompletedDateValid\": true,\n        \"isRequestedDateValid\": true,\n        \"medicalClearanceStatus\": \"{{medicalClearanceStatus}}\",\n        \"requestedDate\": \"2022-07-05\"\n    },\n    \"patientExternalId\": \"{{patientId}}\",\n    \"statusReason\": \"\",\n    \"treatmentProgramName\": \"Equip treatment\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/clinical-data/patients/{{patientId}}/episodes",
							"host": [
								"{{host}}"
							],
							"path": [
								"clinical-data",
								"patients",
								"{{patientId}}",
								"episodes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patient list - New admin episode details",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18776b02-fdc1-41f6-ab4b-c329af03bcdd",
								"exec": [
									"let jsonData = pm.response.json();",
									"let ld = require('lodash');",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify response have only patient basic info\", function () {",
									"    let keys = Object.keys(jsonData.data[0]);",
									"    pm.expect(keys.length).to.equal(15);",
									"    pm.expect(keys).to.include(\"externalId\");",
									"    pm.expect(keys).to.include(\"firstName\");",
									"    pm.expect(keys).to.include(\"lastName\");",
									"    pm.expect(keys).to.include(\"chosenName\");",
									"    pm.expect(keys).to.include(\"dateOfBirth\");",
									"    pm.expect(keys).to.include(\"state\");",
									"    pm.expect(keys).to.include(\"payors\");",
									"    pm.expect(keys).to.include(\"episodeStatus\");",
									"    pm.expect(keys).to.include(\"medicalClearanceStatus\");",
									"    pm.expect(keys).to.include(\"insuranceStatus\");",
									"    pm.expect(keys).to.include(\"payorName\");",
									"    //pm.expect(keys).to.include(\"payorProgramName\");",
									"    pm.expect(keys).to.include(\"isPaused\");",
									"    pm.expect(keys).to.include(\"daysOfCare\");",
									"    pm.expect(keys).to.include(\"weeksAtEquip\");",
									"});",
									"",
									"pm.test(\"Verify response data\", function () {",
									"    let exp_response = {",
									"        \"data\": [",
									"            {",
									"                \"externalId\": \"\" + pm.environment.get(\"patientId\") + \"\",",
									"                \"firstName\": \"\" + pm.environment.get(\"patientFirstName\") + \"\",",
									"                \"chosenName\": \"\" + pm.environment.get(\"patientChosenName\") + \"\",",
									"                \"lastName\": \"\" + pm.environment.get(\"patientLastName\") + \"\",",
									"                \"dateOfBirth\": \"\" + pm.environment.get(\"patientDateOfBirth\") + \"\",",
									"                \"state\": \"\" + pm.environment.get(\"patientState\") + \"\",",
									"                \"payors\": ld.orderBy([",
									"                    pm.environment.get(\"filPatientPayor1\"),",
									"                    pm.environment.get(\"filPatientPayor2\"),",
									"                ], [], ['asc']),",
									"                \"episodeStatus\": \"\" + pm.environment.get(\"cdsEpisodeStatus\") + \"\",",
									"                \"medicalClearanceStatus\": \"\" + pm.environment.get(\"medicalClearanceStatus\") + \"\",",
									"                \"insuranceStatus\": \"\" + pm.environment.get(\"insuranceVerificationStatus\") + \"\",",
									"                \"payorName\": \"\" + pm.environment.get(\"filPatientPayor1\") + \"\",",
									"                \"payorProgramName\": \"\" + pm.environment.get(\"payor_program1\") + \"\",",
									"                \"isPaused\": false,",
									"                \"daysOfCare\": 0,",
									"                \"weeksAtEquip\": 0",
									"            }",
									"        ],",
									"        \"pageNumber\": 1,",
									"        \"pageSize\": 20,",
									"        \"totalCount\": 1",
									"    }",
									"",
									"    console.log(\"jsonData: \" + JSON.stringify(jsonData));",
									"    console.log(\"exp_response: \" + JSON.stringify(exp_response));",
									"    pm.expect(jsonData).to.eql(exp_response);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bd8a44ca-72d1-4f4d-94fc-78e4f99deb30",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "995c08d0-10c3-448d-9b2b-3f28a558691b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/patients?filter-by=patient-name::{{patientFirstName}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"patients"
							],
							"query": [
								{
									"key": "filter-by",
									"value": "patient-name::{{patientFirstName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update episode",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "57c09cef-3b49-45aa-a61b-d1f72ae73206",
								"exec": [
									"let ld = require('lodash');",
									"",
									"let episodeStatusList = [\"Assessing\"];",
									"let treatmentProgramList = [\"Equip treatment\"];",
									"let episodeStatusReasonList = [\"Declined - Admin/Equip delay\", \"Declined - Chose HLOC (IOP/PHP/RTC)\", \"Declined - Chose new outpt team\", \"Declined - Continue w current team\", \"Declined - Unknown tx choice\", \"Discharged - AEA - Declined relapse prevention\", \"Discharged - AEA - Inpatient\", \"Discharged - AEA - No care\", \"Discharged - AEA - Outpatient\", \"Discharged - AEA - PHP\", \"Discharged - AEA - RTC\", \"Discharged - Admin - Change in payor\", \"Discharged - Admin - Disengaged\", \"Discharged - Admin - Financial\", \"Discharged - Admin - Ins denial\", \"Discharged - HLOC - IOP\", \"Discharged - HLOC - Inpt med\", \"Discharged - HLOC - Inpt psych\", \"Discharged - HLOC - PHP\", \"Discharged - HLOC - RTC\", \"HLOC - Inpatient Med\", \"HLOC - Inpatient Psych\", \"MIA - Lost contact\", \"MIA - No contact\", \"Not eligible - Wrong age\", \"Not eligible - Wrong state\", \"Not qualified - Equip referred to clinical HLOC\", \"Not qualified - Equip referred to medical HLOC\", \"Not qualified - Family unwilling to participate in tx\", \"Not qualified - Financial - Insurance not in-network\", \"Not qualified - Financial - can't afford OOP $\", \"Not qualified - No eating disorder\", \"Not qualified - Not living with family\"];",
									"",
									"let medicalClearanceStatuses = [\"Cleared\", \"In progress\", \"Not cleared\", \"Not ready\", \"Ready for review\"];",
									"let insuranceVerificationStatuses = [\"Approved\", \"Denied\", \"Not ready\", \"Pre-authorization in progress\", \"Ready for review\", \"Verification in progress\"];",
									"",
									"let randomLengthInWeeks = Math.floor(1 + Math.random() * 10);",
									"let levelList = [\"1\", \"2a\", \"2b\", \"3\", \"4a\", \"4b\", \"4c\"];",
									"",
									"let date = collectionMethods.randomDate(new Date(2020, 00, 01), new Date());",
									"let episodeStartDate = date.getFullYear() + '-' + (\"0\" + (date.getMonth() + 1)).slice(-2) + '-' + (\"0\" + date.getDate()).slice(-2);",
									"",
									"//Save the variables to be used in next request for validation",
									"pm.environment.set(\"cdsEpisodeStatus\", ld.sample(episodeStatusList));",
									"pm.environment.set(\"cdsTreatmentProgramName\", ld.sample(treatmentProgramList));",
									"pm.environment.set(\"cdsLengthInWeeks\", randomLengthInWeeks);",
									"pm.environment.set(\"cdsEpisodeStartDate\", episodeStartDate);",
									"pm.environment.set(\"cdsLevel\", ld.sample(levelList));",
									"pm.environment.set(\"medicalClearanceStatus\", ld.sample(medicalClearanceStatuses));",
									"pm.environment.set(\"insuranceVerificationStatus\", ld.sample(insuranceVerificationStatuses));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a2bdcb0c-38e7-49d1-8647-8aea40820b7a",
								"exec": [
									"var jsonData = pm.response;",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify episode id is generated\", function () {",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"",
									"//set episodeExternalId to be used in next request",
									"pm.environment.set(\"episodeExternalId\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "70b074ed-0eba-4871-9238-1bc0ee5049af",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"authorizationDetails\": [\n    {\n      \"authorizationNumber\": null,\n      \"startDate\": \"\",\n      \"endDate\": \"\",\n      \"coverageExternalId\": \"{{coverageExternalId2}}\",\n      \"payorProgram\": \"{{payor_program2}}\",\n      \"approvedSessions\": null,\n      \"approvedSessionUnits\": null,\n      \"isAuthRequired\": null\n    }\n  ],\n  \"episodeClosedDate\": \"\",\n  \"episodeStartDate\": \"{{cdsEpisodeStartDate}}\",\n  \"episodeStatus\": \"{{cdsEpisodeStatus}}\",\n  \"firstInquiryReferralDate\": \"2022-06-22\",\n  \"lengthInWeeks\": 6,\n  \"level\": \"Red\",\n  \"insuranceVerification\": {\n    \"completedDate\": \"\",\n    \"insuranceVerificationStatus\": \"{{insuranceVerificationStatus}}\",\n    \"isCompletedDateValid\": true,\n    \"isRequestedDateValid\": true,\n    \"requestedDate\": \"2022-07-12\"\n  },\n  \"medicalClearance\": {\n    \"completedDate\": \"\",\n    \"isCompletedDateValid\": true,\n    \"isRequestedDateValid\": true,\n    \"medicalClearanceStatus\": \"{{medicalClearanceStatus}}\",\n    \"requestedDate\": \"2022-07-05\"\n  },\n  \"patientExternalId\": \"{{patientId}}\",\n  \"statusReason\": \"\",\n  \"treatmentProgramName\": \"Equip treatment\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/clinical-data/patients/{{patientId}}/episodes/{{episodeExternalId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"clinical-data",
								"patients",
								"{{patientId}}",
								"episodes",
								"{{episodeExternalId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patient list - admin episode details",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e59f135b-471b-4814-a4f6-8b4a82ee8163",
								"exec": [
									"let jsonData = pm.response.json();",
									"let ld = require('lodash');",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify response have only patient basic info\", function () {",
									"    let keys = Object.keys(jsonData.data[0]);",
									"    pm.expect(keys.length).to.equal(16);",
									"    pm.expect(keys).to.include(\"externalId\");",
									"    pm.expect(keys).to.include(\"firstName\");",
									"    pm.expect(keys).to.include(\"lastName\");",
									"    pm.expect(keys).to.include(\"chosenName\");",
									"    pm.expect(keys).to.include(\"dateOfBirth\");",
									"    pm.expect(keys).to.include(\"state\");",
									"    pm.expect(keys).to.include(\"payors\");",
									"    pm.expect(keys).to.include(\"episodeStatus\");",
									"    pm.expect(keys).to.include(\"admitDate\");",
									"    pm.expect(keys).to.include(\"medicalClearanceStatus\");",
									"    pm.expect(keys).to.include(\"insuranceStatus\");",
									"    pm.expect(keys).to.include(\"payorName\");",
									"    pm.expect(keys).to.include(\"payorProgramName\");",
									"    pm.expect(keys).to.include(\"isPaused\");",
									"    pm.expect(keys).to.include(\"daysOfCare\");",
									"    pm.expect(keys).to.include(\"weeksAtEquip\");",
									"});",
									"",
									"pm.test(\"Verify response data\", function () {",
									"    let exp_response = {",
									"        \"data\": [",
									"            {",
									"                \"externalId\": \"\" + pm.environment.get(\"patientId\") + \"\",",
									"                \"firstName\": \"\" + pm.environment.get(\"patientFirstName\") + \"\",",
									"                \"chosenName\": \"\" + pm.environment.get(\"patientChosenName\") + \"\",",
									"                \"lastName\": \"\" + pm.environment.get(\"patientLastName\") + \"\",",
									"                \"dateOfBirth\": \"\" + pm.environment.get(\"patientDateOfBirth\") + \"\",",
									"                \"state\": \"\" + pm.environment.get(\"patientState\") + \"\",",
									"                \"payors\": ld.orderBy([",
									"                    pm.environment.get(\"filPatientPayor1\"),",
									"                    pm.environment.get(\"filPatientPayor2\"),",
									"                ], [], ['asc']),",
									"                \"episodeStatus\": \"\" + pm.environment.get(\"cdsEpisodeStatus\") + \"\",",
									"                \"admitDate\": \"\" + pm.environment.get(\"cdsEpisodeStartDate\") + \"\",",
									"                \"medicalClearanceStatus\": \"\" + pm.environment.get(\"medicalClearanceStatus\") + \"\",",
									"                \"insuranceStatus\": \"\" + pm.environment.get(\"insuranceVerificationStatus\") + \"\",",
									"                \"payorName\": \"\" + pm.environment.get(\"filPatientPayor2\") + \"\",",
									"                \"payorProgramName\": \"\" + pm.environment.get(\"payor_program2\") + \"\",",
									"                \"isPaused\": false,",
									"                \"daysOfCare\": 0,",
									"                \"weeksAtEquip\": 0",
									"            }",
									"        ],",
									"        \"pageNumber\": 1,",
									"        \"pageSize\": 20,",
									"        \"totalCount\": 1",
									"    }",
									"",
									"    delete jsonData.data[0].daysOfCare;",
									"    delete jsonData.data[0].weeksAtEquip;",
									"    delete exp_response.data[0].daysOfCare;",
									"    delete exp_response.data[0].weeksAtEquip;",
									"",
									"    console.log(\"jsonData: \" + JSON.stringify(jsonData));",
									"    console.log(\"exp_response: \" + JSON.stringify(exp_response));",
									"    pm.expect(jsonData).to.eql(exp_response);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f7fba7aa-aea3-4312-b665-6de149a86c8d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "548a8daf-5fcd-4641-a0af-c2f3beb40dec",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/patients?filter-by=patient-name::{{patientFirstName}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"patients"
							],
							"query": [
								{
									"key": "filter-by",
									"value": "patient-name::{{patientFirstName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Provider - Patient primary representative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bb0d4d73-b211-469f-9dad-bdc9e6316a5f",
								"exec": [
									"let ld = require('lodash');",
									"let timezones = [\"Hawaii Standard Time\", \"Hawaii-Aleutian Time\", \"Alaska Time\", \"Pacific Time\", \"Arizona\", \"Mountain Time\", \"Central Time\", \"Eastern Time\", \"London/UK Time\"];",
									"let regions = [\"Northeast\", \"Southwest\", \"Southeast\", \"West\", \"Midwest\"];",
									"let capacities = [\"full-time\", \"part-time\"];",
									"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let lastName = pm.variables.replaceIn('{{$randomLastName}}')",
									"let email = \"qa\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
									"let phoneNumber = pm.variables.replaceIn('{{$randomPhoneNumber}}');",
									"",
									"let supervisorId = \"\";",
									"",
									"let capacity = ld.sample(capacities);",
									"",
									"let hoursPerWeek;",
									"if (capacity == \"full-time\") {",
									"    hoursPerWeek = 40;",
									"} else {",
									"    hoursPerWeek = Math.floor(Math.random() * 90);",
									"}",
									"",
									"let accountStatus = \"active\";",
									"",
									"let permissions = [\"admin\", \"maud\", \"both\"];",
									"let permission = ld.sample(permissions);",
									"",
									"let roles = [\"admin:role:manage-users\",",
									"    \"maud:role:general-access\",",
									"    \"maud:role:advanced-access\"];",
									"",
									"if (permission === \"admin\") {",
									"    roles = [\"\\\"admin:role:manage-users\\\"\"];",
									"} else if (permission === \"maud\") {",
									"    roles = [\"\\\"maud:role:general-access\\\"\", \"\\\"maud:role:advanced-access\\\"\"];",
									"} else if (permission === \"both\") {",
									"    roles = [\"\\\"admin:role:manage-users\\\"\", \"\\\"maud:role:general-access\\\"\", \"\\\"maud:role:advanced-access\\\"\"];",
									"}",
									"",
									"pm.environment.set(\"providerFirstName\", firstName);",
									"pm.environment.set(\"providerLastName\", lastName);",
									"pm.environment.set(\"providerEmail\", email);",
									"pm.environment.set(\"providerPhoneNumber\", phoneNumber);",
									"pm.environment.set(\"providerTimezone\", ld.sample(timezones));",
									"pm.environment.set(\"providerRegion\", ld.sample(regions));",
									"pm.environment.set(\"providerCapacity\", capacity);",
									"pm.environment.set(\"providerHoursPerWeek\", hoursPerWeek);",
									"pm.environment.set(\"providerAccountStatus\", accountStatus);",
									"pm.environment.set(\"providerRoles\", roles);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d6e21789-0fa8-4c9c-b37e-a4088386e6a0",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify id is generated\", function () {",
									"    pm.expect(jsonData.id).length.greaterThan(0);",
									"});",
									"",
									"pm.environment.set(\"ppr_providerId\", jsonData.id);",
									"pm.environment.set(\"ppr_firstname\", pm.environment.get(\"providerFirstName\"));",
									"pm.environment.set(\"ppr_lastname\", pm.environment.get(\"providerLastName\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5318621f-7410-47e6-8bd1-e33e33b2dac1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{providerFirstName}}\",\n    \"lastName\": \"{{providerLastName}}\",\n    \"email\": \"{{providerEmail}}\",\n    \"phoneNumber\": \"{{providerPhoneNumber}}\",\n    \"timezone\": \"{{providerTimezone}}\",\n    \"region\": \"{{providerRegion}}\",\n    \"providerType\": \"Patient Service Representative\",\n    \"capacity\": \"{{providerCapacity}}\",\n    \"hoursPerWeek\": \"{{providerHoursPerWeek}}\",\n    \"accountStatus\": \"{{providerAccountStatus}}\",\n    \"roles\": [\n        {{providerRoles}}\n    ],\n    \"supervisorId\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/providers",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"providers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Provider - Admission specialist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9ba14568-eb8f-4e1c-a23f-538cb28317cd",
								"exec": [
									"let ld = require('lodash');",
									"let timezones = [\"Hawaii Standard Time\", \"Hawaii-Aleutian Time\", \"Alaska Time\", \"Pacific Time\", \"Arizona\", \"Mountain Time\", \"Central Time\", \"Eastern Time\", \"London/UK Time\"];",
									"let regions = [\"Northeast\", \"Southwest\", \"Southeast\", \"West\", \"Midwest\"];",
									"let capacities = [\"full-time\", \"part-time\"];",
									"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let lastName = pm.variables.replaceIn('{{$randomLastName}}')",
									"let email = \"qa\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
									"let phoneNumber = pm.variables.replaceIn('{{$randomPhoneNumber}}');",
									"",
									"let supervisorId = \"\";",
									"",
									"let capacity = ld.sample(capacities);",
									"",
									"let hoursPerWeek;",
									"if (capacity == \"full-time\") {",
									"    hoursPerWeek = 40;",
									"} else {",
									"    hoursPerWeek = Math.floor(Math.random() * 90);",
									"}",
									"",
									"let accountStatus = \"active\";",
									"",
									"let permissions = [\"admin\", \"maud\", \"both\"];",
									"let permission = ld.sample(permissions);",
									"",
									"let roles = [\"admin:role:manage-users\",",
									"    \"maud:role:general-access\",",
									"    \"maud:role:advanced-access\"];",
									"",
									"if (permission === \"admin\") {",
									"    roles = [\"\\\"admin:role:manage-users\\\"\"];",
									"} else if (permission === \"maud\") {",
									"    roles = [\"\\\"maud:role:general-access\\\"\", \"\\\"maud:role:advanced-access\\\"\"];",
									"} else if (permission === \"both\") {",
									"    roles = [\"\\\"admin:role:manage-users\\\"\", \"\\\"maud:role:general-access\\\"\", \"\\\"maud:role:advanced-access\\\"\"];",
									"}",
									"",
									"pm.environment.set(\"providerFirstName\", firstName);",
									"pm.environment.set(\"providerLastName\", lastName);",
									"pm.environment.set(\"providerEmail\", email);",
									"pm.environment.set(\"providerPhoneNumber\", phoneNumber);",
									"pm.environment.set(\"providerTimezone\", ld.sample(timezones));",
									"pm.environment.set(\"providerRegion\", ld.sample(regions));",
									"pm.environment.set(\"providerCapacity\", capacity);",
									"pm.environment.set(\"providerHoursPerWeek\", hoursPerWeek);",
									"pm.environment.set(\"providerAccountStatus\", accountStatus);",
									"pm.environment.set(\"providerRoles\", roles);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0d37c5ac-4a97-4854-9299-b2aab4b8955f",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify id is generated\", function () {",
									"    pm.expect(jsonData.id).length.greaterThan(0);",
									"});",
									"",
									"pm.environment.set(\"admissions_specialist_providerId\", jsonData.id);",
									"pm.environment.set(\"admissions_specialist_firstname\", pm.environment.get(\"providerFirstName\"));",
									"pm.environment.set(\"admissions_specialist_lastname\", pm.environment.get(\"providerLastName\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0f748e5e-3992-4172-8fd0-1395180856e5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{providerFirstName}}\",\n    \"lastName\": \"{{providerLastName}}\",\n    \"email\": \"{{providerEmail}}\",\n    \"phoneNumber\": \"{{providerPhoneNumber}}\",\n    \"timezone\": \"{{providerTimezone}}\",\n    \"region\": \"{{providerRegion}}\",\n    \"providerType\": \"Admissions Specialist\",\n    \"capacity\": \"{{providerCapacity}}\",\n    \"hoursPerWeek\": \"{{providerHoursPerWeek}}\",\n    \"accountStatus\": \"{{providerAccountStatus}}\",\n    \"roles\": [\n        {{providerRoles}}\n    ],\n    \"supervisorId\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/providers",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"providers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Provider - FEN",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7c447c3a-be24-4c6a-ba6c-6f4828c4e7e5",
								"exec": [
									"let ld = require('lodash');",
									"let timezones = [\"Hawaii Standard Time\", \"Hawaii-Aleutian Time\", \"Alaska Time\", \"Pacific Time\", \"Arizona\", \"Mountain Time\", \"Central Time\", \"Eastern Time\", \"London/UK Time\"];",
									"let regions = [\"Northeast\", \"Southwest\", \"Southeast\", \"West\", \"Midwest\"];",
									"let capacities = [\"full-time\", \"part-time\"];",
									"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let lastName = pm.variables.replaceIn('{{$randomLastName}}')",
									"let email = \"qa\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
									"let phoneNumber = pm.variables.replaceIn('{{$randomPhoneNumber}}');",
									"",
									"let supervisorId = \"\";",
									"",
									"let capacity = ld.sample(capacities);",
									"",
									"let hoursPerWeek;",
									"if (capacity == \"full-time\") {",
									"    hoursPerWeek = 40;",
									"} else {",
									"    hoursPerWeek = Math.floor(Math.random() * 90);",
									"}",
									"",
									"let accountStatus = \"active\";",
									"",
									"let permissions = [\"admin\", \"maud\", \"both\"];",
									"let permission = ld.sample(permissions);",
									"",
									"let roles = [\"admin:role:manage-users\",",
									"    \"maud:role:general-access\",",
									"    \"maud:role:advanced-access\"];",
									"",
									"if (permission === \"admin\") {",
									"    roles = [\"\\\"admin:role:manage-users\\\"\"];",
									"} else if (permission === \"maud\") {",
									"    roles = [\"\\\"maud:role:general-access\\\"\", \"\\\"maud:role:advanced-access\\\"\"];",
									"} else if (permission === \"both\") {",
									"    roles = [\"\\\"admin:role:manage-users\\\"\", \"\\\"maud:role:general-access\\\"\", \"\\\"maud:role:advanced-access\\\"\"];",
									"}",
									"",
									"pm.environment.set(\"providerFirstName\", firstName);",
									"pm.environment.set(\"providerLastName\", lastName);",
									"pm.environment.set(\"providerEmail\", email);",
									"pm.environment.set(\"providerPhoneNumber\", phoneNumber);",
									"pm.environment.set(\"providerTimezone\", ld.sample(timezones));",
									"pm.environment.set(\"providerRegion\", ld.sample(regions));",
									"pm.environment.set(\"providerCapacity\", capacity);",
									"pm.environment.set(\"providerHoursPerWeek\", hoursPerWeek);",
									"pm.environment.set(\"providerAccountStatus\", accountStatus);",
									"pm.environment.set(\"providerRoles\", roles);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "89a8468b-95aa-45cf-8924-cf5d41cf2570",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify id is generated\", function () {",
									"    pm.expect(jsonData.id).length.greaterThan(0);",
									"});",
									"",
									"pm.environment.set(\"FEN_providerId\", jsonData.id);",
									"pm.environment.set(\"FEN_firstname\", pm.environment.get(\"providerFirstName\"));",
									"pm.environment.set(\"FEN_lastname\", pm.environment.get(\"providerLastName\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "13dd9bac-8bab-40b9-931e-2b8960ac5f04",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{providerFirstName}}\",\n    \"lastName\": \"{{providerLastName}}\",\n    \"email\": \"{{providerEmail}}\",\n    \"phoneNumber\": \"{{providerPhoneNumber}}\",\n    \"timezone\": \"{{providerTimezone}}\",\n    \"region\": \"{{providerRegion}}\",\n    \"providerType\": \"Family Experience Navigator\",\n    \"capacity\": \"{{providerCapacity}}\",\n    \"hoursPerWeek\": \"{{providerHoursPerWeek}}\",\n    \"accountStatus\": \"{{providerAccountStatus}}\",\n    \"roles\": [\n        {{providerRoles}}\n    ],\n    \"supervisorId\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/providers",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"providers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Provider - Dietitian",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c2a2700e-c07c-4469-a9e0-82e42aabce61",
								"exec": [
									"let ld = require('lodash');",
									"let timezones = [\"Hawaii Standard Time\", \"Hawaii-Aleutian Time\", \"Alaska Time\", \"Pacific Time\", \"Arizona\", \"Mountain Time\", \"Central Time\", \"Eastern Time\", \"London/UK Time\"];",
									"let regions = [\"Northeast\", \"Southwest\", \"Southeast\", \"West\", \"Midwest\"];",
									"let capacities = [\"full-time\", \"part-time\"];",
									"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let lastName = pm.variables.replaceIn('{{$randomLastName}}')",
									"let email = \"qa\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
									"let phoneNumber = pm.variables.replaceIn('{{$randomPhoneNumber}}');",
									"",
									"let supervisorId = \"\";",
									"",
									"let capacity = ld.sample(capacities);",
									"",
									"let hoursPerWeek;",
									"if (capacity == \"full-time\") {",
									"    hoursPerWeek = 40;",
									"} else {",
									"    hoursPerWeek = Math.floor(Math.random() * 90);",
									"}",
									"",
									"let accountStatus = \"active\";",
									"",
									"let permissions = [\"admin\", \"maud\", \"both\"];",
									"let permission = ld.sample(permissions);",
									"",
									"let roles = [\"admin:role:manage-users\",",
									"    \"maud:role:general-access\",",
									"    \"maud:role:advanced-access\"];",
									"",
									"if (permission === \"admin\") {",
									"    roles = [\"\\\"admin:role:manage-users\\\"\"];",
									"} else if (permission === \"maud\") {",
									"    roles = [\"\\\"maud:role:general-access\\\"\", \"\\\"maud:role:advanced-access\\\"\"];",
									"} else if (permission === \"both\") {",
									"    roles = [\"\\\"admin:role:manage-users\\\"\", \"\\\"maud:role:general-access\\\"\", \"\\\"maud:role:advanced-access\\\"\"];",
									"}",
									"",
									"pm.environment.set(\"providerFirstName\", firstName);",
									"pm.environment.set(\"providerLastName\", lastName);",
									"pm.environment.set(\"providerEmail\", email);",
									"pm.environment.set(\"providerPhoneNumber\", phoneNumber);",
									"pm.environment.set(\"providerTimezone\", ld.sample(timezones));",
									"pm.environment.set(\"providerRegion\", ld.sample(regions));",
									"pm.environment.set(\"providerCapacity\", capacity);",
									"pm.environment.set(\"providerHoursPerWeek\", hoursPerWeek);",
									"pm.environment.set(\"providerAccountStatus\", accountStatus);",
									"pm.environment.set(\"providerRoles\", roles);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "49205e76-1d87-4ff7-8525-8b429e44a0ef",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify id is generated\", function () {",
									"    pm.expect(jsonData.id).length.greaterThan(0);",
									"});",
									"",
									"pm.environment.set(\"Dietitian_providerId\", jsonData.id);",
									"pm.environment.set(\"Dietitian_firstname\", pm.environment.get(\"providerFirstName\"));",
									"pm.environment.set(\"Dietitian_lastname\", pm.environment.get(\"providerLastName\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "43e0f1f4-3d29-4f2b-8c4d-c1a85014c719",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{providerFirstName}}\",\n    \"lastName\": \"{{providerLastName}}\",\n    \"email\": \"{{providerEmail}}\",\n    \"phoneNumber\": \"{{providerPhoneNumber}}\",\n    \"timezone\": \"{{providerTimezone}}\",\n    \"region\": \"{{providerRegion}}\",\n    \"providerType\": \"Dietitian\",\n    \"capacity\": \"{{providerCapacity}}\",\n    \"hoursPerWeek\": \"{{providerHoursPerWeek}}\",\n    \"accountStatus\": \"{{providerAccountStatus}}\",\n    \"roles\": [\n        {{providerRoles}}\n    ],\n    \"supervisorId\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/providers",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"providers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Provider - Peer Mentor",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "073ffb5e-d6a4-4227-afd4-6bb19223221b",
								"exec": [
									"let ld = require('lodash');",
									"let timezones = [\"Hawaii Standard Time\", \"Hawaii-Aleutian Time\", \"Alaska Time\", \"Pacific Time\", \"Arizona\", \"Mountain Time\", \"Central Time\", \"Eastern Time\", \"London/UK Time\"];",
									"let regions = [\"Northeast\", \"Southwest\", \"Southeast\", \"West\", \"Midwest\"];",
									"let capacities = [\"full-time\", \"part-time\"];",
									"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let lastName = pm.variables.replaceIn('{{$randomLastName}}')",
									"let email = \"qa\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
									"let phoneNumber = pm.variables.replaceIn('{{$randomPhoneNumber}}');",
									"",
									"let supervisorId = \"\";",
									"",
									"let capacity = ld.sample(capacities);",
									"",
									"let hoursPerWeek;",
									"if (capacity == \"full-time\") {",
									"    hoursPerWeek = 40;",
									"} else {",
									"    hoursPerWeek = Math.floor(Math.random() * 90);",
									"}",
									"",
									"let accountStatus = \"active\";",
									"",
									"let permissions = [\"admin\", \"maud\", \"both\"];",
									"let permission = ld.sample(permissions);",
									"",
									"let roles = [\"admin:role:manage-users\",",
									"    \"maud:role:general-access\",",
									"    \"maud:role:advanced-access\"];",
									"",
									"if (permission === \"admin\") {",
									"    roles = [\"\\\"admin:role:manage-users\\\"\"];",
									"} else if (permission === \"maud\") {",
									"    roles = [\"\\\"maud:role:general-access\\\"\", \"\\\"maud:role:advanced-access\\\"\"];",
									"} else if (permission === \"both\") {",
									"    roles = [\"\\\"admin:role:manage-users\\\"\", \"\\\"maud:role:general-access\\\"\", \"\\\"maud:role:advanced-access\\\"\"];",
									"}",
									"",
									"pm.environment.set(\"providerFirstName\", firstName);",
									"pm.environment.set(\"providerLastName\", lastName);",
									"pm.environment.set(\"providerEmail\", email);",
									"pm.environment.set(\"providerPhoneNumber\", phoneNumber);",
									"pm.environment.set(\"providerTimezone\", ld.sample(timezones));",
									"pm.environment.set(\"providerRegion\", ld.sample(regions));",
									"pm.environment.set(\"providerCapacity\", capacity);",
									"pm.environment.set(\"providerHoursPerWeek\", hoursPerWeek);",
									"pm.environment.set(\"providerAccountStatus\", accountStatus);",
									"pm.environment.set(\"providerRoles\", roles);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b77ae37c-7187-46f3-837a-f22d2d197851",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify id is generated\", function () {",
									"    pm.expect(jsonData.id).length.greaterThan(0);",
									"});",
									"",
									"pm.environment.set(\"PeerMentor_providerId\", jsonData.id);",
									"pm.environment.set(\"PeerMentor_firstname\", pm.environment.get(\"providerFirstName\"));",
									"pm.environment.set(\"PeerMentor_lastname\", pm.environment.get(\"providerLastName\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a8a88a13-20e4-4253-85a4-8798812b92a8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{providerFirstName}}\",\n    \"lastName\": \"{{providerLastName}}\",\n    \"email\": \"{{providerEmail}}\",\n    \"phoneNumber\": \"{{providerPhoneNumber}}\",\n    \"timezone\": \"{{providerTimezone}}\",\n    \"region\": \"{{providerRegion}}\",\n    \"providerType\": \"Peer Mentor\",\n    \"capacity\": \"{{providerCapacity}}\",\n    \"hoursPerWeek\": \"{{providerHoursPerWeek}}\",\n    \"accountStatus\": \"{{providerAccountStatus}}\",\n    \"roles\": [\n        {{providerRoles}}\n    ],\n    \"supervisorId\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/providers",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"providers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Provider - Therapist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6c8fb34d-08b5-4b36-addb-54cfd1226804",
								"exec": [
									"let ld = require('lodash');",
									"let timezones = [\"Hawaii Standard Time\", \"Hawaii-Aleutian Time\", \"Alaska Time\", \"Pacific Time\", \"Arizona\", \"Mountain Time\", \"Central Time\", \"Eastern Time\", \"London/UK Time\"];",
									"let regions = [\"Northeast\", \"Southwest\", \"Southeast\", \"West\", \"Midwest\"];",
									"let capacities = [\"full-time\", \"part-time\"];",
									"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let lastName = pm.variables.replaceIn('{{$randomLastName}}')",
									"let email = \"qa\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
									"let phoneNumber = pm.variables.replaceIn('{{$randomPhoneNumber}}');",
									"",
									"let supervisorId = \"\";",
									"",
									"let capacity = ld.sample(capacities);",
									"",
									"let hoursPerWeek;",
									"if (capacity == \"full-time\") {",
									"    hoursPerWeek = 40;",
									"} else {",
									"    hoursPerWeek = Math.floor(Math.random() * 90);",
									"}",
									"",
									"let accountStatus = \"active\";",
									"",
									"let permissions = [\"admin\", \"maud\", \"both\"];",
									"let permission = ld.sample(permissions);",
									"",
									"let roles = [\"admin:role:manage-users\",",
									"    \"maud:role:general-access\",",
									"    \"maud:role:advanced-access\"];",
									"",
									"if (permission === \"admin\") {",
									"    roles = [\"\\\"admin:role:manage-users\\\"\"];",
									"} else if (permission === \"maud\") {",
									"    roles = [\"\\\"maud:role:general-access\\\"\", \"\\\"maud:role:advanced-access\\\"\"];",
									"} else if (permission === \"both\") {",
									"    roles = [\"\\\"admin:role:manage-users\\\"\", \"\\\"maud:role:general-access\\\"\", \"\\\"maud:role:advanced-access\\\"\"];",
									"}",
									"",
									"pm.environment.set(\"providerFirstName\", firstName);",
									"pm.environment.set(\"providerLastName\", lastName);",
									"pm.environment.set(\"providerEmail\", email);",
									"pm.environment.set(\"providerPhoneNumber\", phoneNumber);",
									"pm.environment.set(\"providerTimezone\", ld.sample(timezones));",
									"pm.environment.set(\"providerRegion\", ld.sample(regions));",
									"pm.environment.set(\"providerCapacity\", capacity);",
									"pm.environment.set(\"providerHoursPerWeek\", hoursPerWeek);",
									"pm.environment.set(\"providerAccountStatus\", accountStatus);",
									"pm.environment.set(\"providerRoles\", roles);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "672ba4fb-9f27-4252-8b56-9105f1d2dbf0",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify id is generated\", function () {",
									"    pm.expect(jsonData.id).length.greaterThan(0);",
									"});",
									"",
									"pm.environment.set(\"Therapist_providerId\", jsonData.id);",
									"pm.environment.set(\"Therapist_firstname\", pm.environment.get(\"providerFirstName\"));",
									"pm.environment.set(\"Therapist_lastname\", pm.environment.get(\"providerLastName\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9794ca8a-8efa-44ae-9d3a-bb1b97fa9ab3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{providerFirstName}}\",\n    \"lastName\": \"{{providerLastName}}\",\n    \"email\": \"{{providerEmail}}\",\n    \"phoneNumber\": \"{{providerPhoneNumber}}\",\n    \"timezone\": \"{{providerTimezone}}\",\n    \"region\": \"{{providerRegion}}\",\n    \"providerType\": \"Therapist\",\n    \"capacity\": \"{{providerCapacity}}\",\n    \"hoursPerWeek\": \"{{providerHoursPerWeek}}\",\n    \"accountStatus\": \"{{providerAccountStatus}}\",\n    \"roles\": [\n        {{providerRoles}}\n    ],\n    \"supervisorId\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/providers",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"providers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Provider - Family Mentor",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c367184b-e28d-4d3c-b8f5-e10a7272359d",
								"exec": [
									"let ld = require('lodash');",
									"let timezones = [\"Hawaii Standard Time\", \"Hawaii-Aleutian Time\", \"Alaska Time\", \"Pacific Time\", \"Arizona\", \"Mountain Time\", \"Central Time\", \"Eastern Time\", \"London/UK Time\"];",
									"let regions = [\"Northeast\", \"Southwest\", \"Southeast\", \"West\", \"Midwest\"];",
									"let capacities = [\"full-time\", \"part-time\"];",
									"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let lastName = pm.variables.replaceIn('{{$randomLastName}}')",
									"let email = \"qa\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
									"let phoneNumber = pm.variables.replaceIn('{{$randomPhoneNumber}}');",
									"",
									"let supervisorId = \"\";",
									"",
									"let capacity = ld.sample(capacities);",
									"",
									"let hoursPerWeek;",
									"if (capacity == \"full-time\") {",
									"    hoursPerWeek = 40;",
									"} else {",
									"    hoursPerWeek = Math.floor(Math.random() * 90);",
									"}",
									"",
									"let accountStatus = \"active\";",
									"",
									"let permissions = [\"admin\", \"maud\", \"both\"];",
									"let permission = ld.sample(permissions);",
									"",
									"let roles = [\"admin:role:manage-users\",",
									"    \"maud:role:general-access\",",
									"    \"maud:role:advanced-access\"];",
									"",
									"if (permission === \"admin\") {",
									"    roles = [\"\\\"admin:role:manage-users\\\"\"];",
									"} else if (permission === \"maud\") {",
									"    roles = [\"\\\"maud:role:general-access\\\"\", \"\\\"maud:role:advanced-access\\\"\"];",
									"} else if (permission === \"both\") {",
									"    roles = [\"\\\"admin:role:manage-users\\\"\", \"\\\"maud:role:general-access\\\"\", \"\\\"maud:role:advanced-access\\\"\"];",
									"}",
									"",
									"pm.environment.set(\"providerFirstName\", firstName);",
									"pm.environment.set(\"providerLastName\", lastName);",
									"pm.environment.set(\"providerEmail\", email);",
									"pm.environment.set(\"providerPhoneNumber\", phoneNumber);",
									"pm.environment.set(\"providerTimezone\", ld.sample(timezones));",
									"pm.environment.set(\"providerRegion\", ld.sample(regions));",
									"pm.environment.set(\"providerCapacity\", capacity);",
									"pm.environment.set(\"providerHoursPerWeek\", hoursPerWeek);",
									"pm.environment.set(\"providerAccountStatus\", accountStatus);",
									"pm.environment.set(\"providerRoles\", roles);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "446387f4-8a9e-4ce8-a6e1-1dbed4603f35",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify id is generated\", function () {",
									"    pm.expect(jsonData.id).length.greaterThan(0);",
									"});",
									"",
									"pm.environment.set(\"FamilyMentor_providerId\", jsonData.id);",
									"pm.environment.set(\"FamilyMentor_firstname\", pm.environment.get(\"providerFirstName\"));",
									"pm.environment.set(\"FamilyMentor_lastname\", pm.environment.get(\"providerLastName\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3de98984-edd0-43f2-a9cd-a5b425500e03",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{providerFirstName}}\",\n    \"lastName\": \"{{providerLastName}}\",\n    \"email\": \"{{providerEmail}}\",\n    \"phoneNumber\": \"{{providerPhoneNumber}}\",\n    \"timezone\": \"{{providerTimezone}}\",\n    \"region\": \"{{providerRegion}}\",\n    \"providerType\": \"Family Mentor\",\n    \"capacity\": \"{{providerCapacity}}\",\n    \"hoursPerWeek\": \"{{providerHoursPerWeek}}\",\n    \"accountStatus\": \"{{providerAccountStatus}}\",\n    \"roles\": [\n        {{providerRoles}}\n    ],\n    \"supervisorId\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/providers",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"providers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Provider - Physician",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d2b29622-ccc5-4858-af58-6193716c810f",
								"exec": [
									"let ld = require('lodash');",
									"let timezones = [\"Hawaii Standard Time\", \"Hawaii-Aleutian Time\", \"Alaska Time\", \"Pacific Time\", \"Arizona\", \"Mountain Time\", \"Central Time\", \"Eastern Time\", \"London/UK Time\"];",
									"let regions = [\"Northeast\", \"Southwest\", \"Southeast\", \"West\", \"Midwest\"];",
									"let capacities = [\"full-time\", \"part-time\"];",
									"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let lastName = pm.variables.replaceIn('{{$randomLastName}}')",
									"let email = \"qa\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
									"let phoneNumber = pm.variables.replaceIn('{{$randomPhoneNumber}}');",
									"",
									"let supervisorId = \"\";",
									"",
									"let capacity = ld.sample(capacities);",
									"",
									"let hoursPerWeek;",
									"if (capacity == \"full-time\") {",
									"    hoursPerWeek = 40;",
									"} else {",
									"    hoursPerWeek = Math.floor(Math.random() * 90);",
									"}",
									"",
									"let accountStatus = \"active\";",
									"",
									"let permissions = [\"admin\", \"maud\", \"both\"];",
									"let permission = ld.sample(permissions);",
									"",
									"let roles = [\"admin:role:manage-users\",",
									"    \"maud:role:general-access\",",
									"    \"maud:role:advanced-access\"];",
									"",
									"if (permission === \"admin\") {",
									"    roles = [\"\\\"admin:role:manage-users\\\"\"];",
									"} else if (permission === \"maud\") {",
									"    roles = [\"\\\"maud:role:general-access\\\"\", \"\\\"maud:role:advanced-access\\\"\"];",
									"} else if (permission === \"both\") {",
									"    roles = [\"\\\"admin:role:manage-users\\\"\", \"\\\"maud:role:general-access\\\"\", \"\\\"maud:role:advanced-access\\\"\"];",
									"}",
									"",
									"pm.environment.set(\"providerFirstName\", firstName);",
									"pm.environment.set(\"providerLastName\", lastName);",
									"pm.environment.set(\"providerEmail\", email);",
									"pm.environment.set(\"providerPhoneNumber\", phoneNumber);",
									"pm.environment.set(\"providerTimezone\", ld.sample(timezones));",
									"pm.environment.set(\"providerRegion\", ld.sample(regions));",
									"pm.environment.set(\"providerCapacity\", capacity);",
									"pm.environment.set(\"providerHoursPerWeek\", hoursPerWeek);",
									"pm.environment.set(\"providerAccountStatus\", accountStatus);",
									"pm.environment.set(\"providerRoles\", roles);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "235dc962-b22f-458d-a263-896f7a209b37",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify id is generated\", function () {",
									"    pm.expect(jsonData.id).length.greaterThan(0);",
									"});",
									"",
									"pm.environment.set(\"Physician_providerId\", jsonData.id);",
									"pm.environment.set(\"Physician_firstname\", pm.environment.get(\"providerFirstName\"));",
									"pm.environment.set(\"Physician_lastname\", pm.environment.get(\"providerLastName\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "00baa1f5-96aa-4f84-aa62-ecd4078135f0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{providerFirstName}}\",\n    \"lastName\": \"{{providerLastName}}\",\n    \"email\": \"{{providerEmail}}\",\n    \"phoneNumber\": \"{{providerPhoneNumber}}\",\n    \"timezone\": \"{{providerTimezone}}\",\n    \"region\": \"{{providerRegion}}\",\n    \"providerType\": \"Physician\",\n    \"capacity\": \"{{providerCapacity}}\",\n    \"hoursPerWeek\": \"{{providerHoursPerWeek}}\",\n    \"accountStatus\": \"{{providerAccountStatus}}\",\n    \"roles\": [\n        {{providerRoles}}\n    ],\n    \"supervisorId\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/providers",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"providers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Provider - Psychiatrist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "19116d28-74ab-4300-a2eb-7cb9954be06d",
								"exec": [
									"let ld = require('lodash');",
									"let timezones = [\"Hawaii Standard Time\", \"Hawaii-Aleutian Time\", \"Alaska Time\", \"Pacific Time\", \"Arizona\", \"Mountain Time\", \"Central Time\", \"Eastern Time\", \"London/UK Time\"];",
									"let regions = [\"Northeast\", \"Southwest\", \"Southeast\", \"West\", \"Midwest\"];",
									"let capacities = [\"full-time\", \"part-time\"];",
									"let firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
									"let lastName = pm.variables.replaceIn('{{$randomLastName}}')",
									"let email = \"qa\" + \"+\" + firstName + \"+\" + Date.now() + \"@equip.health\";",
									"let phoneNumber = pm.variables.replaceIn('{{$randomPhoneNumber}}');",
									"",
									"let supervisorId = \"\";",
									"",
									"let capacity = ld.sample(capacities);",
									"",
									"let hoursPerWeek;",
									"if (capacity == \"full-time\") {",
									"    hoursPerWeek = 40;",
									"} else {",
									"    hoursPerWeek = Math.floor(Math.random() * 90);",
									"}",
									"",
									"let accountStatus = \"active\";",
									"",
									"let permissions = [\"admin\", \"maud\", \"both\"];",
									"let permission = ld.sample(permissions);",
									"",
									"let roles = [\"admin:role:manage-users\",",
									"    \"maud:role:general-access\",",
									"    \"maud:role:advanced-access\"];",
									"",
									"if (permission === \"admin\") {",
									"    roles = [\"\\\"admin:role:manage-users\\\"\"];",
									"} else if (permission === \"maud\") {",
									"    roles = [\"\\\"maud:role:general-access\\\"\", \"\\\"maud:role:advanced-access\\\"\"];",
									"} else if (permission === \"both\") {",
									"    roles = [\"\\\"admin:role:manage-users\\\"\", \"\\\"maud:role:general-access\\\"\", \"\\\"maud:role:advanced-access\\\"\"];",
									"}",
									"",
									"pm.environment.set(\"providerFirstName\", firstName);",
									"pm.environment.set(\"providerLastName\", lastName);",
									"pm.environment.set(\"providerEmail\", email);",
									"pm.environment.set(\"providerPhoneNumber\", phoneNumber);",
									"pm.environment.set(\"providerTimezone\", ld.sample(timezones));",
									"pm.environment.set(\"providerRegion\", ld.sample(regions));",
									"pm.environment.set(\"providerCapacity\", capacity);",
									"pm.environment.set(\"providerHoursPerWeek\", hoursPerWeek);",
									"pm.environment.set(\"providerAccountStatus\", accountStatus);",
									"pm.environment.set(\"providerRoles\", roles);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "76af65fd-9284-45a0-a0d2-fb39361848b1",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify id is generated\", function () {",
									"    pm.expect(jsonData.id).length.greaterThan(0);",
									"});",
									"",
									"pm.environment.set(\"Psychiatrist_providerId\", jsonData.id);",
									"pm.environment.set(\"Psychiatrist_firstname\", pm.environment.get(\"providerFirstName\"));",
									"pm.environment.set(\"Psychiatrist_lastname\", pm.environment.get(\"providerLastName\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5baec7e3-f56d-4c9d-acb5-440644f08499",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{providerFirstName}}\",\n    \"lastName\": \"{{providerLastName}}\",\n    \"email\": \"{{providerEmail}}\",\n    \"phoneNumber\": \"{{providerPhoneNumber}}\",\n    \"timezone\": \"{{providerTimezone}}\",\n    \"region\": \"{{providerRegion}}\",\n    \"providerType\": \"Psychiatrist\",\n    \"capacity\": \"{{providerCapacity}}\",\n    \"hoursPerWeek\": \"{{providerHoursPerWeek}}\",\n    \"accountStatus\": \"{{providerAccountStatus}}\",\n    \"roles\": [\n        {{providerRoles}}\n    ],\n    \"supervisorId\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/providers",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"providers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add care team members",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fff489f6-5e3b-42fd-b2c8-ec695f7dba80",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dca4b964-acce-465e-8270-266d4f57085d",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Verify id is generated\", function () {",
									"    pm.expect(jsonData.id).length.greaterThan(0);",
									"});",
									"",
									"//pm.environment.set(\"patientId\", jsonData.id);",
									"// pm.sendRequest(\"Get Patient by ID\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1d3dff38-3367-4ae3-b42a-68f561534a85",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"patientExternalId\": \"{{patientId}}\",\n    \"type\": \"care\",\n    \"providers\": [\n        \"{{ppr_providerId}}\",\n        \"{{admissions_specialist_providerId}}\",\n        \"{{FEN_providerId}}\",\n        \"{{Dietitian_providerId}}\",\n        \"{{PeerMentor_providerId}}\",\n        \"{{Therapist_providerId}}\",\n        \"{{FamilyMentor_providerId}}\",\n        \"{{Physician_providerId}}\",\n        \"{{Psychiatrist_providerId}}\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/care-team",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"care-team"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patient list - Primary diagnosis and Care team members Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c52f432e-d49b-4c37-976e-d1683984c278",
								"exec": [
									"let jsonData = pm.response.json();",
									"let ld = require('lodash');",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify response have only patient basic info\", function () {",
									"    let keys = Object.keys(jsonData.data[0]);",
									"    pm.expect(keys.length).to.equal(17);",
									"    pm.expect(keys).to.include(\"externalId\");",
									"    pm.expect(keys).to.include(\"firstName\");",
									"    pm.expect(keys).to.include(\"lastName\");",
									"    pm.expect(keys).to.include(\"chosenName\");",
									"    pm.expect(keys).to.include(\"dateOfBirth\");",
									"    pm.expect(keys).to.include(\"state\");",
									"    pm.expect(keys).to.include(\"payors\");",
									"    pm.expect(keys).to.include(\"episodeStatus\");",
									"    pm.expect(keys).to.include(\"admitDate\");",
									"    pm.expect(keys).to.include(\"medicalClearanceStatus\");",
									"    pm.expect(keys).to.include(\"insuranceStatus\");",
									"    //pm.expect(keys).to.include(\"primaryDiagnosis\");",
									"    pm.expect(keys).to.include(\"careTeamMembers\");",
									"    pm.expect(keys).to.include(\"payorName\");",
									"    pm.expect(keys).to.include(\"payorProgramName\");",
									"    pm.expect(keys).to.include(\"isPaused\");",
									"    pm.expect(keys).to.include(\"daysOfCare\");",
									"    pm.expect(keys).to.include(\"weeksAtEquip\");",
									"});",
									"",
									"pm.test(\"Verify response data\", function () {",
									"    let exp_response = {",
									"        \"data\": [",
									"            {",
									"                \"externalId\": \"\" + pm.environment.get(\"patientId\") + \"\",",
									"                \"firstName\": \"\" + pm.environment.get(\"patientFirstName\") + \"\",",
									"                \"chosenName\": \"\" + pm.environment.get(\"patientChosenName\") + \"\",",
									"                \"lastName\": \"\" + pm.environment.get(\"patientLastName\") + \"\",",
									"                \"dateOfBirth\": \"\" + pm.environment.get(\"patientDateOfBirth\") + \"\",",
									"                \"state\": \"\" + pm.environment.get(\"patientState\") + \"\",",
									"                \"payors\": ld.orderBy([",
									"                    pm.environment.get(\"filPatientPayor1\"),",
									"                    pm.environment.get(\"filPatientPayor2\"),",
									"                ], [], ['asc']),",
									"                \"episodeStatus\": \"\" + pm.environment.get(\"cdsEpisodeStatus\") + \"\",",
									"                \"admitDate\": \"\" + pm.environment.get(\"cdsEpisodeStartDate\") + \"\",",
									"                \"medicalClearanceStatus\": \"\" + pm.environment.get(\"medicalClearanceStatus\") + \"\",",
									"                \"insuranceStatus\": \"\" + pm.environment.get(\"insuranceVerificationStatus\") + \"\",",
									"                //\"primaryDiagnosis\": \"\" + pm.environment.get(\"primaryDiagnosis\") + \"\",",
									"                \"careTeamMembers\": [",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"ppr_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"ppr_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Patient Service Representative\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"admissions_specialist_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"admissions_specialist_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Admissions Specialist\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"FEN_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"FEN_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Family Experience Navigator\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"Dietitian_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"Dietitian_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Dietitian\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"PeerMentor_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"PeerMentor_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Peer Mentor\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"Therapist_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"Therapist_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Therapist\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"FamilyMentor_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"FamilyMentor_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Family Mentor\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"Physician_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"Physician_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Physician\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"Psychiatrist_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"Psychiatrist_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Psychiatrist\",",
									"                    }",
									"                ],",
									"                \"payorName\": \"\" + pm.environment.get(\"filPatientPayor2\") + \"\",",
									"                \"payorProgramName\": \"\" + pm.environment.get(\"payor_program2\") + \"\",",
									"                \"isPaused\": false,",
									"                \"daysOfCare\": 0,",
									"                \"weeksAtEquip\": 0",
									"            }",
									"        ],",
									"        \"pageNumber\": 1,",
									"        \"pageSize\": 20,",
									"        \"totalCount\": 1",
									"    }",
									"",
									"    delete jsonData.data[0].daysOfCare;",
									"    delete jsonData.data[0].weeksAtEquip;",
									"    delete exp_response.data[0].daysOfCare;",
									"    delete exp_response.data[0].weeksAtEquip;",
									"",
									"    console.log(\"jsonData: \" + JSON.stringify(jsonData));",
									"    console.log(\"exp_response: \" + JSON.stringify(exp_response));",
									"    pm.expect(jsonData).to.eql(exp_response);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0488549e-12d5-4648-989c-7eab7cf228df",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "976c29be-918b-41ae-bbe4-919457f0e633",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/patients?filter-by=patient-name::{{patientFirstName}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"patients"
							],
							"query": [
								{
									"key": "filter-by",
									"value": "patient-name::{{patientFirstName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add primary diagnosis",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c2cbd70f-309b-44b0-9d0e-9f53a3e9bed7",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify id is generated\", function () {",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"",
									"//Set diagnosis id to be used in next request",
									"pm.environment.set(\"primaryDiagnosisId\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4acbe77b-d238-4210-a029-2d6f4e566be8",
								"exec": [
									"let ld = require('lodash');",
									"",
									"let primaryDiagnosisList = [",
									"    {",
									"        \"abbreviation\": \"AN\",",
									"        \"diagnosis_name\": \"Anorexia nervosa, unspecified\"",
									"    },",
									"    {",
									"        \"abbreviation\": \"AN-R\",",
									"        \"diagnosis_name\": \"Anorexia nervosa, restricting type\"",
									"    },",
									"    {",
									"        \"abbreviation\": \"AN-BP\",",
									"        \"diagnosis_name\": \"Anorexia nervosa, binge eating\\/purging type\"",
									"    },",
									"    {",
									"        \"abbreviation\": \"BN\",",
									"        \"diagnosis_name\": \"Bulimia nervosa\"",
									"    },",
									"    {",
									"        \"abbreviation\": \"OSFED\",",
									"        \"diagnosis_name\": \"Other eating disorders\"",
									"    },",
									"    {",
									"        \"abbreviation\": \"ARFID\",",
									"        \"diagnosis_name\": \"Avoidant\\/restrictive food intake disorder\"",
									"    },",
									"    {",
									"        \"abbreviation\": \"EDNOS\",",
									"        \"diagnosis_name\": \"Eating disorder, unspecified\"",
									"    },",
									"    {",
									"        \"abbreviation\": \"BED\",",
									"        \"diagnosis_name\": \"Binge eating disorder\"",
									"    }",
									"];",
									"let primaryDiagnosis = ld.sample(primaryDiagnosisList);",
									"let diagnosisName = primaryDiagnosis.diagnosis_name;",
									"",
									"pm.environment.set(\"primaryDiagnosis\", diagnosisName);",
									"pm.environment.set(\"primaryDiagnosisAbbreviation\", primaryDiagnosis.abbreviation);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e3e10e38-7678-4b89-b163-850de140c04b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"code\": \"F502\",\n  \"codingSystem\": \"icd-10-cm-2022\",\n  \"endDate\": \"\",\n  \"onsetDate\": \"\",\n  \"primary\": true,\n  \"status\": \"preliminary\",\n  \"statusReason\": null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/clinical-data/patients/{{patientId}}/diagnoses",
							"host": [
								"{{host}}"
							],
							"path": [
								"clinical-data",
								"patients",
								"{{patientId}}",
								"diagnoses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patient list - Primary diagnosis and Care team members",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cfd45139-226a-466b-8bb5-525312d38301",
								"exec": [
									"let jsonData = pm.response.json();",
									"let ld = require('lodash');",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify response have only patient basic info\", function () {",
									"    let keys = Object.keys(jsonData.data[0]);",
									"    pm.expect(keys.length).to.equal(18);",
									"    pm.expect(keys).to.include(\"externalId\");",
									"    pm.expect(keys).to.include(\"firstName\");",
									"    pm.expect(keys).to.include(\"lastName\");",
									"    pm.expect(keys).to.include(\"chosenName\");",
									"    pm.expect(keys).to.include(\"dateOfBirth\");",
									"    pm.expect(keys).to.include(\"state\");",
									"    pm.expect(keys).to.include(\"payors\");",
									"    pm.expect(keys).to.include(\"episodeStatus\");",
									"    pm.expect(keys).to.include(\"admitDate\");",
									"    pm.expect(keys).to.include(\"medicalClearanceStatus\");",
									"    pm.expect(keys).to.include(\"insuranceStatus\");",
									"    pm.expect(keys).to.include(\"primaryDiagnosis\");",
									"    pm.expect(keys).to.include(\"careTeamMembers\");",
									"    pm.expect(keys).to.include(\"payorName\");",
									"    pm.expect(keys).to.include(\"payorProgramName\");",
									"    pm.expect(keys).to.include(\"isPaused\");",
									"    pm.expect(keys).to.include(\"daysOfCare\");",
									"    pm.expect(keys).to.include(\"weeksAtEquip\");",
									"});",
									"",
									"pm.test(\"Verify response data\", function () {",
									"    let exp_response = {",
									"        \"data\": [",
									"            {",
									"                \"externalId\": \"\" + pm.environment.get(\"patientId\") + \"\",",
									"                \"firstName\": \"\" + pm.environment.get(\"patientFirstName\") + \"\",",
									"                \"chosenName\": \"\" + pm.environment.get(\"patientChosenName\") + \"\",",
									"                \"lastName\": \"\" + pm.environment.get(\"patientLastName\") + \"\",",
									"                \"dateOfBirth\": \"\" + pm.environment.get(\"patientDateOfBirth\") + \"\",",
									"                \"state\": \"\" + pm.environment.get(\"patientState\") + \"\",",
									"                \"payors\": ld.orderBy([",
									"                    pm.environment.get(\"filPatientPayor1\"),",
									"                    pm.environment.get(\"filPatientPayor2\"),",
									"                ], [], ['asc']),",
									"                \"episodeStatus\": \"\" + pm.environment.get(\"cdsEpisodeStatus\") + \"\",",
									"                \"admitDate\": \"\" + pm.environment.get(\"cdsEpisodeStartDate\") + \"\",",
									"                \"medicalClearanceStatus\": \"\" + pm.environment.get(\"medicalClearanceStatus\") + \"\",",
									"                \"insuranceStatus\": \"\" + pm.environment.get(\"insuranceVerificationStatus\") + \"\",",
									"                \"primaryDiagnosis\": \"Bulimia nervosa\",",
									"                \"careTeamMembers\": [",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"ppr_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"ppr_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Patient Service Representative\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"admissions_specialist_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"admissions_specialist_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Admissions Specialist\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"FEN_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"FEN_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Family Experience Navigator\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"Dietitian_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"Dietitian_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Dietitian\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"PeerMentor_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"PeerMentor_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Peer Mentor\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"Therapist_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"Therapist_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Therapist\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"FamilyMentor_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"FamilyMentor_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Family Mentor\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"Physician_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"Physician_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Physician\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"Psychiatrist_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"Psychiatrist_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Psychiatrist\",",
									"                    }",
									"                ],",
									"                \"payorName\": \"\" + pm.environment.get(\"filPatientPayor2\") + \"\",",
									"                \"payorProgramName\": \"\" + pm.environment.get(\"payor_program2\") + \"\",",
									"                \"isPaused\": false,",
									"                \"daysOfCare\": 0,",
									"                \"weeksAtEquip\": 0",
									"            }",
									"        ],",
									"        \"pageNumber\": 1,",
									"        \"pageSize\": 20,",
									"        \"totalCount\": 1",
									"    }",
									"",
									"    delete jsonData.data[0].daysOfCare;",
									"    delete jsonData.data[0].weeksAtEquip;",
									"    delete exp_response.data[0].daysOfCare;",
									"    delete exp_response.data[0].weeksAtEquip;",
									"",
									"    console.log(\"jsonData: \" + JSON.stringify(jsonData));",
									"    console.log(\"exp_response: \" + JSON.stringify(exp_response));",
									"    pm.expect(jsonData).to.eql(exp_response);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cf6f2c90-6fb2-4f62-8cee-c5cfdcbc1728",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3af07c4b-c730-4408-aa6b-d149bcef3ffc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/patients?filter-by=patient-name::{{patientFirstName}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"patients"
							],
							"query": [
								{
									"key": "filter-by",
									"value": "patient-name::{{patientFirstName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add draft note - Qualifying call note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify note external id is generated\", function () {",
									"    pm.expect(jsonData.noteExternalId).length.greaterThan(0);",
									"});",
									"",
									"//set noteExternalId to be used in next request",
									"pm.environment.set(\"QualifyingCallNoteExternalId\", jsonData.noteExternalId);",
									"pm.environment.set(\"QualifyingCallNoteTitle\", pm.environment.get(\"noteTitle\"));",
									"pm.environment.set(\"QualifyingCallNoteContent\", pm.environment.get(\"noteContent\"));",
									"",
									""
								],
								"type": "text/javascript",
								"id": "6faddfc2-ecdf-4be4-975c-92a7357d4fb4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let ld = require('lodash');",
									"",
									"let noteCommunicationMethod = [\"Chat\", \"Email\", \"Inbound phone\", \"Outbound phone\", \"Video\"];",
									"let noteStatus = [\"draft\"];",
									"let activityWithName = [\"Case manager\", \"School\", \"Carer\", \"Patient\", \"Payor\", \"Provider\"];",
									"let noteType = [\"Admissions\", \"Authorization\", \"Billing\", \"Care coordination\", \"Consent forms\", \"Custody agreement\", \"FEN introduction\", \"Informed consent\", \"Inquiry\", \"Insurance\", \"Insurance card\", \"Intake session\", \"Medical clearance\", \"Medical records\", \"Patient chart\", \"Patient follow-up\", \"Phone screen\", \"Presenting problem\", \"Provider assignment\", \"Provider follow-up\", \"Qualifying call\", \"Referral\", \"Referral correspondance\", \"Release of information\", \"Treatment consent\", \"Treatment session\"];",
									"",
									"let recentDateTime = pm.variables.replaceIn('{{$randomDateRecent}}');",
									"let noteContent = \"{\\\"blocks\\\":[{\\\"key\\\":\\\"9vf7r\\\",\\\"text\\\":\\\"\" + pm.variables.replaceIn('{{$randomLoremSentences}}') + \"\\\",\\\"type\\\":\\\"unstyled\\\",\\\"depth\\\":0,\\\"inlineStyleRanges\\\":[],\\\"entityRanges\\\":[],\\\"data\\\":{}}],\\\"entityMap\\\":{}}\";",
									"",
									"//Save the variables to be used in next request for validation",
									"pm.environment.set(\"noteCommunicationMethod\", ld.sample(noteCommunicationMethod));",
									"pm.environment.set(\"noteStatus\", ld.sample(noteStatus));",
									"pm.environment.set(\"noteTitle\", \"From Postman \" + recentDateTime + \" Equip Health\");",
									"pm.environment.set(\"noteContent\", JSON.stringify(noteContent));",
									"pm.environment.set(\"activityWithName\", ld.sample(activityWithName));",
									"pm.environment.set(\"noteType\", ld.sample(noteType));",
									"pm.environment.set(\"isActive\", pm.variables.replaceIn('{{$randomBoolean}}'));",
									"pm.environment.set(\"isConfidential\", pm.variables.replaceIn('{{$randomBoolean}}'));"
								],
								"type": "text/javascript",
								"id": "e2447bec-5fdd-4f33-a129-5d1ec492c0f5"
							}
						}
					],
					"id": "da908b68-c50c-4c25-ac73-808c0215fec1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"authoredByProviderExternalId\": \"{{authoredByProviderExternalId}}\",\n    \"patientExternalId\": \"{{patientId}}\",\n    \"title\": \"{{noteTitle}}\",\n    \"noteStatus\": \"{{noteStatus}}\",\n    \"noteContent\": {{noteContent}},\n    \"activityWith\": [\n        {\n            \"activityWithName\": \"{{activityWithName}}\",\n            \"otherName\": \"Postman otherName\",\n            \"isActive\": {{isActive}}\n        }\n    ],\n    \"noteCommunicationMethod\": \"{{noteCommunicationMethod}}\",\n    \"isConfidential\": {{isConfidential}},\n    \"noteType\": \"Qualifying call\",\n    \"tags\": [\n        \"Test tag\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/clinical-data/notes",
							"host": [
								"{{host}}"
							],
							"path": [
								"clinical-data",
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add draft note - Phone screen note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify note external id is generated\", function () {",
									"    pm.expect(jsonData.noteExternalId).length.greaterThan(0);",
									"});",
									"",
									"//set noteExternalId to be used in next request",
									"pm.environment.set(\"PhoneScreenNoteExternalId\", jsonData.noteExternalId);",
									"pm.environment.set(\"PhoneScreenNoteTitle\", pm.environment.get(\"noteTitle\"));",
									"pm.environment.set(\"PhoneScreenNoteContent\", pm.environment.get(\"noteContent\"));",
									"",
									""
								],
								"type": "text/javascript",
								"id": "7e774c5b-f3f2-421d-954d-1dcd617fcaa0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let ld = require('lodash');",
									"",
									"let noteCommunicationMethod = [\"Chat\", \"Email\", \"Inbound phone\", \"Outbound phone\", \"Video\"];",
									"let noteStatus = [\"draft\"];",
									"let activityWithName = [\"Case manager\", \"School\", \"Carer\", \"Patient\", \"Payor\", \"Provider\"];",
									"let noteType = [\"Admissions\", \"Authorization\", \"Billing\", \"Care coordination\", \"Consent forms\", \"Custody agreement\", \"FEN introduction\", \"Informed consent\", \"Inquiry\", \"Insurance\", \"Insurance card\", \"Intake session\", \"Medical clearance\", \"Medical records\", \"Patient chart\", \"Patient follow-up\", \"Phone screen\", \"Presenting problem\", \"Provider assignment\", \"Provider follow-up\", \"Qualifying call\", \"Referral\", \"Referral correspondance\", \"Release of information\", \"Treatment consent\", \"Treatment session\"];",
									"",
									"let recentDateTime = pm.variables.replaceIn('{{$randomDateRecent}}');",
									"let noteContent = \"{\\\"blocks\\\":[{\\\"key\\\":\\\"9vf7r\\\",\\\"text\\\":\\\"\" + pm.variables.replaceIn('{{$randomLoremSentences}}') + \"\\\",\\\"type\\\":\\\"unstyled\\\",\\\"depth\\\":0,\\\"inlineStyleRanges\\\":[],\\\"entityRanges\\\":[],\\\"data\\\":{}}],\\\"entityMap\\\":{}}\";",
									"",
									"//Save the variables to be used in next request for validation",
									"pm.environment.set(\"noteCommunicationMethod\", ld.sample(noteCommunicationMethod));",
									"pm.environment.set(\"noteStatus\", ld.sample(noteStatus));",
									"pm.environment.set(\"noteTitle\", \"From Postman \" + recentDateTime + \" Equip Health\");",
									"pm.environment.set(\"noteContent\", JSON.stringify(noteContent));",
									"pm.environment.set(\"activityWithName\", ld.sample(activityWithName));",
									"pm.environment.set(\"noteType\", ld.sample(noteType));",
									"pm.environment.set(\"isActive\", pm.variables.replaceIn('{{$randomBoolean}}'));",
									"pm.environment.set(\"isConfidential\", pm.variables.replaceIn('{{$randomBoolean}}'));"
								],
								"type": "text/javascript",
								"id": "293337b2-6621-444a-9b07-588e40950aea"
							}
						}
					],
					"id": "e2f9770c-d5b6-4d85-935b-9fe4fccab346",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"authoredByProviderExternalId\": \"{{authoredByProviderExternalId}}\",\n    \"patientExternalId\": \"{{patientId}}\",\n    \"title\": \"{{noteTitle}}\",\n    \"noteStatus\": \"{{noteStatus}}\",\n    \"noteContent\": {{noteContent}},\n    \"activityWith\": [\n        {\n            \"activityWithName\": \"{{activityWithName}}\",\n            \"otherName\": \"Postman otherName\",\n            \"isActive\": {{isActive}}\n        }\n    ],\n    \"noteCommunicationMethod\": \"{{noteCommunicationMethod}}\",\n    \"isConfidential\": {{isConfidential}},\n    \"noteType\": \"Phone screen\",\n    \"tags\": [\n        \"Test tag\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/clinical-data/notes",
							"host": [
								"{{host}}"
							],
							"path": [
								"clinical-data",
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add draft note - Presenting problem note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify note external id is generated\", function () {",
									"    pm.expect(jsonData.noteExternalId).length.greaterThan(0);",
									"});",
									"",
									"//set noteExternalId to be used in next request",
									"pm.environment.set(\"PresentingProblemNoteExternalId\", jsonData.noteExternalId);",
									"pm.environment.set(\"PresentingProblemNoteTitle\", pm.environment.get(\"noteTitle\"));",
									"pm.environment.set(\"PresentingProblemNoteContent\", pm.environment.get(\"noteContent\"));",
									"",
									""
								],
								"type": "text/javascript",
								"id": "31a2341d-96ea-4972-b168-8938e6325c33"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let ld = require('lodash');",
									"",
									"let noteCommunicationMethod = [\"Chat\", \"Email\", \"Inbound phone\", \"Outbound phone\", \"Video\"];",
									"let noteStatus = [\"draft\"];",
									"let activityWithName = [\"Case manager\", \"School\", \"Carer\", \"Patient\", \"Payor\", \"Provider\"];",
									"let noteType = [\"Admissions\", \"Authorization\", \"Billing\", \"Care coordination\", \"Consent forms\", \"Custody agreement\", \"FEN introduction\", \"Informed consent\", \"Inquiry\", \"Insurance\", \"Insurance card\", \"Intake session\", \"Medical clearance\", \"Medical records\", \"Patient chart\", \"Patient follow-up\", \"Phone screen\", \"Presenting problem\", \"Provider assignment\", \"Provider follow-up\", \"Qualifying call\", \"Referral\", \"Referral correspondance\", \"Release of information\", \"Treatment consent\", \"Treatment session\"];",
									"",
									"let recentDateTime = pm.variables.replaceIn('{{$randomDateRecent}}');",
									"let noteContent = \"{\\\"blocks\\\":[{\\\"key\\\":\\\"9vf7r\\\",\\\"text\\\":\\\"\" + pm.variables.replaceIn('{{$randomLoremSentences}}') + \"\\\",\\\"type\\\":\\\"unstyled\\\",\\\"depth\\\":0,\\\"inlineStyleRanges\\\":[],\\\"entityRanges\\\":[],\\\"data\\\":{}}],\\\"entityMap\\\":{}}\";",
									"",
									"//Save the variables to be used in next request for validation",
									"pm.environment.set(\"noteCommunicationMethod\", ld.sample(noteCommunicationMethod));",
									"pm.environment.set(\"noteStatus\", ld.sample(noteStatus));",
									"pm.environment.set(\"noteTitle\", \"From Postman \" + recentDateTime + \" Equip Health\");",
									"pm.environment.set(\"noteContent\", JSON.stringify(noteContent));",
									"pm.environment.set(\"activityWithName\", ld.sample(activityWithName));",
									"pm.environment.set(\"noteType\", ld.sample(noteType));",
									"pm.environment.set(\"isActive\", pm.variables.replaceIn('{{$randomBoolean}}'));",
									"pm.environment.set(\"isConfidential\", pm.variables.replaceIn('{{$randomBoolean}}'));"
								],
								"type": "text/javascript",
								"id": "f827098c-ea86-4082-aa78-fbc7b073c2f6"
							}
						}
					],
					"id": "8019c115-a22f-4ad4-9afd-608747103f16",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"authoredByProviderExternalId\": \"{{authoredByProviderExternalId}}\",\n    \"patientExternalId\": \"{{patientId}}\",\n    \"title\": \"{{noteTitle}}\",\n    \"noteStatus\": \"{{noteStatus}}\",\n    \"noteContent\": {{noteContent}},\n    \"activityWith\": [\n        {\n            \"activityWithName\": \"{{activityWithName}}\",\n            \"otherName\": \"Postman otherName\",\n            \"isActive\": {{isActive}}\n        }\n    ],\n    \"noteCommunicationMethod\": \"{{noteCommunicationMethod}}\",\n    \"isConfidential\": {{isConfidential}},\n    \"noteType\": \"Presenting problem\",\n    \"tags\": [\n        \"Test tag\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/clinical-data/notes",
							"host": [
								"{{host}}"
							],
							"path": [
								"clinical-data",
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add draft note - Consent  forms note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify note external id is generated\", function () {",
									"    pm.expect(jsonData.noteExternalId).length.greaterThan(0);",
									"});",
									"",
									"//set noteExternalId to be used in next request",
									"pm.environment.set(\"ConsentFormsNoteExternalId\", jsonData.noteExternalId);",
									"pm.environment.set(\"ConsentFormsNoteTitle\", pm.environment.get(\"noteTitle\"));",
									"pm.environment.set(\"ConsentFormsNoteContent\", pm.environment.get(\"noteContent\"));",
									"",
									""
								],
								"type": "text/javascript",
								"id": "1f3be672-9db9-4fdd-8ca5-58aa4926eeb1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let ld = require('lodash');",
									"",
									"let noteCommunicationMethod = [\"Chat\", \"Email\", \"Inbound phone\", \"Outbound phone\", \"Video\"];",
									"let noteStatus = [\"draft\"];",
									"let activityWithName = [\"Case manager\", \"School\", \"Carer\", \"Patient\", \"Payor\", \"Provider\"];",
									"let noteType = [\"Admissions\", \"Authorization\", \"Billing\", \"Care coordination\", \"Consent forms\", \"Custody agreement\", \"FEN introduction\", \"Informed consent\", \"Inquiry\", \"Insurance\", \"Insurance card\", \"Intake session\", \"Medical clearance\", \"Medical records\", \"Patient chart\", \"Patient follow-up\", \"Phone screen\", \"Presenting problem\", \"Provider assignment\", \"Provider follow-up\", \"Qualifying call\", \"Referral\", \"Referral correspondance\", \"Release of information\", \"Treatment consent\", \"Treatment session\"];",
									"",
									"let recentDateTime = pm.variables.replaceIn('{{$randomDateRecent}}');",
									"let noteContent = \"{\\\"blocks\\\":[{\\\"key\\\":\\\"9vf7r\\\",\\\"text\\\":\\\"\" + pm.variables.replaceIn('{{$randomLoremSentences}}') + \"\\\",\\\"type\\\":\\\"unstyled\\\",\\\"depth\\\":0,\\\"inlineStyleRanges\\\":[],\\\"entityRanges\\\":[],\\\"data\\\":{}}],\\\"entityMap\\\":{}}\";",
									"",
									"//Save the variables to be used in next request for validation",
									"pm.environment.set(\"noteCommunicationMethod\", ld.sample(noteCommunicationMethod));",
									"pm.environment.set(\"noteStatus\", ld.sample(noteStatus));",
									"pm.environment.set(\"noteTitle\", \"From Postman \" + recentDateTime + \" Equip Health\");",
									"pm.environment.set(\"noteContent\", JSON.stringify(noteContent));",
									"pm.environment.set(\"activityWithName\", ld.sample(activityWithName));",
									"pm.environment.set(\"noteType\", ld.sample(noteType));",
									"pm.environment.set(\"isActive\", pm.variables.replaceIn('{{$randomBoolean}}'));",
									"pm.environment.set(\"isConfidential\", pm.variables.replaceIn('{{$randomBoolean}}'));"
								],
								"type": "text/javascript",
								"id": "a997c291-49d9-45b1-9f7b-66d6150bdf7b"
							}
						}
					],
					"id": "b73fc2aa-5964-437b-b461-a26504484fe4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"authoredByProviderExternalId\": \"{{authoredByProviderExternalId}}\",\n    \"patientExternalId\": \"{{patientId}}\",\n    \"title\": \"{{noteTitle}}\",\n    \"noteStatus\": \"{{noteStatus}}\",\n    \"noteContent\": {{noteContent}},\n    \"activityWith\": [\n        {\n            \"activityWithName\": \"{{activityWithName}}\",\n            \"otherName\": \"Postman otherName\",\n            \"isActive\": {{isActive}}\n        }\n    ],\n    \"noteCommunicationMethod\": \"{{noteCommunicationMethod}}\",\n    \"isConfidential\": {{isConfidential}},\n    \"noteType\": \"Consent forms\",\n    \"tags\": [\n        \"Test tag\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/clinical-data/notes",
							"host": [
								"{{host}}"
							],
							"path": [
								"clinical-data",
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add draft note - FEN introduction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify note external id is generated\", function () {",
									"    pm.expect(jsonData.noteExternalId).length.greaterThan(0);",
									"});",
									"",
									"//set noteExternalId to be used in next request",
									"pm.environment.set(\"FENIntroductionNoteExternalId\", jsonData.noteExternalId);",
									"pm.environment.set(\"FENIntroductionNoteTitle\", pm.environment.get(\"noteTitle\"));",
									"pm.environment.set(\"FENIntroductionNoteContent\", pm.environment.get(\"noteContent\"));",
									"",
									""
								],
								"type": "text/javascript",
								"id": "978bcfd3-3d75-4c6e-9a14-235d8817e79e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let ld = require('lodash');",
									"",
									"let noteCommunicationMethod = [\"Chat\", \"Email\", \"Inbound phone\", \"Outbound phone\", \"Video\"];",
									"let noteStatus = [\"draft\"];",
									"let activityWithName = [\"Case manager\", \"School\", \"Carer\", \"Patient\", \"Payor\", \"Provider\"];",
									"let noteType = [\"Admissions\", \"Authorization\", \"Billing\", \"Care coordination\", \"Consent forms\", \"Custody agreement\", \"FEN introduction\", \"Informed consent\", \"Inquiry\", \"Insurance\", \"Insurance card\", \"Intake session\", \"Medical clearance\", \"Medical records\", \"Patient chart\", \"Patient follow-up\", \"Phone screen\", \"Presenting problem\", \"Provider assignment\", \"Provider follow-up\", \"Qualifying call\", \"Referral\", \"Referral correspondance\", \"Release of information\", \"Treatment consent\", \"Treatment session\"];",
									"",
									"let recentDateTime = pm.variables.replaceIn('{{$randomDateRecent}}');",
									"let noteContent = \"{\\\"blocks\\\":[{\\\"key\\\":\\\"9vf7r\\\",\\\"text\\\":\\\"\" + pm.variables.replaceIn('{{$randomLoremSentences}}') + \"\\\",\\\"type\\\":\\\"unstyled\\\",\\\"depth\\\":0,\\\"inlineStyleRanges\\\":[],\\\"entityRanges\\\":[],\\\"data\\\":{}}],\\\"entityMap\\\":{}}\";",
									"",
									"//Save the variables to be used in next request for validation",
									"pm.environment.set(\"noteCommunicationMethod\", ld.sample(noteCommunicationMethod));",
									"pm.environment.set(\"noteStatus\", ld.sample(noteStatus));",
									"pm.environment.set(\"noteTitle\", \"From Postman \" + recentDateTime + \" Equip Health\");",
									"pm.environment.set(\"noteContent\", JSON.stringify(noteContent));",
									"pm.environment.set(\"activityWithName\", ld.sample(activityWithName));",
									"pm.environment.set(\"noteType\", ld.sample(noteType));",
									"pm.environment.set(\"isActive\", pm.variables.replaceIn('{{$randomBoolean}}'));",
									"pm.environment.set(\"isConfidential\", pm.variables.replaceIn('{{$randomBoolean}}'));"
								],
								"type": "text/javascript",
								"id": "38a79ba7-0319-418e-859f-3ed1f98601d4"
							}
						}
					],
					"id": "f7670384-f86a-4859-9335-68d5bb194840",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"authoredByProviderExternalId\": \"{{authoredByProviderExternalId}}\",\n    \"patientExternalId\": \"{{patientId}}\",\n    \"title\": \"{{noteTitle}}\",\n    \"noteStatus\": \"{{noteStatus}}\",\n    \"noteContent\": {{noteContent}},\n    \"activityWith\": [\n        {\n            \"activityWithName\": \"{{activityWithName}}\",\n            \"otherName\": \"Postman otherName\",\n            \"isActive\": {{isActive}}\n        }\n    ],\n    \"noteCommunicationMethod\": \"{{noteCommunicationMethod}}\",\n    \"isConfidential\": {{isConfidential}},\n    \"noteType\": \"FEN introduction\",\n    \"tags\": [\n        \"Test tag\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/clinical-data/notes",
							"host": [
								"{{host}}"
							],
							"path": [
								"clinical-data",
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patient list - notes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5d425f7e-01c7-4c98-bfae-1d88c4f0d7e9",
								"exec": [
									"let jsonData = pm.response.json();",
									"let ld = require('lodash');",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify response have only patient basic info\", function () {",
									"    let keys = Object.keys(jsonData.data[0]);",
									"    pm.expect(keys.length).to.equal(19);",
									"    pm.expect(keys).to.include(\"externalId\");",
									"    pm.expect(keys).to.include(\"firstName\");",
									"    pm.expect(keys).to.include(\"lastName\");",
									"    pm.expect(keys).to.include(\"chosenName\");",
									"    pm.expect(keys).to.include(\"dateOfBirth\");",
									"    pm.expect(keys).to.include(\"state\");",
									"    pm.expect(keys).to.include(\"payors\");",
									"    pm.expect(keys).to.include(\"episodeStatus\");",
									"    pm.expect(keys).to.include(\"admitDate\");",
									"    pm.expect(keys).to.include(\"medicalClearanceStatus\");",
									"    pm.expect(keys).to.include(\"insuranceStatus\");",
									"    pm.expect(keys).to.include(\"primaryDiagnosis\");",
									"    pm.expect(keys).to.include(\"careTeamMembers\");",
									"    pm.expect(keys).to.include(\"daysOfCare\");",
									"    pm.expect(keys).to.include(\"weeksAtEquip\");",
									"    pm.expect(keys).to.include(\"isPaused\");",
									"});",
									"",
									"let exp_response = {",
									"        \"data\": [",
									"            {",
									"                \"externalId\": \"\" + pm.environment.get(\"patientId\") + \"\",",
									"                \"firstName\": \"\" + pm.environment.get(\"patientFirstName\") + \"\",",
									"                \"chosenName\": \"\" + pm.environment.get(\"patientChosenName\") + \"\",",
									"                \"lastName\": \"\" + pm.environment.get(\"patientLastName\") + \"\",",
									"                \"dateOfBirth\": \"\" + pm.environment.get(\"patientDateOfBirth\") + \"\",",
									"                \"state\": \"\" + pm.environment.get(\"patientState\") + \"\",",
									"                \"payors\": ld.orderBy([",
									"                    pm.environment.get(\"filPatientPayor1\"),",
									"                    pm.environment.get(\"filPatientPayor2\"),",
									"                ], [], ['asc']),",
									"                \"episodeStatus\": \"\" + pm.environment.get(\"cdsEpisodeStatus\") + \"\",",
									"                \"admitDate\": \"\" + pm.environment.get(\"cdsEpisodeStartDate\") + \"\",",
									"                \"medicalClearanceStatus\": \"\" + pm.environment.get(\"medicalClearanceStatus\") + \"\",",
									"                \"insuranceStatus\": \"\" + pm.environment.get(\"insuranceVerificationStatus\") + \"\",",
									"                \"primaryDiagnosis\": \"Bulimia nervosa\",",
									"                \"careTeamMembers\": [",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"ppr_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"ppr_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Patient Service Representative\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"admissions_specialist_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"admissions_specialist_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Admissions Specialist\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"FEN_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"FEN_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Family Experience Navigator\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"Dietitian_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"Dietitian_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Dietitian\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"PeerMentor_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"PeerMentor_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Peer Mentor\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"Therapist_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"Therapist_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Therapist\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"FamilyMentor_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"FamilyMentor_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Family Mentor\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"Physician_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"Physician_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Physician\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"Psychiatrist_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"Psychiatrist_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Psychiatrist\",",
									"                    }",
									"                ],",
									"                \"notes\":[",
									"                    {",
									"                        \"noteType\": \"Consent forms\",",
									"                        \"noteActivityDate\": \"\"+(new Date()).toISOString().slice(0, 10)+\"\",",
									"                        \"noteContent\":  \"\"+(pm.environment.get(\"ConsentFormsNoteContent\"))+\"\" ,",
									"                        \"noteTitle\": \"\" + pm.environment.get(\"ConsentFormsNoteTitle\") + \"\"",
									"                    },",
									"                    {",
									"                        \"noteType\": \"FEN introduction\",",
									"                        \"noteActivityDate\": \"\"+(new Date()).toISOString().slice(0, 10)+\"\",",
									"                        \"noteContent\":  \"\"+(pm.environment.get(\"FENIntroductionNoteContent\"))+\"\" ,",
									"                        \"noteTitle\": \"\" + pm.environment.get(\"FENIntroductionNoteTitle\") + \"\"",
									"                    },",
									"                    {",
									"                        \"noteType\": \"Phone screen\",",
									"                        \"noteActivityDate\": \"\"+(new Date()).toISOString().slice(0, 10)+\"\",",
									"                        \"noteContent\":  \"\"+(pm.environment.get(\"PhoneScreenNoteContent\"))+\"\" ,",
									"                        \"noteTitle\": \"\" + pm.environment.get(\"PhoneScreenNoteTitle\") + \"\"",
									"                    },",
									"                    {",
									"                        \"noteType\": \"Presenting problem\",",
									"                        \"noteActivityDate\": \"\"+(new Date()).toISOString().slice(0, 10)+\"\",",
									"                        \"noteContent\":  \"\"+(pm.environment.get(\"PresentingProblemNoteContent\"))+\"\" ,",
									"                        \"noteTitle\": \"\" + pm.environment.get(\"PresentingProblemNoteTitle\") + \"\"",
									"                    },",
									"                    {",
									"                        \"noteType\": \"Qualifying call\",",
									"                        \"noteActivityDate\": \"\"+(new Date()).toISOString().slice(0, 10)+\"\",",
									"                        \"noteContent\":  \"\"+(pm.environment.get(\"QualifyingCallNoteContent\"))+\"\" ,",
									"                        \"noteTitle\": \"\" + pm.environment.get(\"QualifyingCallNoteTitle\") + \"\"",
									"                    }",
									"                ],",
									"                \"payorName\": \"\" + pm.environment.get(\"filPatientPayor2\") + \"\",",
									"                \"payorProgramName\": \"\" + pm.environment.get(\"payor_program2\") + \"\",",
									"                \"isPaused\": false,",
									"                \"daysOfCare\": 0,",
									"                \"weeksAtEquip\": 0",
									"            }",
									"        ]",
									"    }",
									"",
									"pm.test(\"Verify response data\", function () {",
									"",
									"    let response = [];",
									"",
									"    let result = {",
									"        data:[",
									"",
									"        ]",
									"    }",
									"",
									"    jsonData.data.map((res) => {",
									"        res.notes.map((note) => {",
									"            note['noteActivityDate'] = new Date(note.noteActivityDate).toISOString().slice(0, 10);",
									"            note['noteContent'] = JSON.stringify(note.noteContent);",
									"        })",
									"        jsonData.data.notes = [...res.notes];",
									"        response = jsonData.data;",
									"    })",
									"",
									"    result.data=response;",
									"",
									"    delete result.data[0].daysOfCare;",
									"    delete result.data[0].weeksAtEquip;",
									"    delete exp_response.data[0].daysOfCare;",
									"    delete exp_response.data[0].weeksAtEquip;",
									"",
									"    console.log(\"jsonData: \" + JSON.stringify(result));",
									"    console.log(\"exp_response: \" + JSON.stringify(exp_response));",
									"    pm.expect(result).to.eql(exp_response);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c7819a43-b5d1-4099-9ca0-c815ec7029c9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a7083e1b-a99d-441b-b60c-2518c95bca77",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/patients?filter-by=patient-name::{{patientFirstName}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"patients"
							],
							"query": [
								{
									"key": "filter-by",
									"value": "patient-name::{{patientFirstName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create assessment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"const submitted_source_list = ['Web', 'Phone', 'Email'];",
									"",
									"pm.environment.set(\"submittedSource\", submitted_source_list[Math.floor(Math.random() * submitted_source_list.length)]);",
									"pm.environment.set(\"userEmail\", \"balakrishna@equip.health\");",
									"pm.environment.set(\"userPhone\", \"+917842414959\");",
									"pm.environment.set(\"providerFirstname\", \"Bala\");",
									"pm.environment.set(\"providerLastname\", \"000analyst\");",
									"pm.environment.set(\"providerUserid\", \"f64a7075-a2bb-4c6c-8d2d-b8ac9a7f1ffc\");"
								],
								"type": "text/javascript",
								"id": "45cea4b5-0d58-4504-8492-40b109cff61d"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify responseExternalId is generated\", function () {",
									"    pm.expect(jsonData.responseExternalId).length.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.environment.set(\"assessment_responseExternalId\", jsonData.responseExternalId);"
								],
								"type": "text/javascript",
								"id": "3a6dfba7-307a-4e2a-9df1-4b4b77d912d7"
							}
						}
					],
					"id": "8c09d0e8-0f48-4516-b497-afe133bba9a7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"New\",\n  \"submittedSource\": \"{{submittedSource}}\",\n  \"submittedUserFirstName\": \"{{providerFirstname}}\",\n  \"submittedUserLastName\": \"{{providerLastname}}\",\n  \"submittedUserId\": \"{{createdByUserId}}\",\n  \"surveyName\": \"Intake\",\n  \"toUserEmail\": \"{{userEmail}}\",\n  \"toUserFirstName\": \"{{patientFirstName}}\",\n  \"toUserLastName\": \"{{patientLastName}}\",\n  \"toUserPhone\": \"{{userPhone}}\",\n  \"userId\": \"{{patientId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/assessments",
							"host": [
								"{{host}}"
							],
							"path": [
								"assessments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send survey invitation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"const submitted_source_list = ['Web', 'Phone', 'Email'];",
									"",
									"pm.environment.set(\"submittedSource\", submitted_source_list[Math.floor(Math.random() * submitted_source_list.length)]);",
									"pm.environment.set(\"userEmail\", \"balakrishna@equip.health\");",
									"pm.environment.set(\"userPhone\", \"+917842414959\");",
									"pm.environment.set(\"providerFirstname\", \"Bala\");",
									"pm.environment.set(\"providerLastname\", \"000analyst\");",
									"pm.environment.set(\"providerUserid\", \"f64a7075-a2bb-4c6c-8d2d-b8ac9a7f1ffc\");"
								],
								"type": "text/javascript",
								"id": "a3f5c55b-4b0f-456b-bda9-189a71d88290"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.text();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "c211d033-2e83-4b3f-a073-6c54ce966b97"
							}
						}
					],
					"id": "284c160d-15f6-4631-a5d1-3a8b121a9a5b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"Requested\",\n  \"submittedSource\": \"{{submittedSource}}\",\n  \"submittedUserFirstName\": \"{{providerFirstname}}\",\n  \"submittedUserLastName\": \"{{providerLastname}}\",\n  \"submittedUserId\": \"{{createdByUserId}}\",\n  \"toUserEmail\": \"{{userEmail}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/assessments/{{assessment_responseExternalId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"assessments",
								"{{assessment_responseExternalId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patient list - survey invitation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b92a8480-3a43-45f8-86c2-ca327c4ddf07",
								"exec": [
									"let jsonData = pm.response.json();",
									"let ld = require('lodash');",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify response have only patient basic info\", function () {",
									"    let keys = Object.keys(jsonData.data[0]);",
									"    pm.expect(keys.length).to.equal(20);",
									"    pm.expect(keys).to.include(\"externalId\");",
									"    pm.expect(keys).to.include(\"firstName\");",
									"    pm.expect(keys).to.include(\"lastName\");",
									"    pm.expect(keys).to.include(\"chosenName\");",
									"    pm.expect(keys).to.include(\"dateOfBirth\");",
									"    pm.expect(keys).to.include(\"state\");",
									"    pm.expect(keys).to.include(\"payors\");",
									"    pm.expect(keys).to.include(\"episodeStatus\");",
									"    pm.expect(keys).to.include(\"admitDate\");",
									"    pm.expect(keys).to.include(\"medicalClearanceStatus\");",
									"    pm.expect(keys).to.include(\"insuranceStatus\");",
									"    pm.expect(keys).to.include(\"primaryDiagnosis\");",
									"    pm.expect(keys).to.include(\"careTeamMembers\");",
									"    pm.expect(keys).to.include(\"notes\");",
									"    pm.expect(keys).to.include(\"surveyActivities\");",
									"    pm.expect(keys).to.include(\"primaryDiagnosis\");",
									"    pm.expect(keys).to.include(\"careTeamMembers\");",
									"    pm.expect(keys).to.include(\"isPaused\");",
									"    pm.expect(keys).to.include(\"daysOfCare\");",
									"    pm.expect(keys).to.include(\"weeksAtEquip\");",
									"});",
									"",
									"let exp_response = {",
									"        \"data\": [",
									"            {",
									"                \"externalId\": \"\" + pm.environment.get(\"patientId\") + \"\",",
									"                \"firstName\": \"\" + pm.environment.get(\"patientFirstName\") + \"\",",
									"                \"chosenName\": \"\" + pm.environment.get(\"patientChosenName\") + \"\",",
									"                \"lastName\": \"\" + pm.environment.get(\"patientLastName\") + \"\",",
									"                \"dateOfBirth\": \"\" + pm.environment.get(\"patientDateOfBirth\") + \"\",",
									"                \"state\": \"\" + pm.environment.get(\"patientState\") + \"\",",
									"                \"payors\": ld.orderBy([",
									"                    pm.environment.get(\"filPatientPayor1\"),",
									"                    pm.environment.get(\"filPatientPayor2\"),",
									"                ], [], ['asc']),",
									"                \"episodeStatus\": \"\" + pm.environment.get(\"cdsEpisodeStatus\") + \"\",",
									"                \"admitDate\": \"\" + pm.environment.get(\"cdsEpisodeStartDate\") + \"\",",
									"                \"medicalClearanceStatus\": \"\" + pm.environment.get(\"medicalClearanceStatus\") + \"\",",
									"                \"insuranceStatus\": \"\" + pm.environment.get(\"insuranceVerificationStatus\") + \"\",",
									"                \"primaryDiagnosis\": \"Bulimia nervosa\",",
									"                \"careTeamMembers\": [",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"ppr_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"ppr_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Patient Service Representative\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"admissions_specialist_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"admissions_specialist_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Admissions Specialist\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"FEN_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"FEN_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Family Experience Navigator\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"Dietitian_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"Dietitian_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Dietitian\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"PeerMentor_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"PeerMentor_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Peer Mentor\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"Therapist_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"Therapist_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Therapist\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"FamilyMentor_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"FamilyMentor_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Family Mentor\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"Physician_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"Physician_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Physician\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"Psychiatrist_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"Psychiatrist_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Psychiatrist\",",
									"                    }",
									"                ],",
									"                \"notes\":[",
									"                    {",
									"                        \"noteType\": \"Consent forms\",",
									"                        \"noteActivityDate\": \"\"+(new Date()).toISOString().slice(0, 10)+\"\",",
									"                        \"noteContent\":  \"\"+(pm.environment.get(\"ConsentFormsNoteContent\"))+\"\" ,",
									"                        \"noteTitle\": \"\" + pm.environment.get(\"ConsentFormsNoteTitle\") + \"\"",
									"                    },",
									"                    {",
									"                        \"noteType\": \"FEN introduction\",",
									"                        \"noteActivityDate\": \"\"+(new Date()).toISOString().slice(0, 10)+\"\",",
									"                        \"noteContent\":  \"\"+(pm.environment.get(\"FENIntroductionNoteContent\"))+\"\" ,",
									"                        \"noteTitle\": \"\" + pm.environment.get(\"FENIntroductionNoteTitle\") + \"\"",
									"                    },",
									"                    {",
									"                        \"noteType\": \"Phone screen\",",
									"                        \"noteActivityDate\": \"\"+(new Date()).toISOString().slice(0, 10)+\"\",",
									"                        \"noteContent\":  \"\"+(pm.environment.get(\"PhoneScreenNoteContent\"))+\"\" ,",
									"                        \"noteTitle\": \"\" + pm.environment.get(\"PhoneScreenNoteTitle\") + \"\"",
									"                    },",
									"                    {",
									"                        \"noteType\": \"Presenting problem\",",
									"                        \"noteActivityDate\": \"\"+(new Date()).toISOString().slice(0, 10)+\"\",",
									"                        \"noteContent\":  \"\"+(pm.environment.get(\"PresentingProblemNoteContent\"))+\"\" ,",
									"                        \"noteTitle\": \"\" + pm.environment.get(\"PresentingProblemNoteTitle\") + \"\"",
									"                    },",
									"                    {",
									"                        \"noteType\": \"Qualifying call\",",
									"                        \"noteActivityDate\": \"\"+(new Date()).toISOString().slice(0, 10)+\"\",",
									"                        \"noteContent\":  \"\"+(pm.environment.get(\"QualifyingCallNoteContent\"))+\"\" ,",
									"                        \"noteTitle\": \"\" + pm.environment.get(\"QualifyingCallNoteTitle\") + \"\"",
									"                    }",
									"                ],",
									"                \"surveyActivities\": [",
									"                    {",
									"                    \"surveyActivityDate\": \"\"+(new Date()).toISOString().slice(0, 10)+\"\",",
									"                    \"surveyActivityName\": \"survey invitation\",",
									"                    \"surveyName\": \"Intake\"",
									"                    }",
									"                ],",
									"                \"payorName\": \"\" + pm.environment.get(\"filPatientPayor2\") + \"\",",
									"                \"payorProgramName\": \"\" + pm.environment.get(\"payor_program2\") + \"\",",
									"                \"isPaused\": false,",
									"                \"daysOfCare\": 0,",
									"                \"weeksAtEquip\": 0",
									"            }",
									"        ]",
									"    }",
									"",
									"pm.test(\"Verify response data\", function () {",
									"",
									"    let response = [];",
									"",
									"    let result = {",
									"        data:[",
									"",
									"        ]",
									"    }",
									"",
									"    jsonData.data.map((res) => {",
									"",
									"        res.notes.map((note) => {",
									"            note['noteActivityDate'] = new Date(note.noteActivityDate).toISOString().slice(0, 10);",
									"            note['noteContent'] = JSON.stringify(note.noteContent);",
									"        })",
									"        jsonData.data.notes = [...res.notes];",
									"",
									"        res.surveyActivities.map((survey) => {",
									"            survey['surveyActivityDate'] = new Date(survey.surveyActivityDate).toISOString().slice(0, 10);",
									"        })",
									"        jsonData.data.surveyActivities = [...res.surveyActivities];",
									"",
									"        response = jsonData.data;",
									"    })",
									"",
									"    result.data=response;",
									"",
									"    delete result.data[0].daysOfCare;",
									"    delete result.data[0].weeksAtEquip;",
									"    delete exp_response.data[0].daysOfCare;",
									"    delete exp_response.data[0].weeksAtEquip;",
									"",
									"    console.log(\"jsonData: \" + JSON.stringify(result));",
									"    console.log(\"exp_response: \" + JSON.stringify(exp_response));",
									"    pm.expect(result).to.eql(exp_response);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1d22b54c-bdfc-43b2-92dd-f8f03873c604",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e23ca719-4770-4c2b-99f1-978da1f86f43",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/patients?filter-by=patient-name::{{patientFirstName}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"patients"
							],
							"query": [
								{
									"key": "filter-by",
									"value": "patient-name::{{patientFirstName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "send reminder email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"pm.environment.set(\"userEmail\", \"balakrishna@equip.health\");",
									"pm.environment.set(\"userPhone\", \"+917842414959\");"
								],
								"type": "text/javascript",
								"id": "bdd3ac15-b459-4229-863f-2f98f7c37b6c"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.text();",
									"",
									"console.log(\"jsonData: \" + jsonData);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify response message\", function () {",
									"    pm.expect(jsonData).to.equal(\"Successfully sent email!\");",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "a84e451d-f35c-4bd9-a364-9e650929c800"
							}
						}
					],
					"id": "a28365de-d907-4313-8751-00a48a07c52b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"responseExternalId\": \"{{assessment_responseExternalId}}\",\n  \"requestedByUserFirstName\": \"{{providerFirstname}}\",\n  \"requestedByUserLastName\": \"{{providerLastname}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/assessments/send-email",
							"host": [
								"{{host}}"
							],
							"path": [
								"assessments",
								"send-email"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patient list - survey reminder",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aaef5a46-60ad-4cb5-908f-6505b826099e",
								"exec": [
									"let jsonData = pm.response.json();",
									"let ld = require('lodash');",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify response have only patient basic info\", function () {",
									"    let keys = Object.keys(jsonData.data[0]);",
									"    pm.expect(keys.length).to.equal(20);",
									"    pm.expect(keys).to.include(\"externalId\");",
									"    pm.expect(keys).to.include(\"firstName\");",
									"    pm.expect(keys).to.include(\"lastName\");",
									"    pm.expect(keys).to.include(\"chosenName\");",
									"    pm.expect(keys).to.include(\"dateOfBirth\");",
									"    pm.expect(keys).to.include(\"state\");",
									"    pm.expect(keys).to.include(\"payors\");",
									"    pm.expect(keys).to.include(\"episodeStatus\");",
									"    pm.expect(keys).to.include(\"admitDate\");",
									"    pm.expect(keys).to.include(\"medicalClearanceStatus\");",
									"    pm.expect(keys).to.include(\"insuranceStatus\");",
									"    pm.expect(keys).to.include(\"primaryDiagnosis\");",
									"    pm.expect(keys).to.include(\"careTeamMembers\");",
									"    pm.expect(keys).to.include(\"notes\");",
									"    pm.expect(keys).to.include(\"surveyActivities\");",
									"    pm.expect(keys).to.include(\"primaryDiagnosis\");",
									"    pm.expect(keys).to.include(\"careTeamMembers\");",
									"    pm.expect(keys).to.include(\"isPaused\");",
									"    pm.expect(keys).to.include(\"daysOfCare\");",
									"    pm.expect(keys).to.include(\"weeksAtEquip\");",
									"});",
									"",
									"let exp_response = {",
									"        \"data\": [",
									"            {",
									"                \"externalId\": \"\" + pm.environment.get(\"patientId\") + \"\",",
									"                \"firstName\": \"\" + pm.environment.get(\"patientFirstName\") + \"\",",
									"                \"chosenName\": \"\" + pm.environment.get(\"patientChosenName\") + \"\",",
									"                \"lastName\": \"\" + pm.environment.get(\"patientLastName\") + \"\",",
									"                \"dateOfBirth\": \"\" + pm.environment.get(\"patientDateOfBirth\") + \"\",",
									"                \"state\": \"\" + pm.environment.get(\"patientState\") + \"\",",
									"                \"payors\": ld.orderBy([",
									"                    pm.environment.get(\"filPatientPayor1\"),",
									"                    pm.environment.get(\"filPatientPayor2\"),",
									"                ], [], ['asc']),",
									"                \"episodeStatus\": \"\" + pm.environment.get(\"cdsEpisodeStatus\") + \"\",",
									"                \"admitDate\": \"\" + pm.environment.get(\"cdsEpisodeStartDate\") + \"\",",
									"                \"medicalClearanceStatus\": \"\" + pm.environment.get(\"medicalClearanceStatus\") + \"\",",
									"                \"insuranceStatus\": \"\" + pm.environment.get(\"insuranceVerificationStatus\") + \"\",",
									"                \"primaryDiagnosis\": \"Bulimia nervosa\",",
									"                \"careTeamMembers\": [",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"ppr_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"ppr_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Patient Service Representative\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"admissions_specialist_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"admissions_specialist_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Admissions Specialist\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"FEN_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"FEN_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Family Experience Navigator\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"Dietitian_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"Dietitian_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Dietitian\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"PeerMentor_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"PeerMentor_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Peer Mentor\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"Therapist_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"Therapist_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Therapist\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"FamilyMentor_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"FamilyMentor_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Family Mentor\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"Physician_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"Physician_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Physician\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"Psychiatrist_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"Psychiatrist_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Psychiatrist\",",
									"                    }",
									"                ],",
									"                \"notes\":[",
									"                    {",
									"                        \"noteType\": \"Consent forms\",",
									"                        \"noteActivityDate\": \"\"+(new Date()).toISOString().slice(0, 10)+\"\",",
									"                        \"noteContent\":  \"\"+(pm.environment.get(\"ConsentFormsNoteContent\"))+\"\" ,",
									"                        \"noteTitle\": \"\" + pm.environment.get(\"ConsentFormsNoteTitle\") + \"\"",
									"                    },",
									"                    {",
									"                        \"noteType\": \"FEN introduction\",",
									"                        \"noteActivityDate\": \"\"+(new Date()).toISOString().slice(0, 10)+\"\",",
									"                        \"noteContent\":  \"\"+(pm.environment.get(\"FENIntroductionNoteContent\"))+\"\" ,",
									"                        \"noteTitle\": \"\" + pm.environment.get(\"FENIntroductionNoteTitle\") + \"\"",
									"                    },",
									"                    {",
									"                        \"noteType\": \"Phone screen\",",
									"                        \"noteActivityDate\": \"\"+(new Date()).toISOString().slice(0, 10)+\"\",",
									"                        \"noteContent\":  \"\"+(pm.environment.get(\"PhoneScreenNoteContent\"))+\"\" ,",
									"                        \"noteTitle\": \"\" + pm.environment.get(\"PhoneScreenNoteTitle\") + \"\"",
									"                    },",
									"                    {",
									"                        \"noteType\": \"Presenting problem\",",
									"                        \"noteActivityDate\": \"\"+(new Date()).toISOString().slice(0, 10)+\"\",",
									"                        \"noteContent\":  \"\"+(pm.environment.get(\"PresentingProblemNoteContent\"))+\"\" ,",
									"                        \"noteTitle\": \"\" + pm.environment.get(\"PresentingProblemNoteTitle\") + \"\"",
									"                    },",
									"                    {",
									"                        \"noteType\": \"Qualifying call\",",
									"                        \"noteActivityDate\": \"\"+(new Date()).toISOString().slice(0, 10)+\"\",",
									"                        \"noteContent\":  \"\"+(pm.environment.get(\"QualifyingCallNoteContent\"))+\"\" ,",
									"                        \"noteTitle\": \"\" + pm.environment.get(\"QualifyingCallNoteTitle\") + \"\"",
									"                    }",
									"                ],",
									"                \"surveyActivities\": [",
									"                    {",
									"                        \"surveyActivityDate\": \"\"+(new Date()).toISOString().slice(0, 10)+\"\",",
									"                        \"surveyActivityName\": \"survey invitation\",",
									"                        \"surveyName\": \"Intake\"",
									"                    },",
									"                    {",
									"                        \"surveyActivityDate\": \"\"+(new Date()).toISOString().slice(0, 10)+\"\",",
									"                        \"surveyActivityName\": \"survey reminder\",",
									"                        \"surveyName\": \"Intake\"",
									"                    }",
									"                ],",
									"                \"payorName\": \"\" + pm.environment.get(\"filPatientPayor2\") + \"\",",
									"                \"payorProgramName\": \"\" + pm.environment.get(\"payor_program2\") + \"\",",
									"                \"isPaused\": false,",
									"                \"daysOfCare\": 0,",
									"                \"weeksAtEquip\": 0",
									"            }",
									"        ]",
									"    }",
									"",
									"pm.test(\"Verify response data\", function () {",
									"",
									"    let response = [];",
									"",
									"    let result = {",
									"        data:[",
									"",
									"        ]",
									"    }",
									"",
									"    jsonData.data.map((res) => {",
									"",
									"        res.notes.map((note) => {",
									"            note['noteActivityDate'] = new Date(note.noteActivityDate).toISOString().slice(0, 10);",
									"            note['noteContent'] = JSON.stringify(note.noteContent);",
									"        })",
									"        jsonData.data.notes = [...res.notes];",
									"",
									"        res.surveyActivities.map((survey) => {",
									"            survey['surveyActivityDate'] = new Date(survey.surveyActivityDate).toISOString().slice(0, 10);",
									"        })",
									"        jsonData.data.surveyActivities = [...res.surveyActivities];",
									"",
									"        response = jsonData.data;",
									"    })",
									"",
									"    result.data=response;",
									"",
									"    delete result.data[0].daysOfCare;",
									"    delete result.data[0].weeksAtEquip;",
									"    delete exp_response.data[0].daysOfCare;",
									"    delete exp_response.data[0].weeksAtEquip;",
									"",
									"    console.log(\"jsonData: \" + JSON.stringify(result));",
									"    console.log(\"exp_response: \" + JSON.stringify(exp_response));",
									"    pm.expect(result).to.eql(exp_response);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0411f99e-fdba-4f53-984d-4f2f8edf6bdd",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4db04465-fc1f-447c-86e0-66581c18ecc0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/patients?filter-by=patient-name::{{patientFirstName}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"patients"
							],
							"query": [
								{
									"key": "filter-by",
									"value": "patient-name::{{patientFirstName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Survey complete",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"const submitted_source_list = ['Web', 'Phone', 'Email'];",
									"",
									"pm.environment.set(\"submittedSource\", submitted_source_list[Math.floor(Math.random() * submitted_source_list.length)]);",
									"pm.environment.set(\"userEmail\", \"balakrishna@equip.health\");",
									"pm.environment.set(\"userPhone\", \"+917842414959\");",
									"pm.environment.set(\"providerFirstname\", \"Bala\");",
									"pm.environment.set(\"providerLastname\", \"000analyst\");",
									"pm.environment.set(\"providerUserid\", \"f64a7075-a2bb-4c6c-8d2d-b8ac9a7f1ffc\");"
								],
								"type": "text/javascript",
								"id": "c883792b-06a3-4c5e-8617-e1db88bd352b"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.text();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "1014b51c-f4ff-4423-b7a9-55dde8f664ee"
							}
						}
					],
					"id": "7b46517a-c3fd-4aad-907a-c3d82de76cd4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"Done\",\n  \"submittedSource\": \"{{submittedSource}}\",\n  \"submittedUserFirstName\": \"{{providerFirstname}}\",\n  \"submittedUserLastName\": \"{{providerLastname}}\",\n  \"submittedUserId\": \"{{createdByUserId}}\",\n  \"toUserEmail\": \"{{userEmail}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/assessments/{{assessment_responseExternalId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"assessments",
								"{{assessment_responseExternalId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patient list - survey complete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "753c796d-5178-45e4-aad2-fba0cbb849c8",
								"exec": [
									"let jsonData = pm.response.json();",
									"let ld = require('lodash');",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Verify response have only patient basic info\", function () {",
									"    let keys = Object.keys(jsonData.data[0]);",
									"    pm.expect(keys.length).to.equal(20);",
									"    pm.expect(keys).to.include(\"externalId\");",
									"    pm.expect(keys).to.include(\"firstName\");",
									"    pm.expect(keys).to.include(\"lastName\");",
									"    pm.expect(keys).to.include(\"chosenName\");",
									"    pm.expect(keys).to.include(\"dateOfBirth\");",
									"    pm.expect(keys).to.include(\"state\");",
									"    pm.expect(keys).to.include(\"payors\");",
									"    pm.expect(keys).to.include(\"episodeStatus\");",
									"    pm.expect(keys).to.include(\"admitDate\");",
									"    pm.expect(keys).to.include(\"medicalClearanceStatus\");",
									"    pm.expect(keys).to.include(\"insuranceStatus\");",
									"    pm.expect(keys).to.include(\"primaryDiagnosis\");",
									"    pm.expect(keys).to.include(\"careTeamMembers\");",
									"    pm.expect(keys).to.include(\"notes\");",
									"    pm.expect(keys).to.include(\"surveyActivities\");",
									"    pm.expect(keys).to.include(\"primaryDiagnosis\");",
									"    pm.expect(keys).to.include(\"careTeamMembers\");",
									"    pm.expect(keys).to.include(\"isPaused\");",
									"    pm.expect(keys).to.include(\"daysOfCare\");",
									"    pm.expect(keys).to.include(\"weeksAtEquip\");",
									"});",
									"",
									"let exp_response = {",
									"        \"data\": [",
									"            {",
									"                \"externalId\": \"\" + pm.environment.get(\"patientId\") + \"\",",
									"                \"firstName\": \"\" + pm.environment.get(\"patientFirstName\") + \"\",",
									"                \"chosenName\": \"\" + pm.environment.get(\"patientChosenName\") + \"\",",
									"                \"lastName\": \"\" + pm.environment.get(\"patientLastName\") + \"\",",
									"                \"dateOfBirth\": \"\" + pm.environment.get(\"patientDateOfBirth\") + \"\",",
									"                \"state\": \"\" + pm.environment.get(\"patientState\") + \"\",",
									"                \"payors\": ld.orderBy([",
									"                    pm.environment.get(\"filPatientPayor1\"),",
									"                    pm.environment.get(\"filPatientPayor2\"),",
									"                ], [], ['asc']),",
									"                \"episodeStatus\": \"\" + pm.environment.get(\"cdsEpisodeStatus\") + \"\",",
									"                \"admitDate\": \"\" + pm.environment.get(\"cdsEpisodeStartDate\") + \"\",",
									"                \"medicalClearanceStatus\": \"\" + pm.environment.get(\"medicalClearanceStatus\") + \"\",",
									"                \"insuranceStatus\": \"\" + pm.environment.get(\"insuranceVerificationStatus\") + \"\",",
									"                \"primaryDiagnosis\": \"Bulimia nervosa\",",
									"                \"careTeamMembers\": [",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"ppr_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"ppr_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Patient Service Representative\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"admissions_specialist_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"admissions_specialist_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Admissions Specialist\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"FEN_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"FEN_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Family Experience Navigator\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"Dietitian_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"Dietitian_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Dietitian\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"PeerMentor_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"PeerMentor_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Peer Mentor\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"Therapist_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"Therapist_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Therapist\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"FamilyMentor_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"FamilyMentor_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Family Mentor\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"Physician_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"Physician_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Physician\",",
									"                    },",
									"                    {",
									"                        \"providerFirstName\": \"\" + pm.environment.get(\"Psychiatrist_firstname\") + \"\",",
									"                        \"providerLastName\": \"\" + pm.environment.get(\"Psychiatrist_lastname\") + \"\",",
									"                        \"providerTypeName\": \"Psychiatrist\",",
									"                    }",
									"                ],",
									"                \"notes\":[",
									"                    {",
									"                        \"noteType\": \"Consent forms\",",
									"                        \"noteActivityDate\": \"\"+(new Date()).toISOString().slice(0, 10)+\"\",",
									"                        \"noteContent\":  \"\"+(pm.environment.get(\"ConsentFormsNoteContent\"))+\"\" ,",
									"                        \"noteTitle\": \"\" + pm.environment.get(\"ConsentFormsNoteTitle\") + \"\"",
									"                    },",
									"                    {",
									"                        \"noteType\": \"FEN introduction\",",
									"                        \"noteActivityDate\": \"\"+(new Date()).toISOString().slice(0, 10)+\"\",",
									"                        \"noteContent\":  \"\"+(pm.environment.get(\"FENIntroductionNoteContent\"))+\"\" ,",
									"                        \"noteTitle\": \"\" + pm.environment.get(\"FENIntroductionNoteTitle\") + \"\"",
									"                    },",
									"                    {",
									"                        \"noteType\": \"Phone screen\",",
									"                        \"noteActivityDate\": \"\"+(new Date()).toISOString().slice(0, 10)+\"\",",
									"                        \"noteContent\":  \"\"+(pm.environment.get(\"PhoneScreenNoteContent\"))+\"\" ,",
									"                        \"noteTitle\": \"\" + pm.environment.get(\"PhoneScreenNoteTitle\") + \"\"",
									"                    },",
									"                    {",
									"                        \"noteType\": \"Presenting problem\",",
									"                        \"noteActivityDate\": \"\"+(new Date()).toISOString().slice(0, 10)+\"\",",
									"                        \"noteContent\":  \"\"+(pm.environment.get(\"PresentingProblemNoteContent\"))+\"\" ,",
									"                        \"noteTitle\": \"\" + pm.environment.get(\"PresentingProblemNoteTitle\") + \"\"",
									"                    },",
									"                    {",
									"                        \"noteType\": \"Qualifying call\",",
									"                        \"noteActivityDate\": \"\"+(new Date()).toISOString().slice(0, 10)+\"\",",
									"                        \"noteContent\":  \"\"+(pm.environment.get(\"QualifyingCallNoteContent\"))+\"\" ,",
									"                        \"noteTitle\": \"\" + pm.environment.get(\"QualifyingCallNoteTitle\") + \"\"",
									"                    }",
									"                ],",
									"                \"surveyActivities\": [",
									"                    {",
									"                        \"surveyActivityDate\": \"\"+(new Date()).toISOString().slice(0, 10)+\"\",",
									"                        \"surveyActivityName\": \"survey complete\",",
									"                        \"surveyName\": \"Intake\"",
									"                    },",
									"                    {",
									"                        \"surveyActivityDate\": \"\"+(new Date()).toISOString().slice(0, 10)+\"\",",
									"                        \"surveyActivityName\": \"survey invitation\",",
									"                        \"surveyName\": \"Intake\"",
									"                    },",
									"                    {",
									"                        \"surveyActivityDate\": \"\"+(new Date()).toISOString().slice(0, 10)+\"\",",
									"                        \"surveyActivityName\": \"survey reminder\",",
									"                        \"surveyName\": \"Intake\"",
									"                    }",
									"                ],",
									"                \"payorName\": \"\" + pm.environment.get(\"filPatientPayor2\") + \"\",",
									"                \"payorProgramName\": \"\" + pm.environment.get(\"payor_program2\") + \"\",",
									"                \"isPaused\": false,",
									"                \"daysOfCare\": 0,",
									"                \"weeksAtEquip\": 0",
									"            }",
									"        ]",
									"    }",
									"",
									"pm.test(\"Verify response data\", function () {",
									"",
									"    let response = [];",
									"",
									"    let result = {",
									"        data:[",
									"",
									"        ]",
									"    }",
									"",
									"    jsonData.data.map((res) => {",
									"",
									"        res.notes.map((note) => {",
									"            note['noteActivityDate'] = new Date(note.noteActivityDate).toISOString().slice(0, 10);",
									"            note['noteContent'] = JSON.stringify(note.noteContent);",
									"        })",
									"        jsonData.data.notes = [...res.notes];",
									"",
									"        res.surveyActivities.map((survey) => {",
									"            survey['surveyActivityDate'] = new Date(survey.surveyActivityDate).toISOString().slice(0, 10);",
									"        })",
									"        jsonData.data.surveyActivities = [...res.surveyActivities];",
									"",
									"        response = jsonData.data;",
									"    })",
									"",
									"    result.data=response;",
									"",
									"    delete result.data[0].daysOfCare;",
									"    delete result.data[0].weeksAtEquip;",
									"    delete exp_response.data[0].daysOfCare;",
									"    delete exp_response.data[0].weeksAtEquip;",
									"",
									"    console.log(\"jsonData: \" + JSON.stringify(result));",
									"    console.log(\"exp_response: \" + JSON.stringify(exp_response));",
									"    pm.expect(result).to.eql(exp_response);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "01630063-2837-4169-b402-c1ea40dcd289",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "add63d6f-881a-4229-959c-994e3012a216",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/patients?filter-by=patient-name::{{patientFirstName}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"patients"
							],
							"query": [
								{
									"key": "filter-by",
									"value": "patient-name::{{patientFirstName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Patient list - verify duplicate records",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "284057f4-1234-45a0-83be-29cb0d135a5c",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"console.log(\"total count before removing duplicates: \"+jsonData.data.length);",
									"",
									"function uniqueByKey(array, key) {",
									"  return [...new Map(array.map((x) => [x[key], x])).values()];",
									"}",
									"console.log(JSON.stringify(uniqueByKey(jsonData.data, 'externalId')));",
									"console.log(\"total count after removing duplicates: \"+ uniqueByKey(jsonData.data, 'externalId').length);",
									"",
									"pm.test(\"Verify duplicate records are not present\", function () {",
									"    pm.expect(jsonData.data.length).to.be.equal(uniqueByKey(jsonData.data, 'externalId').length);",
									"});",
									"",
									"/*if(jsonData.data.length === uniqueByKey(jsonData.data, 'externalId').length){",
									"    console.log(\"No duplicate records are present\");",
									"}else{",
									"    pm.expect.fail(\"Duplicate records are present\");",
									"}*/",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3ce76f23-adcb-4301-8c01-a84db384078a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "86054554-7391-4620-9d99-5e2f2c7143d7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/patients?page-size=400&page-number=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"patients"
							],
							"query": [
								{
									"key": "page-size",
									"value": "400"
								},
								{
									"key": "page-number",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "aeabce4e-4136-4069-83a4-885dd2fd921b"
		},
		{
			"name": "Patient Filters",
			"item": [
				{
					"name": "Filter by page size-100",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73fcdbf8-94b6-452a-92b9-ee0ef2098f96",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"// const filNoteTypes = pm.environment.get(\"filNoteTypes\");",
									"",
									"// if (filNoteTypes && filNoteTypes.length > 0) {",
									"//     postman.setNextRequest(request.name);",
									"// }",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"// if (jsonData.totalCount > 0) {",
									"//     pm.test(\"Verify patients filter by name\", () => {",
									"//         for (let i = 0; i < jsonData['data'].length; i++) {",
									"//             // tests[\"Patient# \" + (i + 1) + \" has name as \" + jsonData['data'][i].firstName + \" \" + jsonData['data'][i].lastName] = ",
									"//             pm.expect(jsonData['data'][i].firstName.toLowerCase() | jsonData['data'][i].lastName.toLowerCase() | jsonData['data'][i].chosenName.toLowerCase()).to.include(\"a\");",
									"//         }",
									"//     });",
									"// } else {",
									"//     pm.test(\"No data with filter \" + pm.environment.get(\"filPatientState\") + \" is found\", () => {",
									"//     });",
									"",
									"// }",
									"pm.test(\"Verify no duplicate patients returned\", function () {",
									"    var externalIds = [];",
									"    for (let i = 0; i < jsonData['data'].length; i++) {",
									"        externalIds.push(jsonData.data[i]['externalId']);",
									"    }",
									"    //Store all the externalIds in a Set to check if there is any duplicate value",
									"    var externalIdsSet = new Set(externalIds);",
									"    pm.expect(externalIdsSet.size).to.eql(externalIds.length);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b47d1d3a-9bd1-4415-9464-0f2a120ff850",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/patients?page-number=1&page-size=100",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"patients"
							],
							"query": [
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "page-size",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter by name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ce9607b3-7460-4eb3-acf6-ec1547578993",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"// const filNoteTypes = pm.environment.get(\"filNoteTypes\");",
									"",
									"// if (filNoteTypes && filNoteTypes.length > 0) {",
									"//     postman.setNextRequest(request.name);",
									"// }",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"if (jsonData.totalCount > 0) {",
									"    pm.test(\"Verify patients filter by name\", () => {",
									"        for (let i = 0; i < jsonData['data'].length; i++) {",
									"            let names = [];",
									"            names.push(jsonData.data[i]['firstName']);",
									"            names.push(jsonData.data[i]['chosenName']);",
									"            names.push(jsonData.data[i]['lastName']);",
									"            // console.log(names);",
									"",
									"            tests[\"Patient# \" + (i + 1) + \" has name as \" + jsonData['data'][i].firstName + \" \" + jsonData['data'][i].chosenName + \" \" + jsonData['data'][i].lastName] = pm.expect(JSON.stringify(names).toLowerCase()).to.include('a');",
									"        }",
									"    });",
									"} else {",
									"    pm.test(\"No data with filter Mayank is found\", () => {",
									"    });",
									"}",
									"",
									"pm.test(\"Verify no duplicate patients returned\", function () {",
									"    var externalIds = [];",
									"    for (let i = 0; i < jsonData['data'].length; i++) {",
									"        externalIds.push(jsonData.data[i]['externalId']);",
									"    }",
									"    //Store all the externalIds in a Set to check if there is any duplicate value",
									"    var externalIdsSet = new Set(externalIds);",
									"    pm.expect(externalIdsSet.size).to.eql(externalIds.length);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "308249c1-00f0-46bc-acc3-caaa2202c966",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/patients?page-number=1&page-size=100&filter-by=patient-name::a",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"patients"
							],
							"query": [
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "page-size",
									"value": "100"
								},
								{
									"key": "filter-by",
									"value": "patient-name::a"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter by admit date",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "92c46a1f-9ee2-474c-a7d2-04d7bb78c1d6",
								"exec": [
									"let jsonData = pm.response.json();",
									"let moment = require(\"moment\")",
									"",
									"",
									"// const filNoteTypes = pm.environment.get(\"filNoteTypes\");",
									"",
									"// if (filNoteTypes && filNoteTypes.length > 0) {",
									"//     postman.setNextRequest(request.name);",
									"// }",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"if (jsonData.totalCount > 0) {",
									"    pm.test(\"Verify patients filter by admit date\", () => {",
									"        for (let i = 0; i < jsonData['data'].length; i++) {",
									"            tests[\"Patient# \" + (i + 1) + \" has admit date as \" + jsonData['data'][i].admitDate] =",
									"                moment(jsonData['data'][i].admitDate).isBetween(pm.environment.get(\"filPatientAdmitStartDate\"), pm.environment.get(\"filPatientAdmitEndDate\"), undefined, []);",
									"        }",
									"    });",
									"} else {",
									"    pm.test(\"No data with filter \" + pm.environment.get(\"filPatientName\") + \" is found\", () => {",
									"    });",
									"}",
									"",
									"pm.test(\"Verify no duplicate patients returned\", function () {",
									"    var externalIds = [];",
									"    for (let i = 0; i < jsonData['data'].length; i++) {",
									"        externalIds.push(jsonData.data[i]['externalId']);",
									"    }",
									"    //Store all the externalIds in a Set to check if there is any duplicate value",
									"    var externalIdsSet = new Set(externalIds);",
									"    pm.expect(externalIdsSet.size).to.eql(externalIds.length);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d45698da-09a1-41bf-9c57-7dc8befee0a3",
								"exec": [
									"pm.environment.set(\"filPatientAdmitStartDate\", \"2022-01-01\");",
									"pm.environment.set(\"filPatientAdmitEndDate\", \"2025-12-31\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "326d874e-0b41-4016-b123-3c48167eec55",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/patients?page-number=1&page-size=100&filter-by=patient-admit-start-date::{{filPatientAdmitStartDate}}%26patient-admit-end-date::{{filPatientAdmitEndDate}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"patients"
							],
							"query": [
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "page-size",
									"value": "100"
								},
								{
									"key": "filter-by",
									"value": "patient-admit-start-date::{{filPatientAdmitStartDate}}%26patient-admit-end-date::{{filPatientAdmitEndDate}}"
								},
								{
									"key": "filter-by",
									"value": "patient-admit-start-date::2022-07-13%26patient-admit-end-date::2022-07-13",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter by care team member",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a6e5eb28-1a3f-4499-83ca-b82825f93dd5",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"if (jsonData.totalCount > 0) {",
									"    pm.test(\"Verify patients filter by care team member\", () => {",
									"        for (let i = 0; i < jsonData['data'].length; i++) {",
									"            let careTeamMembers = [];",
									"            for (let j = 0; j < jsonData.data[i]['careTeamMembers'].length; j++) {",
									"                careTeamMembers.push(jsonData.data[i]['careTeamMembers'][j]['providerFirstName']);",
									"            }",
									"            // console.log(careTeamMembers);",
									"            pm.expect(careTeamMembers).to.include(\"Mayank\");",
									"",
									"        }",
									"    });",
									"} else {",
									"    pm.test(\"No data with filter Mayank is found\", () => {",
									"    });",
									"}",
									"",
									"pm.test(\"Verify no duplicate patients returned\", function () {",
									"    var externalIds = [];",
									"    for (let i = 0; i < jsonData['data'].length; i++) {",
									"        externalIds.push(jsonData.data[i]['externalId']);",
									"    }",
									"    //Store all the externalIds in a Set to check if there is any duplicate value",
									"    var externalIdsSet = new Set(externalIds);",
									"    pm.expect(externalIdsSet.size).to.eql(externalIds.length);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e0b538c1-01e0-4d06-bf83-4b4349cd633a",
								"exec": [
									"if (pm.environment.name === \"qa\") {",
									"    pm.environment.set(\"careTeamMemberId\", \"73f92e85-9596-46e0-aa18-2708cc8d7fc2\"); //Id is for Mayank Verma",
									"} else if (pm.environment.name === \"dev\") {",
									"    pm.environment.set(\"careTeamMemberId\", \"5832a752-4b0a-4a00-ae1e-935245cc642b\"); //Id is for Mayank Verma",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "17a39089-7564-4350-8657-88ea52ccffe6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/patients?page-size=100&page-number=1&filter-by=care-team-member::{{careTeamMemberId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"patients"
							],
							"query": [
								{
									"key": "page-size",
									"value": "100"
								},
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "filter-by",
									"value": "care-team-member::{{careTeamMemberId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter by admin episode status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "508c87d2-c616-4d27-81e4-1833936d707d",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"const filPatientAdminEpisodeStatuses = pm.environment.get(\"filPatientAdminEpisodeStatuses\");",
									"",
									"if (filPatientAdminEpisodeStatuses && filPatientAdminEpisodeStatuses.length > 0) {",
									"    postman.setNextRequest(request.name);",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"if (jsonData.totalCount > 0) {",
									"    pm.test(\"Verify patients filter by admin episode status\", () => {",
									"        for (let i = 0; i < jsonData['data'].length; i++) {",
									"            tests[\"Patient# \" + (i + 1) + \" has admin episode status as \" + jsonData['data'][i].episodeStatus] = pm.expect(jsonData['data'][i].episodeStatus.toLowerCase()).to.eql(pm.environment.get(\"filPatientAdminEpisodeStatus\").toLowerCase());",
									"        }",
									"    });",
									"}",
									"else {",
									"    pm.test(\"No data with filter \" + pm.environment.get(\"filPatientAdminEpisodeStatus\") + \" is found\", () => {",
									"    });",
									"}",
									"",
									"pm.test(\"Verify no duplicate patients returned\", function () {",
									"    var externalIds = [];",
									"    for (let i = 0; i < jsonData['data'].length; i++) {",
									"        externalIds.push(jsonData.data[i]['externalId']);",
									"    }",
									"    //Store all the externalIds in a Set to check if there is any duplicate value",
									"    var externalIdsSet = new Set(externalIds);",
									"    pm.expect(externalIdsSet.size).to.eql(externalIds.length);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "570d64e7-aab2-4d6a-badf-7a93429ee1be",
								"exec": [
									"let filPatientAdminEpisodeStatuses = pm.environment.get(\"filPatientAdminEpisodeStatuses\");",
									"",
									"if (!filPatientAdminEpisodeStatuses || filPatientAdminEpisodeStatuses.length == 0) {",
									"    filPatientAdminEpisodeStatuses = [\"New\", \"Assessing\", \"Enrolled\", \"In-treatment\", \"Paused\", \"Closed\"];",
									"}",
									"",
									"let currentFilPatientAdminEpisodeStatus = filPatientAdminEpisodeStatuses.shift();",
									"console.log(currentFilPatientAdminEpisodeStatus)",
									"pm.environment.set(\"filPatientAdminEpisodeStatus\", currentFilPatientAdminEpisodeStatus);",
									"pm.environment.set(\"filPatientAdminEpisodeStatuses\", filPatientAdminEpisodeStatuses);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b6bae650-c86f-453e-9f2b-44fdceb20b17",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/patients?page-number=1&page-size=100&filter-by=patient-episode-status::{{filPatientAdminEpisodeStatus}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"patients"
							],
							"query": [
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "page-size",
									"value": "100"
								},
								{
									"key": "filter-by",
									"value": "patient-episode-status::{{filPatientAdminEpisodeStatus}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter by admin episode isPaused - true",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "972e73dd-b507-4572-82fe-7ac39ac358a7",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"// const filPatientAdminEpisodeStatuses = pm.environment.get(\"filPatientAdminEpisodeStatuses\");",
									"",
									"// if (filPatientAdminEpisodeStatuses && filPatientAdminEpisodeStatuses.length > 0) {",
									"//     postman.setNextRequest(request.name);",
									"// }",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"if (jsonData.totalCount > 0) {",
									"    pm.test(\"Verify patients filter by admin episode is paused\", () => {",
									"        for (let i = 0; i < jsonData['data'].length; i++) {",
									"            tests[\"Patient# \" + (i + 1) + \" is paused, \" + jsonData['data'][i].isPaused] = pm.expect(jsonData['data'][i].isPaused).to.eql(true);",
									"        }",
									"    });",
									"}",
									"else {",
									"    pm.test(\"No data with filter \" + pm.environment.get(\"filPatientAdminEpisodeStatus\") + \" is found\", () => {",
									"    });",
									"}",
									"",
									"pm.test(\"Verify no duplicate patients returned\", function () {",
									"    var externalIds = [];",
									"    for (let i = 0; i < jsonData['data'].length; i++) {",
									"        externalIds.push(jsonData.data[i]['externalId']);",
									"    }",
									"    //Store all the externalIds in a Set to check if there is any duplicate value",
									"    var externalIdsSet = new Set(externalIds);",
									"    pm.expect(externalIdsSet.size).to.eql(externalIds.length);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b00c5efb-d4b3-4eee-8c22-ad240f006d60",
								"exec": [
									"// let filPatientAdminEpisodeStatuses = pm.environment.get(\"filPatientAdminEpisodeStatuses\");",
									"",
									"// if (!filPatientAdminEpisodeStatuses || filPatientAdminEpisodeStatuses.length == 0) {",
									"//     filPatientAdminEpisodeStatuses = [true, false, \"Assessing\", \"Enrolled\", \"In-treatment\", \"Paused\", \"Closed\"];",
									"// }",
									"",
									"// let currentFilPatientAdminEpisodeStatus = filPatientAdminEpisodeStatuses.shift();",
									"// console.log(currentFilPatientAdminEpisodeStatus)",
									"// pm.environment.set(\"filPatientAdminEpisodeStatus\", currentFilPatientAdminEpisodeStatus);",
									"// pm.environment.set(\"filPatientAdminEpisodeStatuses\", filPatientAdminEpisodeStatuses);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "fb3314ff-4016-4480-aaaa-6c57390b85b1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/patients?page-number=1&page-size=100&filter-by=is-paused::true",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"patients"
							],
							"query": [
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "page-size",
									"value": "100"
								},
								{
									"key": "filter-by",
									"value": "is-paused::true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter by admin episode isPaused - false",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2420b266-ccc9-4b57-b7ca-98cbb77c779c",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"// const filPatientAdminEpisodeStatuses = pm.environment.get(\"filPatientAdminEpisodeStatuses\");",
									"",
									"// if (filPatientAdminEpisodeStatuses && filPatientAdminEpisodeStatuses.length > 0) {",
									"//     postman.setNextRequest(request.name);",
									"// }",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"if (jsonData.totalCount > 0) {",
									"    pm.test(\"Verify patients filter by admin episode is paused\", () => {",
									"        for (let i = 0; i < jsonData['data'].length; i++) {",
									"            tests[\"Patient# \" + (i + 1) + \" is not paused, \" + jsonData['data'][i].isPaused] = pm.expect(jsonData['data'][i].isPaused).to.eql(false);",
									"        }",
									"    });",
									"}",
									"else {",
									"    pm.test(\"No data with filter \" + pm.environment.get(\"filPatientAdminEpisodeStatus\") + \" is found\", () => {",
									"    });",
									"}",
									"",
									"pm.test(\"Verify no duplicate patients returned\", function () {",
									"    var externalIds = [];",
									"    for (let i = 0; i < jsonData['data'].length; i++) {",
									"        externalIds.push(jsonData.data[i]['externalId']);",
									"    }",
									"    //Store all the externalIds in a Set to check if there is any duplicate value",
									"    var externalIdsSet = new Set(externalIds);",
									"    pm.expect(externalIdsSet.size).to.eql(externalIds.length);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c6adc81d-c49f-4bcf-8e15-3da0e98e5509",
								"exec": [
									"// let filPatientAdminEpisodeStatuses = pm.environment.get(\"filPatientAdminEpisodeStatuses\");",
									"",
									"// if (!filPatientAdminEpisodeStatuses || filPatientAdminEpisodeStatuses.length == 0) {",
									"//     filPatientAdminEpisodeStatuses = [true, false, \"Assessing\", \"Enrolled\", \"In-treatment\", \"Paused\", \"Closed\"];",
									"// }",
									"",
									"// let currentFilPatientAdminEpisodeStatus = filPatientAdminEpisodeStatuses.shift();",
									"// console.log(currentFilPatientAdminEpisodeStatus)",
									"// pm.environment.set(\"filPatientAdminEpisodeStatus\", currentFilPatientAdminEpisodeStatus);",
									"// pm.environment.set(\"filPatientAdminEpisodeStatuses\", filPatientAdminEpisodeStatuses);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3ecf7786-eb1c-4c76-a0c4-f00a18fad03a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/patients?page-number=1&page-size=100&filter-by=is-paused::false",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"patients"
							],
							"query": [
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "page-size",
									"value": "100"
								},
								{
									"key": "filter-by",
									"value": "is-paused::false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter by admin episode status as none",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2646344d-4e1b-4bb1-b4e6-3ec106ddb080",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"// const filPatientAdminEpisodeStatuses = pm.environment.get(\"filPatientAdminEpisodeStatuses\");",
									"",
									"// if (filPatientAdminEpisodeStatuses && filPatientAdminEpisodeStatuses.length > 0) {",
									"//     postman.setNextRequest(request.name);",
									"// }",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"if (jsonData.totalCount > 0) {",
									"    pm.test(\"Verify patients filter by admin episode status as none\", () => {",
									"        for (let i = 0; i < jsonData['data'].length; i++) {",
									"            tests[\"Patient# \" + (i + 1) + \" has no admin episode \"] = pm.expect(jsonData['data'][i]).to.not.have.property('episodeStatus');",
									"        }",
									"    });",
									"}",
									"else {",
									"    pm.test(\"No data with filter \" + pm.environment.get(\"filPatientAdminEpisodeStatus\") + \" is found\", () => {",
									"    });",
									"}",
									"",
									"pm.test(\"Verify no duplicate patients returned\", function () {",
									"    var externalIds = [];",
									"    for (let i = 0; i < jsonData['data'].length; i++) {",
									"        externalIds.push(jsonData.data[i]['externalId']);",
									"    }",
									"    //Store all the externalIds in a Set to check if there is any duplicate value",
									"    var externalIdsSet = new Set(externalIds);",
									"    pm.expect(externalIdsSet.size).to.eql(externalIds.length);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cdf4b8a9-112e-4974-b3a0-b56a34937961",
								"exec": [
									"// let filPatientAdminEpisodeStatuses = pm.environment.get(\"filPatientAdminEpisodeStatuses\");",
									"",
									"// if (!filPatientAdminEpisodeStatuses || filPatientAdminEpisodeStatuses.length == 0) {",
									"//     filPatientAdminEpisodeStatuses = [\"New\", \"Assessing\", \"Enrolled\", \"In-treatment\", \"Paused\", \"Closed\", \"none\"];",
									"// }",
									"",
									"// let currentFilPatientAdminEpisodeStatus = filPatientAdminEpisodeStatuses.shift();",
									"// console.log(currentFilPatientAdminEpisodeStatus)",
									"// pm.environment.set(\"filPatientAdminEpisodeStatus\", currentFilPatientAdminEpisodeStatus);",
									"// pm.environment.set(\"filPatientAdminEpisodeStatuses\", filPatientAdminEpisodeStatuses);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1c559aff-abef-417b-bb9d-f076a6323d96",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/patients?page-number=1&page-size=100&filter-by=patient-episode-status::none",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"patients"
							],
							"query": [
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "page-size",
									"value": "100"
								},
								{
									"key": "filter-by",
									"value": "patient-episode-status::none"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter by primary diagnosis",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e2f8fd79-5660-4c26-a31a-2771cd76a6ba",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"const filPatientPrimaryDiagnoses = pm.environment.get(\"filPatientPrimaryDiagnoses\");",
									"",
									"if (filPatientPrimaryDiagnoses && filPatientPrimaryDiagnoses.length > 0) {",
									"    postman.setNextRequest(request.name);",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"if (jsonData.totalCount > 0) {",
									"    pm.test(\"Verify patients filter by primary diagnosis\", () => {",
									"        for (let i = 0; i < jsonData['data'].length; i++) {",
									"            tests[\"Patient# \" + (i + 1) + \" has primary diagnosis as \" + jsonData['data'][i].primaryDiagnosis] = pm.expect(jsonData['data'][i].primaryDiagnosis.toLowerCase()).to.eql(pm.environment.get(\"filPatientPrimaryDiagnosisName\").toLowerCase());",
									"        }",
									"    });",
									"} else {",
									"    pm.test(\"No data with filter \" + pm.environment.get(\"filPatientPrimaryDiagnosisName\") + \" is found\", () => {",
									"    });",
									"}",
									"",
									"pm.test(\"Verify no duplicate patients returned\", function () {",
									"    var externalIds = [];",
									"    for (let i = 0; i < jsonData['data'].length; i++) {",
									"        externalIds.push(jsonData.data[i]['externalId']);",
									"    }",
									"    //Store all the externalIds in a Set to check if there is any duplicate value",
									"    var externalIdsSet = new Set(externalIds);",
									"    pm.expect(externalIdsSet.size).to.eql(externalIds.length);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "65ed577d-4beb-405f-9d6c-5635145d8aac",
								"exec": [
									"let filPatientPrimaryDiagnoses = pm.environment.get(\"filPatientPrimaryDiagnoses\");",
									"",
									"if (!filPatientPrimaryDiagnoses || filPatientPrimaryDiagnoses.length == 0) {",
									"    filPatientPrimaryDiagnoses = [{",
									"        \"diagnosisCode\": \"F5000\",",
									"        \"diagnosisName\": \"Anorexia nervosa, unspecified\"",
									"    },",
									"    {",
									"        \"diagnosisCode\": \"F5001\",",
									"        \"diagnosisName\": \"Anorexia nervosa, restricting type\"",
									"    },",
									"    {",
									"        \"diagnosisCode\": \"F5002\",",
									"        \"diagnosisName\": \"Anorexia nervosa, binge eating\\/purging type\"",
									"    },",
									"    {",
									"        \"diagnosisCode\": \"F502\",",
									"        \"diagnosisName\": \"Bulimia nervosa\"",
									"    },",
									"    {",
									"        \"diagnosisCode\": \"F508\",",
									"        \"diagnosisName\": \"Other eating disorders\"",
									"    },",
									"    {",
									"        \"diagnosisCode\": \"F5081\",",
									"        \"diagnosisName\": \"Binge eating disorder\"",
									"    },",
									"    {",
									"        \"diagnosisCode\": \"F5082\",",
									"        \"diagnosisName\": \"Avoidant\\/restrictive food intake disorder\"",
									"    },",
									"    {",
									"        \"diagnosisCode\": \"F509\",",
									"        \"diagnosisName\": \"Eating disorder, unspecified\"",
									"    }];",
									"}",
									"",
									"let currentFilPatientPrimaryDiagnosis = filPatientPrimaryDiagnoses.shift();",
									"console.log(currentFilPatientPrimaryDiagnosis.diagnosisCode)",
									"pm.environment.set(\"filPatientPrimaryDiagnosisCode\", currentFilPatientPrimaryDiagnosis.diagnosisCode);",
									"pm.environment.set(\"filPatientPrimaryDiagnosisName\", currentFilPatientPrimaryDiagnosis.diagnosisName);",
									"pm.environment.set(\"filPatientPrimaryDiagnoses\", filPatientPrimaryDiagnoses);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c8e3ddd3-16c9-4b34-b57d-e504943fbe60",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/patients?page-number=1&page-size=100&filter-by=patient-primary-diagnosis::{{filPatientPrimaryDiagnosisCode}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"patients"
							],
							"query": [
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "page-size",
									"value": "100"
								},
								{
									"key": "filter-by",
									"value": "patient-primary-diagnosis::{{filPatientPrimaryDiagnosisCode}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter by primary diagnosis as none",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e65a5f7-1918-4bbc-9b18-702ea89fd9f5",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"if (jsonData.totalCount > 0) {",
									"    pm.test(\"Verify patients filter by primary diagnosis as none\", () => {",
									"        for (let i = 0; i < jsonData['data'].length; i++) {",
									"            tests[\"Patient# \" + (i + 1) + \" has no primary diagnosis \"] = pm.expect(jsonData['data'][i]).to.not.have.property('primaryDiagnosis');",
									"        }",
									"    });",
									"} else {",
									"    pm.test(\"No data with filter \" + pm.environment.get(\"filPatientPrimaryDiagnosis\") + \" is found\", () => {",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5c083e7b-a58a-4f66-9ff6-c508418ba586",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4190ef0f-c732-46a9-a3ef-5336459f9321",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/patients?page-number=1&page-size=100&filter-by=patient-primary-diagnosis::none",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"patients"
							],
							"query": [
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "page-size",
									"value": "100"
								},
								{
									"key": "filter-by",
									"value": "patient-primary-diagnosis::none"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter by Medial clearance status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a888ff65-4076-4bc6-95ca-628a823c0a60",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"const filMedClearanceStatuses = pm.environment.get(\"filMedClearanceStatuses\");",
									"",
									"if (filMedClearanceStatuses && filMedClearanceStatuses.length > 0) {",
									"    postman.setNextRequest(request.name);",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"if (jsonData.totalCount > 0) {",
									"    pm.test(\"Verify patients filter by Medical clearance status\", () => {",
									"        for (let i = 0; i < jsonData['data'].length; i++) {",
									"            tests[\"Patient# \" + (i + 1) + \" has Medical clearance status as \" + jsonData['data'][i].medicalClearanceStatus] = pm.expect(jsonData['data'][i].medicalClearanceStatus.toLowerCase()).to.eql(pm.environment.get(\"filMedCleranceStatus\").toLowerCase());",
									"        }",
									"    });",
									"} else {",
									"    pm.test(\"No data with filter \" + pm.environment.get(\"filMedCleranceStatus\") + \" is found\", () => {",
									"    });",
									"}",
									"",
									"pm.test(\"Verify no duplicate patients returned\", function () {",
									"    var externalIds = [];",
									"    for (let i = 0; i < jsonData['data'].length; i++) {",
									"        externalIds.push(jsonData.data[i]['externalId']);",
									"    }",
									"    //Store all the externalIds in a Set to check if there is any duplicate value",
									"    var externalIdsSet = new Set(externalIds);",
									"    pm.expect(externalIdsSet.size).to.eql(externalIds.length);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8ba5a283-7f2c-4075-aecd-c294c123abcb",
								"exec": [
									"let filMedClearanceStatuses = pm.environment.get(\"filMedClearanceStatuses\");",
									"",
									"if (!filMedClearanceStatuses || filMedClearanceStatuses.length == 0) {",
									"    filMedClearanceStatuses = [\"Not ready\", \"Ready for review\", \"In progress\", \"Cleared\", \"Not cleared\"];",
									"}",
									"",
									"let currentFilMedClearanceStatus = filMedClearanceStatuses.shift();",
									"console.log(currentFilMedClearanceStatus);",
									"pm.environment.set(\"filMedCleranceStatus\", currentFilMedClearanceStatus);",
									"pm.environment.set(\"filMedClearanceStatuses\", filMedClearanceStatuses);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "74771e9d-8205-457c-bdb5-61b625ad511c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/patients?page-number=1&page-size=100&filter-by=medical-clearance-status::{{filMedCleranceStatus}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"patients"
							],
							"query": [
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "page-size",
									"value": "100"
								},
								{
									"key": "filter-by",
									"value": "medical-clearance-status::{{filMedCleranceStatus}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter by Insurance verification status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "88b4aaf1-eb9c-486a-9b4d-8eb70e05b299",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"const filInsuranceStatuses = pm.environment.get(\"filInsuranceStatuses\");",
									"",
									"if (filInsuranceStatuses && filInsuranceStatuses.length > 0) {",
									"    postman.setNextRequest(request.name);",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"if (jsonData.totalCount > 0) {",
									"    pm.test(\"Verify patients filter by insurance verification status\", () => {",
									"        for (let i = 0; i < jsonData['data'].length; i++) {",
									"            tests[\"Patient# \" + (i + 1) + \" has insurance verification status as \" + jsonData['data'][i].insuranceStatus] = pm.expect(jsonData['data'][i].insuranceStatus.toLowerCase()).to.eql(pm.environment.get(\"filInsuranceStatus\").toLowerCase());",
									"        }",
									"    });",
									"} else {",
									"    pm.test(\"No data with filter \" + pm.environment.get(\"filMedCleranceStatus\") + \" is found\", () => {",
									"    });",
									"}",
									"",
									"pm.test(\"Verify no duplicate patients returned\", function () {",
									"    var externalIds = [];",
									"    for (let i = 0; i < jsonData['data'].length; i++) {",
									"        externalIds.push(jsonData.data[i]['externalId']);",
									"    }",
									"    //Store all the externalIds in a Set to check if there is any duplicate value",
									"    var externalIdsSet = new Set(externalIds);",
									"    pm.expect(externalIdsSet.size).to.eql(externalIds.length);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d049bb7d-105a-4558-93c9-01e98ef5219f",
								"exec": [
									"let filInsuranceStatuses = pm.environment.get(\"filInsuranceStatuses\");",
									"",
									"if (!filInsuranceStatuses || filInsuranceStatuses.length == 0) {",
									"    filInsuranceStatuses = [\"Ready for review\", \"Verification in progress\", \"Pre-authorization in progress\", \"Approved\", \"Denied\", \"Not ready\"];",
									"}",
									"",
									"let currentInsuranceStatus = filInsuranceStatuses.shift();",
									"console.log(currentInsuranceStatus);",
									"pm.environment.set(\"filInsuranceStatus\", currentInsuranceStatus);",
									"pm.environment.set(\"filInsuranceStatuses\", filInsuranceStatuses);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "32d60082-fe42-4375-bc2e-35d78f5226b3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/patients?page-number=1&page-size=100&filter-by=insurance-status::{{filInsuranceStatus}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"patients"
							],
							"query": [
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "page-size",
									"value": "100"
								},
								{
									"key": "filter-by",
									"value": "insurance-status::{{filInsuranceStatus}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter by payor",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ef1d7f8-e576-42bd-a1ff-34edff4236ba",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"if (jsonData.totalCount > 0) {",
									"    pm.test(\"Verify patients filter by payor: \"+pm.environment.get(\"filCoverageType\")+\"\", () => {",
									"        for (let i = 0; i < jsonData['data'].length; i++) {",
									"            tests[\"Patient# \" + (i + 1) + \" has payor as \" + jsonData['data'][i].payorName] = pm.expect(jsonData['data'][i].payorName).to.eql(pm.environment.get(\"filCoverageType\"));",
									"        }",
									"    });",
									"} else {",
									"    pm.test(\"No data with filter \" + pm.environment.get(\"filCoverageType\") + \" is found\", () => {",
									"    });",
									"}",
									"",
									"const filCoverageTypes = pm.environment.get(\"filCoverageTypes\");",
									"",
									"if (filCoverageTypes && filCoverageTypes.length > 0) {",
									"    console.log(\"filCoverageTypes: \"+filCoverageTypes);",
									"    console.log(\"filCoverageTypes: \"+filCoverageTypes.length);",
									"    postman.setNextRequest(\"Filter by payor\");",
									"}else{",
									"    postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Verify no duplicate patients returned\", function () {",
									"    var externalIds = [];",
									"    for (let i = 0; i < jsonData['data'].length; i++) {",
									"        externalIds.push(jsonData.data[i]['externalId']);",
									"    }",
									"    //Store all the externalIds in a Set to check if there is any duplicate value",
									"    var externalIdsSet = new Set(externalIds);",
									"    pm.expect(externalIdsSet.size).to.eql(externalIds.length);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "73472a2b-0165-4e8d-aecd-bd9d73148359",
								"exec": [
									"",
									"",
									"let filCoverageTypes = pm.environment.get(\"filCoverageTypes\");",
									"",
									"if (!filCoverageTypes || filCoverageTypes.length == 0) {",
									"    filCoverageTypes = [\"AIDS Healthcare Foundation\",",
									"        \"ATRIO Health Plans\",",
									"        \"Aetna\",",
									"        \"Affinity Health Plan\",",
									"        \"AgeRight Advantage Health Plan\",",
									"        \"AgeWell New York\",",
									"        \"Alameda Alliance for Health\",",
									"        \"Alignment Health Plan\",",
									"        \"AllCare IPA, fka Mid Rogue IPA HealthPlan\",",
									"        \"AltaMed PACE\",",
									"        \"AmeriHealth\",",
									"        \"Amida Care\",",
									"        \"Anthem\",",
									"        \"Arkansas Blue Cross and Blue Shield\",",
									"        \"Aspire Health Plan\",",
									"        \"Asuris Northwest Health\",",
									"        \"Atlanticare LIFE Connection\",",
									"        \"Auxilio Salud Plus\",",
									"        \"Avera Health Plans, Inc.\",",
									"        \"Beacon Health and Social Service, Inc. dba Beacon of LIFE PACE Program\",",
									"        \"Bienvivir Senior Health Services\",",
									"        \"Blue Cross Blue Shield of Arizona\",",
									"        \"Blue Cross Blue Shield of Massachusetts\",",
									"        \"Blue Cross Blue Shield of Michigan\",",
									"        \"Blue Cross Blue Shield of North Dakota\",",
									"        \"Blue Cross and Blue Shield of Alabama\",",
									"        \"Blue Cross and Blue Shield of Illinois\",",
									"        \"Blue Cross and Blue Shield of Kansas\",",
									"        \"Blue Cross and Blue Shield of Kansas City\",",
									"        \"Blue Cross and Blue Shield of Louisiana\",",
									"        \"Blue Cross and Blue Shield of Minnesota\",",
									"        \"Blue Cross and Blue Shield of Mississippi\",",
									"        \"Blue Cross and Blue Shield of Montana\",",
									"        \"Blue Cross and Blue Shield of Nebraska\",",
									"        \"Blue Cross and Blue Shield of New Mexico\",",
									"        \"Blue Cross and Blue Shield of North Carolina\",",
									"        \"Blue Cross and Blue Shield of Oklahoma\",",
									"        \"Blue Cross and Blue Shield of Rhode Island\",",
									"        \"Blue Cross and Blue Shield of Texas\",",
									"        \"Blue Cross and Blue Shield of Vermont\",",
									"        \"Blue Cross and Blue Shield of Wyoming\",",
									"        \"Blue Cross of Idaho Health Service, Inc.\",",
									"        \"Blue Shield of California\",",
									"        \"BlueCross BlueShield of South Carolina\",",
									"        \"BlueCross BlueShield of Tennessee\",",
									"        \"BlueCross BlueShield of Western New York and BlueShield of Northeastern New York\",",
									"        \"Brand New Day\",",
									"        \"Brandman Centers for Senior Care (BCSC)\",",
									"        \"BridgeSpan Health Company\",",
									"        \"Bright Health\",",
									"        \"CHRISTUS Health Plan\",",
									"        \"CalOptima\",",
									"        \"CalViva Health\",",
									"        \"Capital District Physicians' Health Plan, Inc. (CDPHP)\",",
									"        \"Care N' Care Health Plan\",",
									"        \"CareFirst BCBS\",",
									"        \"CareOregon\",",
									"        \"Cascade Health Alliance, LLC\",",
									"        \"Catholic Health LIFE\",",
									"        \"CenCal Health\",",
									"        \"Centene\",",
									"        \"Center for Elders Independence\",",
									"        \"CenterLight Healthcare\",",
									"        \"Centers Plan for Healthy Living (CPHL)\",",
									"        \"Centers for Medicare and Medicaid Services (CMS)\",",
									"        \"Central California Alliance for Health\",",
									"        \"Central Health Plan of California, Inc.\",",
									"        \"Chinese Community Health Plan\",",
									"        \"Cigna\",",
									"        \"Clover Health\",",
									"        \"Community Care Health Plan\",",
									"        \"Community First Health Plans\",",
									"        \"Community Health Choice, Inc. (CHC)\",",
									"        \"Community Health Group\",",
									"        \"Community Health Plan of Washington (CHPW)\",",
									"        \"Complete Senior Care\",",
									"        \"ConnectiCare, Inc.\",",
									"        \"Consolidated Association of Railroad Employees Health Care (CARE)\",",
									"        \"Contra Costa Health Plan\",",
									"        \"Cook Children's Health Plan (CCHP)\",",
									"        \"Crystal Run Health Plans\",",
									"        \"DAKOTACARE\",",
									"        \"Dean Health Plan\",",
									"        \"Dell Children's Health Plan\",",
									"        \"Devoted Health\",",
									"        \"Driscoll Health Plan\",",
									"        \"EMI Health\",",
									"        \"Eddy SeniorCare\",",
									"        \"El Paso First Health Plans\",",
									"        \"ElderONE\",",
									"        \"Elderplan, Inc.\",",
									"        \"Excellus BlueCross BlueShield\",",
									"        \"Fallon Health\",",
									"        \"FamilyHealth Center for Older Adults (PACE)\",",
									"        \"First Medical Health Plan, Inc.\",",
									"        \"FirstCare Health Plans\",",
									"        \"Fresno PACE for Seniors\",",
									"        \"GHI (Emblem Health)\",",
									"        \"Gary and Mary West PACE\",",
									"        \"Geisinger Health Plan\",",
									"        \"Gold Coast Health Plan\",",
									"        \"Golden State Medicare Health Plan\",",
									"        \"HIP/Emblem Health\",",
									"        \"Harvard Pilgrim Health Care, Inc.\",",
									"        \"Health Alliance\",",
									"        \"Health New England, Inc.\",",
									"        \"Health Plan of San Joaquin\",",
									"        \"Health Plan of San Mateo\",",
									"        \"Healthfirst\",",
									"        \"Highmark BCBS\",",
									"        \"Highmark Health\",",
									"        \"Horizon Blue Cross Blue Shield of New Jersey\",",
									"        \"Humana\",",
									"        \"ICHS PACE\",",
									"        \"Imperial Health Plan\",",
									"        \"Independence Blue Cross\",",
									"        \"Independent Health Association, Inc.\",",
									"        \"Inland Empire Health Plan\",",
									"        \"InnovAge\",",
									"        \"InnovaCare Health Solutions\",",
									"        \"Inspira LIFE\",",
									"        \"Inter Valley Health Plan\",",
									"        \"Kaiser Foundation Health Plan (California)\",",
									"        \"Kaiser Foundation Health Plan of Washington\",",
									"        \"Kaiser Foundation Health Plan of the Northwest (OR, some WA)\",",
									"        \"Kaiser Foundation Health Plan, Inc.- Other\",",
									"        \"Kaiser Foundation Health Plan, Inc.- SoCal\",",
									"        \"Kalos Health\",",
									"        \"KelseyCare Advantage\",",
									"        \"Kern Health Systems, Inc.\",",
									"        \"L.A. Care Health Plan\",",
									"        \"LIFE St. Francis\",",
									"        \"LIFE at Lourdes, Inc.\",",
									"        \"Lasso Healthcare\",",
									"        \"LifeWise Health Plan of Washington\",",
									"        \"Longevity Health Plan\",",
									"        \"Lutheran Senior LIFE at Jersey City\",",
									"        \"MAPFRE Puerto Rico\",",
									"        \"MVP Health Care\",",
									"        \"Magellan\",",
									"        \"MediExcel Health Plan\",",
									"        \"Medicaid\",",
									"        \"Medical Card System, Inc.\",",
									"        \"Medicare\",",
									"        \"Memorial Hermann Health Insurance Company\",",
									"        \"MetroPlus Health Plan, Inc.\",",
									"        \"Miami Children’s Health Plan\",",
									"        \"Moda Health\",",
									"        \"Molina Healthcare\",",
									"        \"Mutual of Omaha Insurance Company\",",
									"        \"NY Hotel Trades Council and Hotel Association of NYC\",",
									"        \"Neighborhood Health Plan of Rhode Island, Inc.\",",
									"        \"No Insurance\",",
									"        \"On Lok Lifeways\",",
									"        \"Optum\",",
									"        \"Oscar Insurance Corporation\",",
									"        \"Other\",",
									"        \"Oxford\",",
									"        \"PACE CNY\",",
									"        \"PacificSource Health Plans\",",
									"        \"Parkland Community Health Plan\",",
									"        \"Partners Health Plan\",",
									"        \"Partnership HealthPlan of California\",",
									"        \"Physicians Health Plan of Northern Indiana, Inc.\",",
									"        \"Piedmont Community Health Plan\",",
									"        \"Plan Medico Bella Vista\",",
									"        \"Plan de Salud Menonita\",",
									"        \"Premera Blue Cross\",",
									"        \"Presbyterian Health Plan\",",
									"        \"Priority Health\",",
									"        \"Private Pay\",",
									"        \"ProCare Advantage\",",
									"        \"Prominence Health Plan\",",
									"        \"Providence Health Plan\",",
									"        \"Redwood Coast PACE\",",
									"        \"Regence BlueCross BlueShield of Oregon\",",
									"        \"Regence BlueCross BlueShield of Utah\",",
									"        \"Regence BlueShield\",",
									"        \"Regence BlueShield of Idaho\",",
									"        \"RiverSpring Health\",",
									"        \"Ryder Health Plan, Inc.\",",
									"        \"SCAN Health Plan\",",
									"        \"SIHO Holding, LLC dba SIHO Insurance Services\",",
									"        \"SIMNSA Health Plan\",",
									"        \"Samaritan Health Plans\",",
									"        \"San Diego PACE\",",
									"        \"San Francisco Health Plan (SFHP)\",",
									"        \"Santa Clara County dba Valley Health Plan\",",
									"        \"Santa Clara Family Health Plan\",",
									"        \"Santa Fe Employe's Hospital Association-Coast Lines\",",
									"        \"Scott and White Health Plan\",",
									"        \"Scripps Health Plan\",",
									"        \"Seaside Health Plan\",",
									"        \"SelectHealth\",",
									"        \"Sendero Health Plan\",",
									"        \"Senior Whole Health\",",
									"        \"Sentara Health Plans, Inc. (fka Optima Health)\",",
									"        \"Sharp Health Plan\",",
									"        \"Silver Star Health Network\",",
									"        \"St. Paul's PACE\",",
									"        \"Stanford Health Care Advantage\",",
									"        \"State of California\",",
									"        \"State of New Jersey\",",
									"        \"State of New York\",",
									"        \"State of Oregon\",",
									"        \"State of Texas\",",
									"        \"State of Washington\",",
									"        \"Stockton PACE\",",
									"        \"Sunrise Advantage Plan\",",
									"        \"Sutter Health Plus\",",
									"        \"Sutter SeniorCare\",",
									"        \"Texas Children's Health Plan\",",
									"        \"The Basics at Jan Werner (fka Jan Werner Adult Day Care Center)\",",
									"        \"Total Senior Care, Inc.\",",
									"        \"Triple-S Management Corporation\",",
									"        \"True Health New Mexico\",",
									"        \"Tufts Health Plan\",",
									"        \"UCare\",",
									"        \"UMR\",",
									"        \"UPMC Health Plan\",",
									"        \"Umpqua Health Alliance\",",
									"        \"Union Pacific Railroad Employes Health Systems (UPREHS)\",",
									"        \"UnitedHealthcare\",",
									"        \"Univera Healthcare\",",
									"        \"VNSNY CHOICE\",",
									"        \"VillageCareMAX\",",
									"        \"Vitality Health Plan of California\",",
									"        \"WEA Trust\",",
									"        \"WellCare Health Plans, Inc.\",",
									"        \"Wellmark Blue Cross and Blue Shield of Iowa\",",
									"        \"Wellmark Blue Cross and Blue Shield of South Dakota\",",
									"        \"Western Health Advantage\",",
									"        \"Western Oregon Advanced Health, LLC\",",
									"        \"Yamhill Community Care Organization\"",
									"    ];",
									"}",
									"",
									"let currentFilCoverageType = filCoverageTypes.shift();",
									"console.log(currentFilCoverageType);",
									"pm.environment.set(\"filCoverageType\", currentFilCoverageType);",
									"pm.environment.set(\"filCoverageTypes\", filCoverageTypes);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0bb08d56-c302-492e-9903-20d326360e1f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/patients?page-number=1&page-size=100&filter-by=payor-name::{{filCoverageType}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"patients"
							],
							"query": [
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "page-size",
									"value": "100"
								},
								{
									"key": "filter-by",
									"value": "payor-name::{{filCoverageType}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter by payor program name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a8a4b6c-eab0-447f-8e48-a84e10134f50",
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"const filPatientPayorPrograms = pm.environment.get(\"filPatientPayorPrograms\");",
									"",
									"if (filPatientPayorPrograms && filPatientPayorPrograms.length > 0) {",
									"    postman.setNextRequest(request.name);",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"if (jsonData.totalCount > 0) {",
									"    pm.test(\"Verify patients filter by payor program\", () => {",
									"        for (let i = 0; i < jsonData['data'].length; i++) {",
									"            tests[\"Patient# \" + (i + 1) + \" has payor program as \" + jsonData['data'][i].payorProgramName] = pm.expect(jsonData['data'][i].payorProgramName).to.eql(pm.environment.get(\"filPatientPayorProgram\"));",
									"        }",
									"    });",
									"} else {",
									"    pm.test(\"No data with filter \" + pm.environment.get(\"filPatientPayorProgram\") + \" is found\", () => {",
									"    });",
									"}",
									"",
									"pm.test(\"Verify no duplicate patients returned\", function () {",
									"    var externalIds = [];",
									"    for (let i = 0; i < jsonData['data'].length; i++) {",
									"        externalIds.push(jsonData.data[i]['externalId']);",
									"    }",
									"    //Store all the externalIds in a Set to check if there is any duplicate value",
									"    var externalIdsSet = new Set(externalIds);",
									"    pm.expect(externalIdsSet.size).to.eql(externalIds.length);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9aae939e-b4ae-4235-b857-9ace4376dc46",
								"exec": [
									"let filPatientPayorPrograms = pm.environment.get(\"filPatientPayorPrograms\");",
									"",
									"if (!filPatientPayorPrograms || filPatientPayorPrograms.length == 0) {",
									"    filPatientPayorPrograms = [\"Aetna\",",
									"        \"Anthem\",",
									"        \"Beacon - SCA\",",
									"        \"Beacon - Standard\",",
									"        \"Cigna\",",
									"        \"Horizon BCBS\",",
									"        \"Kaiser Northern CA - Central Valley\",",
									"        \"Kaiser Northern CA - Diablo\",",
									"        \"Kaiser Northern CA - East Bay\",",
									"        \"Kaiser Northern CA - Fresno\",",
									"        \"Kaiser Northern CA - Greater Southern Alameda\",",
									"        \"Kaiser Northern CA - Marin/Sonoma\",",
									"        \"Kaiser Northern CA - Redwood City\",",
									"        \"Kaiser Northern CA - Roseville\",",
									"        \"Kaiser Northern CA - Sacramento\",",
									"        \"Kaiser Northern CA - San Francisco\",",
									"        \"Kaiser Northern CA - San Jose\",",
									"        \"Kaiser Northern CA - Santa Clara\",",
									"        \"Kaiser Northern CA - South Sacramento\",",
									"        \"Kaiser Northern CA - South San Francisco\",",
									"        \"MODA\",",
									"        \"Magellan - SCA\",",
									"        \"Magellan - Standard\",",
									"        \"Optum\",",
									"        \"Optum Cares\",",
									"        \"Optum Standard\",",
									"        \"Orange County\",",
									"        \"PacificSource - Medicaid\",",
									"        \"PacificSource - Navigator\",",
									"        \"PacificSource - SmartChoice\",",
									"        \"PacificSource - Voyager\",",
									"        \"Partnership Health Plan\",",
									"        \"Private Pay\",",
									"        \"Project Heal\",",
									"        \"SCA\",",
									"        \"Standard\"];",
									"}",
									"",
									"let currentFilPatientPayorProgram = filPatientPayorPrograms.shift();",
									"console.log(currentFilPatientPayorProgram)",
									"pm.environment.set(\"filPatientPayorProgram\", currentFilPatientPayorProgram);",
									"pm.environment.set(\"filPatientPayorPrograms\", filPatientPayorPrograms);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "97fcbe71-6211-42b6-a4cc-bbb2d353494b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/patients?page-size=100&page-number=1&filter-by=payor-program-name::{{filPatientPayorProgram}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"patients"
							],
							"query": [
								{
									"key": "page-size",
									"value": "100"
								},
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "filter-by",
									"value": "payor-program-name::{{filPatientPayorProgram}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sort by admit date DESC",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0748795b-ae5b-4afd-ac3f-b218a41fa0bc",
								"exec": [
									"let ld = require('lodash');",
									"",
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 4000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test('Patients are sorted by admit date desc', () => {",
									"    let sorted = [];",
									"    for (var i = 0; i < jsonData.data.length; i++) {",
									"        if (jsonData.data[i].admitDate === null) {",
									"            continue;",
									"        }",
									"        sorted.push(jsonData.data[i].admitDate);",
									"    }",
									"    console.log(sorted);",
									"",
									"    let expectedSortedOrder = ld.orderBy(sorted, [], ['desc']);",
									"    console.log(expectedSortedOrder);",
									"",
									"    for (let i = 0; i < sorted.length; i++) {",
									"        tests[\"Patient# \" + (i + 1) + \" has admit date as \" + jsonData['data'][i].admitDate]",
									"            = pm.expect(jsonData['data'][i].admitDate).to.include((expectedSortedOrder[i]));",
									"    }",
									"});",
									"",
									"pm.test(\"Verify no duplicate patients returned\", function () {",
									"    var externalIds = [];",
									"    for (let i = 0; i < jsonData['data'].length; i++) {",
									"        externalIds.push(jsonData.data[i]['externalId']);",
									"    }",
									"    //Store all the externalIds in a Set to check if there is any duplicate value",
									"    var externalIdsSet = new Set(externalIds);",
									"    pm.expect(externalIdsSet.size).to.eql(externalIds.length);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5e829074-41d4-4461-831c-b972d6a33937",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/patients?page-size=100&page-number=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"patients"
							],
							"query": [
								{
									"key": "page-size",
									"value": "100"
								},
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "filter-by",
									"value": "patient-state::{{filPatientState}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Patient Diagnosis Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c8d6a633-47f1-4bb2-8f79-faa33a333bcf",
								"exec": [
									"let jsonData = pm.response.json();\r",
									"\r",
									"let primarydiagnosis_value = \"Anorexia nervosa, binge eating/purging type\";\r",
									"\r",
									"const filPatientPrimaryDiagnoses = pm.environment.get(\"filPatientPrimaryDiagnoses\");\r",
									"\r",
									"if (filPatientPrimaryDiagnoses && filPatientPrimaryDiagnoses.length > 0) {\r",
									"    postman.setNextRequest(request.name);\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 4000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a JSON body\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"if (jsonData.totalCount > 0) {\r",
									"    pm.test(\"Verify patients filter by primary diagnosis\", () => {\r",
									"        for (let i = 0; i < jsonData['data'].length; i++) {\r",
									"            tests[\"Patient# \" + (i + 1) + \" has primary diagnosis as \" + jsonData['data'][i].primaryDiagnosis] = pm.expect(jsonData['data'][i].primaryDiagnosis.toLowerCase()).to.eql(primarydiagnosis_value.toLowerCase());\r",
									"        }\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"No data with filter \" + primarydiagnosis_value + \" is found\", () => {\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Verify no duplicate patients returned\", function () {\r",
									"    var externalIds = [];\r",
									"    for (let i = 0; i < jsonData['data'].length; i++) {\r",
									"        externalIds.push(jsonData.data[i]['externalId']);\r",
									"    }\r",
									"    //Store all the externalIds in a Set to check if there is any duplicate value\r",
									"    var externalIdsSet = new Set(externalIds);\r",
									"    pm.expect(externalIdsSet.size).to.eql(externalIds.length);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "defd702e-62f1-48e2-8091-d4526b29bd22",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/patients?page-size=1000&page-number=1&filter-by=patient-primary-diagnosis::F5002",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"patients"
							],
							"query": [
								{
									"key": "page-size",
									"value": "1000"
								},
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "filter-by",
									"value": "patient-primary-diagnosis::F5002"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Patient Diagnosis Filter Multiple",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f71ad86b-03ab-407f-a683-543146ad5089",
								"exec": [
									"let jsonData = pm.response.json();\r",
									"\r",
									"let primarydiagnosis_List = [  \"Anorexia nervosa, binge eating/purging type\",  \"Anorexia nervosa, restricting type\",\r",
									"  \"Anorexia nervosa, restricting type\",  \"Anorexia nervosa, binge eating/purging type\",  \"Anorexia nervosa, restricting type\",\r",
									"  \"Anorexia nervosa, binge eating/purging type\",  \"Anorexia nervosa, binge eating/purging type\",  \"Anorexia nervosa, binge eating/purging type\",  \"Anorexia nervosa, binge eating/purging type\",  \"Anorexia nervosa, binge eating/purging type\",  \"Anorexia nervosa, binge eating/purging type\",  \"Anorexia nervosa, restricting type\",  \"Anorexia nervosa, restricting type\",  \"Anorexia nervosa, restricting type\",\r",
									"  \"Anorexia nervosa, restricting type\",  \"Anorexia nervosa, binge eating/purging type\",  \"Anorexia nervosa, restricting type\",\r",
									"  \"Anorexia nervosa, binge eating/purging type\",  \"Anorexia nervosa, restricting type\",  \"Anorexia nervosa, binge eating/purging type\"];\r",
									"\r",
									"const filPatientPrimaryDiagnoses = pm.environment.get(\"filPatientPrimaryDiagnoses\");\r",
									"\r",
									"if (filPatientPrimaryDiagnoses && filPatientPrimaryDiagnoses.length > 0) {\r",
									"    postman.setNextRequest(request.name);\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 4000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a JSON body\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"if (jsonData.totalCount > 0) {\r",
									"    pm.test(\"Verify patients filter by primary diagnosis\", () => {\r",
									"        for (let i = 0; i < jsonData['data'].length; i++) {\r",
									"            tests[\"Patient# \" + (i + 1) + \" has primary diagnosis as \" + jsonData['data'][i].primaryDiagnosis] = pm.expect(jsonData['data'][i].primaryDiagnosis.toLowerCase()).to.eql(primarydiagnosis_List[i].toLowerCase());\r",
									"        }\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"No data with filter \" + primarydiagnosis_List[i] + \" is found\", () => {\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Verify no duplicate patients returned\", function () {\r",
									"    var externalIds = [];\r",
									"    for (let i = 0; i < jsonData['data'].length; i++) {\r",
									"        externalIds.push(jsonData.data[i]['externalId']);\r",
									"    }\r",
									"    //Store all the externalIds in a Set to check if there is any duplicate value\r",
									"    var externalIdsSet = new Set(externalIds);\r",
									"    pm.expect(externalIdsSet.size).to.eql(externalIds.length);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5aa04e38-1aba-42f5-aecf-924eee6ac375",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/composition/patients?filter-by=patient-primary-diagnosis::F5002%26patient-primary-diagnosis::F5001",
							"host": [
								"{{host}}"
							],
							"path": [
								"composition",
								"patients"
							],
							"query": [
								{
									"key": "filter-by",
									"value": "patient-primary-diagnosis::F5002%26patient-primary-diagnosis::F5001"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "f24364e7-778c-4841-86e4-c94681ebb9f5"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "6888c734-ee41-4584-bdbc-91173ab51db6",
				"type": "text/javascript",
				"exec": [
					"//Set authoredByProviderExternalId to be used in Notes filter requests",
					"if (pm.environment.name === \"qa\") {",
					"    //id is set for Mayank in both the envs",
					"    pm.environment.set(\"authoredByProviderExternalId\", \"73f92e85-9596-46e0-aa18-2708cc8d7fc2\");",
					"    pm.environment.set(\"createdByProviderExternalId\", \"73f92e85-9596-46e0-aa18-2708cc8d7fc2\");",
					"} else if (pm.environment.name === \"dev\") {",
					"    pm.environment.set(\"authoredByProviderExternalId\", \"5832a752-4b0a-4a00-ae1e-935245cc642b\");",
					"    pm.environment.set(\"createdByProviderExternalId\", \"5832a752-4b0a-4a00-ae1e-935245cc642b\");",
					"}",
					"",
					"//Common methods to be used in tests",
					"collectionMethods = {",
					"    //Return random date by passing start and end date",
					"    randomDate: function (start, end) {",
					"        return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));",
					"    }",
					"}",
					"",
					"// Refresh the OAuth token if necessary",
					"console.log('Current environment: ' + pm.environment.name);",
					"",
					"if (pm.environment.name === \"qa\") {",
					"    pm.environment.set(\"vesta_audience\", \"https://equip-qa.us.auth0.com/api/v2/\");",
					"    pm.environment.set(\"token_tenant\", \"equip-qa\");",
					"    pm.environment.set(\"coookieURL\", \"https://equip-qa.us.auth0.com\");",
					"    pm.environment.set(\"vesta_client_id\", \"octk74sRPfVm7zJz314cMMzFHnGO3B2s\")",
					"    pm.environment.set(\"token_host\", \"https://equip-qa.us.auth0.com\")",
					"} else if (pm.environment.name === \"dev\") {",
					"    pm.environment.set(\"vesta_audience\", \"https://equip-dev.us.auth0.com/api/v2/\");",
					"    pm.environment.set(\"token_tenant\", \"equip-dev\");",
					"    pm.environment.set(\"coookieURL\", \"https://equip-dev.us.auth0.com\");",
					"    pm.environment.set(\"vesta_client_id\", \"hh9fZVGIShbS2xXdr7B0glheYEKOFFdw\")",
					"    pm.environment.set(\"token_host\", \"https://equip-dev.us.auth0.com\")",
					"}",
					"",
					"var tokenDate = new Date(2010, 1, 1);",
					"var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");",
					"if (tokenTimestamp) {",
					"    tokenDate = Date.parse(tokenTimestamp);",
					"}",
					"var expiresInTime = pm.environment.get(\"ExpiresInTime\");",
					"if (!expiresInTime) {",
					"    expiresInTime = 86400000; // Set default expiration time to 24 hours (in ms)",
					"}",
					"",
					"if ((new Date() - tokenDate) >= expiresInTime || pm.environment.get(\"test-token\") === \"\") {",
					"    // clearCookies();",
					"    getToken();",
					"}",
					"",
					"var tokenAuthorizationCode1;",
					"var tokenAuthorizationCode2;",
					"//Function to generate token",
					"function getToken() {",
					"    //Clear cookies",
					"    const cookieJar = pm.cookies.jar();",
					"    cookieJar.clear(pm.environment.get(\"coookieURL\"), () => {",
					"        console.log(\"Cookies cleared!\");",
					"        cookieJar.clear(pm.environment.get(\"coookieURL\") + '/usernamepassword/login', () => {",
					"            console.log(\"CSRF cookies cleared!\");",
					"",
					"            console.log(\"Generating token...\")",
					"            //GET authorization code",
					"            pm.sendRequest({",
					"                url: pm.environment.get(\"token_host\") + '/authorize?audience=' + pm.environment.get(\"vesta_audience\")",
					"                    + '&response_type=code&client_id=' + pm.environment.get(\"vesta_client_id\")",
					"                    + '&redirect_uri=https://*.equip.health',",
					"                method: 'GET',",
					"                header: {",
					"                    'Accept': '*/*'",
					"                }",
					"            }, (err, res) => {",
					"                let responseHeaderData = res.headers.get('Location').split('=');",
					"                let token = responseHeaderData[1].split('&');",
					"                tokenAuthorizationCode1 = token[0];",
					"                console.log(tokenAuthorizationCode1);",
					"",
					"                //POST request to login to vesta",
					"                let url = pm.environment.get(\"token_host\") + '/usernamepassword/login';",
					"                pm.sendRequest({",
					"                    url: url,",
					"                    method: 'POST',",
					"                    header: {",
					"                        'Accept': '*/*',",
					"                        'Content-Type': 'application/x-www-form-urlencoded',",
					"                    },",
					"                    body: {",
					"                        mode: 'urlencoded',",
					"                        urlencoded: [",
					"                            { key: \"username\", value: pm.environment.get(\"vesta_username\") },",
					"                            { key: \"password\", value: pm.environment.get(\"vesta_password\") },",
					"                            { key: \"state\", value: tokenAuthorizationCode1 },",
					"                            { key: \"tenant\", value: pm.environment.get(\"token_tenant\") },",
					"                            { key: \"client_id\", value: pm.environment.get(\"vesta_client_id\") },",
					"                            { key: \"redirect_uri\", value: \"https://*.equip.health\" },",
					"                            { key: \"response_type\", value: \"code\" },",
					"                            { key: \"connection\", value: \"Username-Password-Authentication\" }",
					"                        ]",
					"                    }",
					"                }, (err, res) => {",
					"                    const $ = cheerio.load(res.text());",
					"                    var wresult = ($(\"input\")[1])['attribs'].value; // get wresult",
					"                    var wctx = ($(\"input\")[2])['attribs'].value; // get wctx",
					"",
					"                    //POST request to get resume state",
					"                    let url = pm.environment.get(\"token_host\") + '/login/callback';",
					"                    pm.sendRequest({",
					"                        url: url,",
					"                        method: 'POST',",
					"                        header: {",
					"                            'Accept': '*/*',",
					"                            'Content-Type': 'application/x-www-form-urlencoded',",
					"                        },",
					"                        body: {",
					"                            mode: 'urlencoded',",
					"                            urlencoded: [",
					"                                { key: \"wa\", value: \"wsignin1.0\" },",
					"                                { key: \"wresult\", value: wresult },",
					"                                { key: \"wctx\", value: wctx }",
					"                            ]",
					"                        }",
					"                    }, (err, res) => {",
					"                        //GET authorization code",
					"                        pm.sendRequest({",
					"                            url: pm.environment.get(\"token_host\")",
					"                                + '/authorize?audience=' + pm.environment.get(\"vesta_audience\")",
					"                                + '&response_type=code&client_id=' + pm.environment.get(\"vesta_client_id\")",
					"                                + '&redirect_uri=https://*.equip.health',",
					"                            method: 'GET',",
					"                            header: {",
					"                                'Accept': '*/*'",
					"                            }",
					"                        }, (err, res) => {",
					"                            console.log(res);",
					"                            let responseHeaderData = res.headers.get('Location').split('=');",
					"                            let token = responseHeaderData[1].split('&');",
					"                            // console.log(token[0]);",
					"                            tokenAuthorizationCode2 = token[0];",
					"                            // Get token using POST request",
					"                            let url = pm.environment.get(\"token_host\") + '/oauth/token';",
					"                            pm.sendRequest({",
					"                                url: url,",
					"                                method: 'POST',",
					"                                header: {",
					"                                    'Accept': '*/*',",
					"                                    'Content-Type': 'application/x-www-form-urlencoded',",
					"                                },",
					"                                body: {",
					"                                    mode: 'urlencoded',",
					"                                    urlencoded: [",
					"                                        { key: \"client_id\", value: pm.environment.get(\"vesta_client_id\") },",
					"                                        { key: \"code\", value: tokenAuthorizationCode2 },",
					"                                        { key: \"audience\", value: pm.environment.get(\"vesta_audience\") },",
					"                                        { key: \"grant_type\", value: \"authorization_code\" },",
					"                                        { key: \"redirect_uri\", value: \"https://*.equip.health\" }]",
					"                                }",
					"                            }, (err, res) => {",
					"                                console.log(res.json().access_token)",
					"                                pm.environment.set(\"test-token\", res.json().access_token)",
					"                                pm.environment.set(\"OAuth_Timestamp\", new Date());",
					"",
					"                                // Set the ExpiresInTime variable to the time given in the response if it exists",
					"                                if (res.json().expires_in) {",
					"                                    expiresInTime = res.json().expires_in * 1000;",
					"                                }",
					"                                pm.environment.set(\"ExpiresInTime\", expiresInTime);",
					"                            })",
					"                        });",
					"                    });",
					"",
					"                });",
					"            });",
					"        });",
					"    });",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "2053c5ce-6450-4765-a573-dda97b1490d8",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}